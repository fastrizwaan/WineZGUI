# winezgui-templates
# Create, Set default, Clone Delete Templates
# So that users with custom winetricks verbs can use them
#Create, Copy, Delete, Rename, Backup, Restore
# FIXME winezgui-templates
WineZGUI_Templates()
{
 echo "WINEZGUI_TEMPLATE  = $WINEZGUI_TEMPLATE"
source ${DATADIR}/winezgui-list-available-templates || exit 1
export TEMPLATE=$(grep template ${SETTINGS_FILE}|cut -f2 -d ":")
export TEMPLATE_NAME=$(basename ${TEMPLATE})

if [ -z "${1}" ]; then
echo "Templates Selected!!!"
unset TEMPLATE_OPTION
TEMPLATE_OPTION=$( zenity --title "${APP_WITH_VER} - Templates"  \
              --list   --hide-header                             \
              --width=360 --height=240                           \
              --radiolist --column " "                           \
              --column "Action"                                  \
                  TRUE "Configure ${TEMPLATE_NAME}..."           \
                     0 "Change Template..."                      \
                     0 "Create..."                               \
                     0 "Delete..."                               \
              --text   "Prefix Template <b>${TEMPLATE_NAME}</b> in use" \
               )
                    #  0 "Rename..."                               \
                    #  0 "Delete..."                               \
                    #  0 "Backup..."                               \
                    #  0 "Restore..."                              \
  else
  TEMPLATE_OPTION="${1}"
  fi

 # Exit if Cancel is clicked
if [ -z "${TEMPLATE_OPTION}" ]; then
     DBUG "I: Templates: Cancel Selected!"
     return 1
fi

    
     # Configure current template
     if [ "${TEMPLATE_OPTION}" = "Configure ${TEMPLATE_NAME}..."  ]; then
          source ${DATADIR}/winezgui-configure-template || exit 1
          Configure_Template
          WineZGUI_Window
     fi
     

######################################
if [ "${TEMPLATE_OPTION}" = "Backup..." ]; then
         DBUG "I: Backup... Selected!"
         List_Available_Templates
         SELECTED_TEMPLATE_NAME=$(basename "${SELECTED_TEMPLATE}")
         
         
         TEMPLATE_SIZE=$(du  -sh ${SELECTED_TEMPLATE}|cut -f1)
         DBUG "I: Backup: Prefix = ${SELECTED_TEMPLATE_NAME}"
         DBUG "I: Backup: Prefix size = ${TEMPLATE_SIZE}"
         # Ask Before Backing up Default prefix
         # Ask Backup filename
         DATE=$(date +%F_%H%M)

         # Not setting flatpak or system name
         BKPFNAME="WineZGUI-Template-${SELECTED_TEMPLATE_NAME}-${DATE}.tar.gz"

         BACKUP_FILE=$( zenity                    \
           --title="Backup ${SELECTED_TEMPLATE_NAME} Prefix!" \
           --width=500 --height=30                \
           --text="Size: ${TEMPLATE_SIZE}\nName:"   \
           --entry-text="${BKPFNAME}"             \
           --entry)

         # if backup file is empty / cancel clicked
         if [ -z "${BACKUP_FILE}" ]; then
             DBUG "I: Backup: Cancelled!"
             WineZGUI_Window
         fi

         # Select Backup Target Directory
         Z_TITLE="Choose Backup Directory for ${BACKUP_FILE}!"
         TARGET_DIR=$(zenity --file-selection     \
                             --title="${Z_TITLE}" \
                             --directory)
         # Cleanup variable after use
         unset Z_TITLE

         # If no directory is selected or cancel is clicked by the user
         if [ -z "${TARGET_DIR}" ]; then
             # Retun to Main window
             WineZGUI_Window
         fi

         # Required extension is .wzt
         # If substring (suffix *.wzt") is NOT found add it
#         if ! [[ "${BACKUP_FILE}" == *".${BKP_EXT}" ]]; then
#               BACKUP_FILE="${BACKUP_FILE}.${BKP_EXT}"
#         fi

         # Check for available disk space in target directory before backing up
         # Get available target dir partition size in kilobytes (df)
         # and du -s prefix to get usage of the prefix to be

         ### CLEAN THIS UP
         TGTDISKFREE=$(df ${TARGET_DIR}|sed "s/  */ /g"|cut -f4 -d " "|tail -n1)
         PREFIXKSIZE=$(du -s ${DEFAULT}|cut -f1)
         TGTSIZEH=$(df -h ${TARGET_DIR}|sed "s/  */ /g"|cut -f4 -d " "|tail -n1)
         TOTAL_BACKUP_SIZE=$(du -sh ${DEFAULT}|cut -f1)
         TOTAL_SIZE_IN_HF=$(echo ${TOTAL_BACKUP_SIZE}|numfmt --from iec)
         DBUG "I: Backup: Target size: ${TGTSIZEH}"
         DBUG "I: Backup: Prefix size: ${TEMPLATE_SIZE}"

         if [ ${TGTDISKFREE} -gt ${PREFIXKSIZE} ];then
              DBUG "I: Backup: ${TARGET_DIR} has enough available disk space"
         else
              echo "W: Backup: ${TARGET_DIR} does not have free disk space!!!"
              unset MSG
              MSG+="${TARGET_DIR} has only ${TGTSIZEH} free disk space left!\n"
              MSG+="Prefix backup requires ${TEMPLATE_SIZE} free disk space."
              RESPONSE=$(zenity --warning --title "Not Enough Disk Space!" \
              --text "${MSG}")

              echo "W: Backup: Backup Cancelled!"
              WineZGUI_Window

         fi

         # Check if the user can write to the selected Backup Directory
         if [ ! -w "${TARGET_DIR}" ]; then
              DBUG "I: Backup: ${TARGET_DIR} not writable"
              zenity --error --no-wrap --title="Backup Error!" \
                     --text "${TARGET_DIR} not writable\nAborting Backup!"
         else
              DBUG "I: Backup: Creating ${BACKUP_FILE} backup..."

              # Preprocess: Prepare *.reg *.sh and *.txt for Backup
              Backup_Function "${SELECTED_TEMPLATE}"
              
# FIXME backup restore function not processing Templaes_dir
              # Create Backup archive and restore changes as soon as tar is done
              source ${DATADIR}/winezgui-create-wzt-info || exit 1

              # Create Bundle
              DBUG "I: Script: Backup: ${BKP_RESP_TXT}: Game Name: ${TAR_GAME_DIR_NAME}"
              DBUG "I: Script: Backup: ${BKP_RESP_TXT}: Creating ${BACKUP_FILE} file..."

              (tar   -zcf "${TARGET_DIR}/${BACKUP_FILE}" \
                     -C   "${TEMPLATES_DIR}" "${SELECTED_TEMPLATE_NAME}" &) | \
              zenity --progress --pulsate --auto-close \
                     --title="Creating ${SELECTED_TEMPLATE_NAME} backup!" \
                     --width=500 --text="${BACKUP_FILE}..."
              DBUG "I: Backup: ${BACKUP_FILE} created successfully"

              # If user clicks cancel, kill tar commands
              # zenity progress won't kill the process, so we do it
              PID_OF_TAR=$(ps -aux|grep tar|grep "${SELECTED_TEMPLATE_NAME}" \
                                  |sed 's/  */ /g'|cut -f2 -d " ")
              if ! [ -z "${PID_OF_TAR}" ]; then
                   kill -9 ${PID_OF_TAR} && \
                   DBUG "I: Backup: Cancelled! Killed tar!"  && \
                   rm -f "${TARGET_DIR}/${BACKUP_FILE}" && \
                   DBUG "I: Backup: Removed unusable ${BACKUP_FILE}"

                   # Report Size also
                   BACKUP_SIZE=$(du -sh "${TARGET_DIR}/${BACKUP_FILE}"|cut -f1)
                   # Backup Sucess Message
                   MSG=("${PREFIXNAME} backup cancelled!")

              else
                   DBUG "I: Backup: ${BACKUP_FILE} created, success!"
                   # Report Size also
                   BACKUP_SIZE=$(du -sh "${TARGET_DIR}/${BACKUP_FILE}"|cut -f1)
                   # Backup Sucess Message
                   MSG=("<b>Prefix: </b> ${PREFIXNAME}\n")
                   MSG+="<b>Filename:</b> ${BACKUP_FILE}"
                   MSG+="\n<b>Location:</b> ${TARGET_DIR}\n"
                   MSG+="<b>Backup Size:</b> ${BACKUP_SIZE}"

              fi
                            # Restore changed values after backup
              DBUG "I: Backup: Restoring Registry and Info files"
              cd ${TEMPLATES_DIR}
              SAVED_PREFIXNAME="${PREFIXNAME}"
              export PREFIXNAME="${GET_RENAME_TEMPLATE_NAME}"
              echo "----------------------------"
              echo "PREFIXNAME=$PREFIXNAME"
              Restore_Function "${TEMPLATES_DIR}/${TEMPLATE_NAME_IN_BACKUP}"
              export PREFIXNAME="${SAVED_PREFIXNAME}"
              
              DBUG "I: Backup: Created ${BACKUP_FILE} at ${TARGET_DIR}" && \
              zenity --no-wrap \
                     --info     \
                     --title="${BACKUP_FILE} Prefix Backup!" \
                     --text="${MSG[@]}"
         fi # ! -w
         # Cleanup variables after use
         unset MSG
         unset BACKUP_SIZE
         unset TARGET_DIR
         unset BACKUP_SIZE
         unset BACKUP_FILE

         # Return to Game window after backup or target directory write error
         WineZGUI_Window
######################################
fi


# Create, Modify, Delete Templates
if [ "${TEMPLATE_OPTION}" = "Change Template..." ]; then
     # Find all directories inside WINE_TEMPLATE directory
     # List here, use find exe
     # on selection link that to default, that's all!
     List_Available_Templates

     echo "Changing template for WineZGUI..."

     # Change Template to the selected one to be used from now on
     # if default link is broken then create link do wine_template
     find ${TEMPLATES_DIR} -maxdepth 1 -xtype l -delete

     if [ -w "${SETTINGS_FILE}" ]; then
          sed "s|template:.*|template:${SELECTED_TEMPLATE}|g" -i "${SETTINGS_FILE}"
          export TEMPLATE="${SELECTED_TEMPLATE}"
          export TEMPLATE_NAME=$(basename ${TEMPLATE})
     fi

     echo "Default = ${DEFAULT}"
 
     export DEFAULT="${SELECTED_TEMPLATE}"
     export TEMPLATE="${SELECTED_TEMPLATE}"
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
     sed "s|Template:.*|Template:${TEMPLATE_NAME}|g" -i "${ABOUTFILE}"
     sed "s|Wine Prefix:.*|Wine Prefix:${DEFAULT}|g" -i "${ABOUTFILE}"
fi

if [ "${TEMPLATE_OPTION}" = "Create..." ]; then
     # Ask for Name

     unset CREATE_TEMPLATE_TYPE
     CREATE_TEMPLATE_TYPE=$( zenity --title "${APP_WITH_VER} - Create Template"       \
                  --list   --hide-header                             \
                  --width=360 --height=180                           \
                  --radiolist --column " "                           \
                  --column "Action"                                  \
                      TRUE "Empty win32 template..."                    \
                         0 "Empty win64 template..."                    \
                         0 "Delete..."                    \
                  --text   "Template <b>${TEMPLATE_NAME}</b> in use, Create:" \
                   )

     # Exit if Cancel is clicked
     if [ -z "${CREATE_TEMPLATE_TYPE}" ]; then
          DBUG "I: Templates: Cancel Selected!"
          WineZGUI_Window
     fi

     # If arch specified as win32 then use it else use win64
     if [ "${CREATE_TEMPLATE_TYPE}" = "Empty win32 template..." ]; then
          SAVED_WINEARCH="${WINEARCH}"
          export WINEARCH=win32 
          export NEW_WINEARCH=${WINEARCH}
     else
          SAVED_WINEARCH="${WINEARCH}"
          export WINEARCH=win64
          export NEW_WINEARCH=${WINEARCH}
     fi

     # Get name for the Prefix Template
     GET_TEMPLATE_NAME=$(zenity --title "Create Prefix Template with ${WINEARCH} arch..." \
                                --text  "Current Arch:${SAVED_WINEARCH}\nName new template:" \
                                --width=500 --entry)

     if [ -z "${GET_TEMPLATE_NAME}" ]; then #if no name is given use filename
          #zenity --info --title="Shortcut... " --text="no Change"
          # return to Game window
          DBUG "I: Script: Rename Shortcut: Cancelled"
          WineZGUI_Window
     fi


     if [ -d "${TEMPLATES_DIR}/${GET_TEMPLATE_NAME}" ]; then
          zenity --error --title "${APP_WITH_VER}" \
                 --text "Template Directory Already Exists!"
          WineZGUI_Window
     fi


     # Create new Prefix Template
     Initialize_Wineprefix "${TEMPLATES_DIR}/${GET_TEMPLATE_NAME}"
     export WINEARCH="$SAVED_WINEARCH"
     # Ask the sue to change template
     Templates "Change Template..."
     
     # Prompt the user to change Arch too if it is different
     if [ "${NEW_WINEARCH}" != "${WINEARCH}" ]; then
          TEXT="Please use a wine arch to ${NEW_WINEARCH}, if you wish to use ${GET_TEMPLATE_NAME} Prefix!"
          zenity --warning --text="${TEXT}" --title "Created ${NEW_WINEARCH}, but using ${WINEARCH}!"
     fi

fi

#FIXME DELETE  Delete Templates current template delete won't change to wine
if [ "${TEMPLATE_OPTION}" = "Delete..." ]; then
     echo "+_+_+_+_+_+_+Delete template_+_+_+_+_"
     # Find all directories inside WINE_TEMPLATE directory
     # List here, use find exe
     # on selection link that to default, that's all!
     List_Available_Templates

     # Detect if current template is being asked to delete
     if [ "${SELECTED_TEMPLATE}" = "${TEMPLATE}" ]; then
          echo "SELECTED_TEMPLATE = ${SELECTED_TEMPLATE}"
          echo "TEMPLATE   = ${TEMPLATE}"
          echo "===================="
          rm -rf "${SELECTED_TEMPLATE}"
          sed "s|template:.*|template:${WINEZGUI_TEMPLATE}|g" -i "${SETTINGS_FILE}"
          export TEMPLATE=$(grep template ${SETTINGS_FILE}|cut -f2 -d ":")
          export TEMPLATE_NAME=$(basename ${TEMPLATE})
          export DEFAULT="${WINEZGUI_TEMPLATE}"
     fi
     # remove selected template
     find ${TEMPLATES_DIR} -maxdepth 1 -xtype l -delete
     rm -rvf "${SELECTED_TEMPLATE}"
     echo "1. !!!! DELETED ${SELECTED_TEMPLATE}"

     # Create wine template and link it to defaults
     if [ ! -d "${WINEZGUI_TEMPLATE}" ]; then
           echo "2. !!!! -d not found, initializing ${WINEZGUI_TEMPLATE}"
           Initialize_Wineprefix "${WINEZGUI_TEMPLATE}"
     fi

     unset SELECTED_TEMPLATE
     export TEMPLATE=$(grep template ${SETTINGS_FILE}|cut -f2 -d ":")
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
     WineZGUI_Window
fi

if [ "${TEMPLATE_OPTION}" = "Rename..."  ]; then
     List_Available_Templates
     SELECTED_TEMPLATE_NAME=$(basename "${SELECTED_TEMPLATE}")
     GET_RENAME_TEMPLATE_NAME=$( zenity        \
         --title="Rename ${SELECTED_TEMPLATE}"      \
         --width=700 --height=30    \
         --text="Change:"     \
         --entry-text="${SELECTED_TEMPLATE_NAME}" \
         --entry)
     if [ -d "${TEMPLATES_DIR}/${GET_RENAME_TEMPLATE_NAME}" ]; then
          zenity --error --text "Can't change to ${GET_RENAME_TEMPLATE_NAME}" \
                 --width=300 --title "${GET_RENAME_TEMPLATE_NAME} already exists!"
     fi
     mv -v "${SELECTED_TEMPLATE}" "${TEMPLATES_DIR}/${GET_RENAME_TEMPLATE_NAME}"
     Initialize_Wineprefix "${WINEZGUI_TEMPLATE}"

fi



if [ "${TEMPLATE_OPTION}" = "Restore..."  ]; then

     TEMPLATE_BACKUP_FILE="$(zenity --file-filter=*.tar.gz --file-selection \
                             --title="Select WineZGUI Template Backup File" \
                            )"

     # If no Backup file is selected, or cancel is clicked
     if [ -z "${TEMPLATE_BACKUP_FILE}" ]; then
          DBUG "I: Restore: Cancelled!"
          unset TEMPLATE_BACKUP_FILE  ; # Empty variable

     fi # -z "${TEMPLATE_BACKUP_FILE}"

     TEMPLATE_NAME_IN_BACKUP=$(tar -tf "${TEMPLATE_BACKUP_FILE}"|head -n1)

 	   echo "--------------${TEMPLATE_NAME_IN_BACKUP}--------------------"

 	   (tar -zxvf "${TEMPLATE_BACKUP_FILE}" -C "${TEMPLATES_DIR}" ) | \
      zenity --progress --pulsate --auto-close \
             --title="Creating ${PREFIXNAME} backup!" \
             --width=500 --text="${BACKUP_FILE}..."
     Restore_Function "${TEMPLATES_DIR}/${TEMPLATE_NAME_IN_BACKUP}"
     DBUG "I: Templates: ${TEMPLATE_NAME_IN_BACKUP} restored successfully"
fi

 
}
