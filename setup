#!/bin/bash

# Function Show help
ShowHelp()
{
  echo "Setup file for WineZGUI scripts"
  echo "Usage:"
  echo "$0 --install | --uninstall"
  echo ""
  echo "Options:"
  echo "-i, --install            Installs WineZGUI to default prefix /"
  echo "-u, --uninstall          Removes previously installed WinzeGUI"
  echo "-p, --prefix=            Installs to user specified prefix"  
  echo "-f, --flatpak            Install flatpak specific WineZGUI"
  echo ""
  echo "Examples:"
  echo "$0 --install --prefix=/usr/local"  
  echo "$0 --install --flatpak --prefix=/app"
  
}

# If no arguments are given show help
if [ $# -eq 0 ];  then
  ShowHelp
  exit
fi

# parse command line arguments
for i in "$@"
do
case $i in
    -p=*|--prefix=*)
    INSTALL_PREFIX="${i#*=}"
    ;;
    -f|--flatpak)
    FLATPAK="true"
    ;;
    -i|--install)
    INSTALL="true"
    ;;    
    -u|--uninstall)
    UNINSTALL="true"
    ;;
    -h|--help)
    ShowHelp
    exit
    ;;    
    *)
    ShowHelp       # unknown option
    exit
    ;;
esac
done

# Defaults for non flatpak install
APPLICATIONSDIR=~/.local/share/applications
UIC="gtk-update-icon-cache"
UDD="update-desktop-database ${APPLICATIONSDIR}"
WINE_CMD=$(which wine)
WINETRICKS_CMD=$(which winetricks)
TMPDIR="\$(realpath -m /tmp)"
WINEZPREFIX="\$(realpath -m ~/.local/share/winezgui)"

# If prefix= nothing then install to /usr
if [ -z "${INSTALL_PREFIX}" ]; then
   INSTALL_PREFIX="/usr"
fi

# Flatpak Specific Commands and Variables
if [ "${FLATPAK}" = "true" ]; then
     echo setting prefix and paths for flatpak
     INSTALL_PREFIX="/app"
     UIC="flatpak-spawn --host gtk-update-icon-cache"
     UDD="flatpak-spawn --host update-desktop-database ${APPLICATIONSDIR}"
     WINE_CMD='flatpak run --command=wine org.winehq.Wine'
     WINETRICKS_CMD='flatpak run --command=winetricks org.winehq.Wine'
     TMPDIR="\$(realpath -m ~/.var/app/io.github.WineZGUI/data/tmp)"
     WINEZPREFIX="\$(realpath -m ~/.var/app/io.github.WineZGUI/data/prefixes)"
fi     
##

# If Install is selected
if [ "${INSTALL}" = "true"  ]; then

     # Create required Directories
     mkdir -p ${INSTALL_PREFIX}/share/icons/hicolor/scalable/apps/
     mkdir -p ${INSTALL_PREFIX}/share/applications/
     mkdir -p ${INSTALL_PREFIX}/bin/
  
     # Install the files
     install -Dvm644 ./assets/winezgui.svg        ${INSTALL_PREFIX}/share/icons/hicolor/scalable/apps/
     install -Dvm644 ./assets/winezgui.desktop    ${INSTALL_PREFIX}/share/applications/
     install -Dvm755 ./bin/winezgui               ${INSTALL_PREFIX}/bin/
     install -Dvm755 ./bin/winezgui-create-prefix ${INSTALL_PREFIX}/bin/

     # Change Variables in winezgui and winezgui-create-prefix scripts for system or flatpak install
     sed "s|BINDIR=/usr|BINDIR=$INSTALL_PREFIX|"                          -i ${INSTALL_PREFIX}/bin/winezgui
     sed "s|UPDATE_ICON_CACHE=.*|UPDATE_ICON_CACHE=\"$UIC\"|"             -i ${INSTALL_PREFIX}/bin/winezgui-create-prefix
     sed "s|UPDATE_DESKTOP_DATABASE=.*|UPDATE_DESKTOP_DATABASE=\"$UDD\"|" -i ${INSTALL_PREFIX}/bin/winezgui-create-prefix
  #  sed "s|WINETRICKS_CMD=.*|WINETRICKS_CMD=\"$WINETRICKS_CMD\"|"        -i ${INSTALL_PREFIX}/bin/winezgui-create-prefix
  #  sed "s|WINE_CMD=.*|WINE_CMD=\"$WINE_CMD\"|"                          -i ${INSTALL_PREFIX}/bin/winezgui-create-prefix
     sed "s|TMPDIR=.*|TMPDIR=\"$TMPDIR\"|"                                -i ${INSTALL_PREFIX}/bin/winezgui-create-prefix
     sed "s|WINEZPREFIX=.*|WINEZPREFIX=\"$WINEZPREFIX\"|"                 -i ${INSTALL_PREFIX}/bin/winezgui-create-prefix
     sed "s|WINEZPREFIX=.*|WINEZPREFIX=\"$WINEZPREFIX\"|"                 -i ${INSTALL_PREFIX}/bin/winezgui

     # Create uninstall script for later removal
     echo "
     rm -vf ${INSTALL_PREFIX}/share/icons/hicolor/scalable/apps/winezgui.svg
     rm -vf ${INSTALL_PREFIX}/share/applications/winezgui.desktop
     rm -vf ${INSTALL_PREFIX}/bin/winezgui
     rm -vf ${INSTALL_PREFIX}/bin/winezgui-create-prefix
     " > ./uninstall

# For --uninstall, if already installed then uninstall else skip
elif [ "${UNINSTALL}" = "true" ]; then
       if [ -f ./uninstall ]; then
            echo "Uninstalling..."
            sh ./uninstall
            rm ./uninstall
       else
            echo "Not installed. "
       fi
fi
