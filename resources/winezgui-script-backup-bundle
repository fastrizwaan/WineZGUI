# winezgui-script-backup-bundle
# Create Bundle from existing wine prefix
# Steps:
# 1. Exclude Directories for bundling
# 2. Calculate Backup Size based on Gamedir whether it is in Prefix or not
# 3. Prepare Prefix Name
# 4. Ask file name for the prefix / bundle
# 5. Ask user to select backup target/destination directory
# 6. Ask for Compression Levels
# 7. Create wzt = tar.zst file
# 8. Show info about created wzt file 
WINEZGUI-SCRIPT-BACKUP-BUNDLE()
{
  echo "I: Script: Backup: Create Game Bundle... Selected!"
  echo -n "I: Script: Backup: Bundle: Checking if ${EXE_NAME} is not" 
  echo    "inside a standard directory"


  # 1. Exclude Directories for bundling
  # Do not allow game bundle creation if the user has .exe inside
  # standard directories like ~/Documents ~/Downloads etc. to avoid huge file
  unset DO_NOT_BUNDLE_FROM
  # 1.1 List of standard Linux directories to avoid
  # 1.1.1 Get root dirs using find to handle of different OS
  ROOT_DIRS="$(find / -maxdepth 1 -type d)"
  # 1.1.2 Get Mounted Partitions using mount command
  MOUNTED_PARTITONs="$(mount |cut -f3 -d " ")"
  # 1.1.3 Add Root dirs and mounted partitions to Do_not_bundle variable
  DO_NOT_BUNDLE_FROM+="${ROOT_DIRS} "
  DO_NOT_BUNDLE_FROM+="${MOUNTED_PARTITONs} "
  # 1.1.4 Manually include these known directories
  DO_NOT_BUNDLE_FROM+="/    /boot /dev  /etc  /home /media "
  DO_NOT_BUNDLE_FROM+="/mnt /opt  /proc /root /run "
  DO_NOT_BUNDLE_FROM+="/srv /sys  /tmp  /usr  /var "
  DO_NOT_BUNDLE_FROM+="${HOME} "
  DO_NOT_BUNDLE_FROM+="${HOME}/Desktop    ${HOME}/Documents "
  DO_NOT_BUNDLE_FROM+="${HOME}/Downloads  ${HOME}/Music "
  DO_NOT_BUNDLE_FROM+="${HOME}/Pictures   ${HOME}/Public "
  DO_NOT_BUNDLE_FROM+="${HOME}/Templates  ${HOME}/Videos "

  
  # 1.2 If game.exe file is inside standard (DO_NOT_BUNDLE_FROM) directories
  # Tell user to copy to a separate gamedir then try to create bundle
  if [[ "${DO_NOT_BUNDLE_FROM}" == *"${EXE_PATH}"* ]]; then
     MSG1="Will not create bundle with ${EXE_PATH} as Game directory"
     MSG2="Copy/Move files to a different directory to create bundle!"

     echo "I: Script: Backup: Bundle: ${EXE_PATH}"
     echo "E: Script: Backup: Bundle: ${MSG1}"
     echo "E: Script: Backup: Bundle: ${MSG2}"
     echo "E: Backup: Cancelling Backup!"
     zenity --error --no-wrap --text "${MSG1}\n${MSG2}" \
      --title "Cannot Bundle ${EXE_PATH}"
     unset DO_NOT_BUNDLE_FROM
     Game_Function
  fi

  unset DO_NOT_BUNDLE_FROM

  # 2. Calculate Backup Size based on Gamedir whether it is in Prefix or not
  # If gamedir is inside prefixdir, total backup size will be prefix size
  if [[ "${EXE_FILE}" == *"${PREFIXDIR}"* ]] ; then
     echo "I: Script: Backup: Bundle: Game Directory inside Prefix!"
     # Do not include GAMEDIR separately when it is already inside prefix
     TOTAL_BACKUP_SIZE=${PREFIX_SIZE_IN_BYTES}
     TOTAL_BACKUP_SIZE_IN_HF=$(echo ${TOTAL_BACKUP_SIZE}|numfmt --to iec)
     # Show only Prefix size 
     unset TEXT
     # for zenity prompt
     TEXT+="${PREFIX_SIZE_IN_HF}"
  else
     # If gamedir is outside prefixdir, total size = prefix size + gamedir
     GAMEDIR_DISK_USAGE_IN_HF=$(du -sh "${EXE_PATH}")
     GAMEDIR_DU_IN_BYTES=$(echo ${GAMEDIR_DISK_USAGE_IN_HF}|cut -f1 -d " " \
      |numfmt --from iec)
     # Calculate total backup size = prefix + gamedir
     TOTAL_BACKUP_SIZE=$(expr ${PREFIX_SIZE_IN_BYTES} + $GAMEDIR_DU_IN_BYTES)
     TOTAL_BACKUP_SIZE_IN_HF=$(echo ${TOTAL_BACKUP_SIZE}|numfmt --to iec)

     # Show Prefix + Gamedir size
     unset TEXT
     # for zenity prompt
     TEXT+="${GAMEDIR_DISK_USAGE_IN_HF}\n"
     TEXT+="${PREFIX_SIZE_IN_HF}"
  fi


  echo "I: Script: Backup: Bundle: Prefix  Size:${PREFIX_SIZE_IN_HF}"
  echo "I: Script: Backup: Bundle: Gamedir Size:${GAMEDIR_DISK_USAGE_IN_HF}"
  echo "I: Script: Backup: Bundle: Bundle  Size:${TOTAL_BACKUP_SIZE_IN_HF}"


  # 3. Prepare Prefix Name
  # 3.1 Format filename for flatpak or system install type
  if [ "${INSTALL_TYPE}" = "flatpak" ]; then
    # If "flatpak-" is not part of flatpak name
    # like WineZGUI flatpak name: io.github.fastrizwaan.WineZGUI, add it
    if ! [[ "$SHORT_FLATPAK_NAME" == *"flatpak-"* ]]; then
    SHORT_FLATPAK_NAME="flatpak-${SHORT_FLATPAK_NAME}"
    fi
    unset FILENAME
    FILENAME+="${PREFIXNAME}-${APP_WITH_VER}"
    FILENAME+="-Game-Bundle-"
    FILENAME+="${SHORT_FLATPAK_NAME}"
    FILENAME+="-${DATE}"
    FILENAME+=".${BKP_EXT}"
  # Game-WineZGUI-0.87-Game-Bundle-wine-7.0-20220904_2359.wzt
  else # for system add wine-version
    unset FILENAME
    FILENAME+="${PREFIXNAME}-${APP_WITH_VER}"
    FILENAME+="-Game-Bundle-"
    FILENAME+="${WINEVER}"
    FILENAME+="-${DATE}"
    FILENAME+=".${BKP_EXT}"
  # Game-WineZGUI-0.87-Game-Bundle-wine-7.0-20220904_2359.wzt  
  fi
  
  echo "I: Script: Backup: Bundle: Filename Suggestion: ${FILENAME}"
  
  # For Zenity prompt 
  unset TITLE
  TITLE="Creating bundle for ${PREFIXNAME}"

  # 4. Ask file name for the prefix / bundle
  echo "I: Script: Backup: Bundle: Asking filename"
  BACKUP_FILE=$( zenity        \
          --title="${TITLE}"      \
          --width=700 --height=30    \
          --text="${TEXT}"     \
          --entry-text="${FILENAME}" \
          --entry)

  # Step 4.1: if backup file is empty / cancel clicked
  if [ -z "${BACKUP_FILE}" ]; then
    echo "I: Script: Backup: Bundle: Cancelled!"
    unset BACKUP_FILE
    unset FILENAME
    Game_Function
  fi

  # 5. Ask user to select backup target/destination directory
  echo "I: Script: Backup: Bundle: Select backup directory"
  unset TITLE
  TITLE="Choose Backup Directory for ${BACKUP_FILE}!"

  TARGET_DIR=$(zenity  --file-selection --title="${TITLE}" --directory)
  if [ -z "${TARGET_DIR}" ]; then
    echo "I: Script: Backup: Bundle: Select backup directory: Cancelled!"
    Game_Function
  fi

  # 5.1: Check if the target directory is writable or not?
  if [ ! -w "${TARGET_DIR}" ]; then
    echo "E: Script: Backup: Bundle: ${TARGET_DIR} not writable"
    zenity --error --no-wrap --title="Backup Error!" \
        --text "${TARGET_DIR} not writable\nAborting Backup!"
    Game_Function
  fi

  # Step 5.2 Required extension is .${BKP_EXT} i.e., .wzt, if not found add it
  echo "I: Script: Backup: Bundle: Given ${BACKUP_FILE}"

  if ! [[ "${BACKUP_FILE}" == *".${BKP_EXT}" ]]; then
        BACKUP_FILE="$(echo ${BACKUP_FILE}.${BKP_EXT})"
        echo "I: Script: Backup: Bundle: added suffix ${BKP_EXT}"
  fi

  echo "I: Script: Backup: Bundle: Using ${BACKUP_FILE}"

  # Step 5.3: Check for available disk space in target directory before backing up
  # to make sure that prefix size < target dir for backup to start

  # Step 5.4: Get available target dir partition's available space in
  # Human format (df -h)
  echo "I: Script: Backup: Bundle: Determining available space"
  AVAILABLE_SPACE=$(df -h "${TARGET_DIR}"|sed "s/  */ /g" \
                    |cut -f4 -d " "|tail -n1)
  echo "I: Script: Backup: Bundle: Available space is:" \
    "${AVAILABLE_SPACE}"

  # Step 5.5: Convert the above $AVAILABLE_SPACE into bytes
  # for comparison
  AVAILABLE_SPACE_IN_BYTES=$(echo ${AVAILABLE_SPACE}|numfmt --from iec)

  # Step 5.6: If Target directory does not have sufficient space, abort backup
  echo "I: Script: Backup: Bundle: Checking if size < target dir space"
  if [ ${AVAILABLE_SPACE_IN_BYTES} -gt ${TOTAL_BACKUP_SIZE} ];then
       echo -n "I: Script: Backup: Prefix: ${TARGET_DIR}"
       echo    "has enough available disk space"
  else
       echo -n "W: Script: Backup: Prefix: ${TARGET_DIR}"
       echo    "does not have free disk space!!!"
       unset MSG
       unset TITLE
       TITLE="Not Enough Disk Space!"
       MSG+="${TARGET_DIR} has only ${AVAILABLE_SPACE}"
       MSG+=" "
       MSG+="free disk space left!\n"
       MSG+="Prefix backup requires ${TOTAL_BACKUP_SIZE_IN_HF} free disk space."

       # Warn user
       zenity --warning --no-wrap --title "${TITLE}" --text "${MSG}"
       echo "E: Script: Backup: Bundle: Not Enough Disk Space, Cancelled!"
       Game_Function

  fi

  # 6. Ask for Compression Levels
  unset LEVEL
  LEVEL=$(zenity --scale --value 10 --min-value 1 --max-value 19 \
        --text "${FILENAME}" --title "Select Compression Level...")
  # Exit if Cancel is clicked
  if [ -z "${LEVEL}" ]; then
       echo "I: Script: Backup: Bundle: Cancel Selected!"
       Game_Function
  fi
  echo "I: Script Backup: Bundle: Compression Level ${LEVEL} Selected!"


  # 7. Create wzt = tar.zst file
  # 7.1 Change directory to WINEZPREFIX
  cd "${WINEZPREFIX}"
  echo "I: Script: Backup: Bundle: Processing ${EXE_NAME}"

  # tar would need these 2 variables to bundle gamedir into tar archive
  TAR_GAME_DIR_NAME=$(basename "${EXE_PATH}")
  TAR_GAME_DIR_PATH=$(dirname "${EXE_PATH}")
  echo "I: Script: Backup: Bundle: Gamedir at: ${TAR_GAME_DIR_PATH}"
  echo "I: Script: Backup: Bundle: Game Name : ${TAR_GAME_DIR_NAME}"

  # 7.2 Change EXE_FILE and EXE_PATH before bundling
  # Putting Game directory inside drive_c/bundled_game
  GAME_BUNDLED_DIR="drive_c/bundled_game/${TAR_GAME_DIR_NAME}"
  GAME_EXE_PATH="${PREFIXDIR}/${GAME_BUNDLED_DIR}"
  GAME_EXE_FILE="${GAME_EXE_PATH}/${EXE_NAME}"

  echo "I: Script: Backup: Bundle: Game Exe Path: ${GAME_EXE_PATH}"
  echo "I: Script: Backup: Bundle: Game Exe File: ${GAME_EXE_FILE}"

  # 7.3 Change EXE path and name in the script and txt file
  sed "s|${EXE_PATH}|${GAME_EXE_PATH}|g; t;" \
      -i ${PREFIXDIR}/*.txt   \
      -i ${PREFIXDIR}/*.sh && \
  echo "I: Script: Backup: Bundle: Game Exe Path Changed To: ${GAME_EXE_PATH}"

  sed "s|${EXE_FILE}|${GAME_EXE_FILE}|g; t;"  \
      -i ${PREFIXDIR}/*.txt   \
      -i ${PREFIXDIR}/*.sh && \
  echo "I: Script: Backup: Bundle: Game Exe File Changed To: ${GAME_EXE_FILE}"

  # 7.4 Preprocess
  echo "I: Script: Backup: Bundle: Preparing files"
  Backup_Restore_Function


  # 7.5 Create wzt-info.yml for restore prompt requied for restoring wzt file.
  source ${WINEZGUI_SCRIPTS}/winezgui-create-wzt-info

  # 7.6 Create Bundle
  echo "I: Script: Backup: Bundle: Game Name: ${TAR_GAME_DIR_NAME}"
  echo "I: Script: Backup: Bundle: Creating ${BACKUP_FILE} file..."
     
  # add wzt-info.yml 1st then the prefix directory to the wzt file
  (tar -I "zstd -${LEVEL} -T0" -cf  "${TARGET_DIR}/${BACKUP_FILE}" \
       -C "${PREFIX_DIR}"  "${WZT_INFO_FILE}"                      \
       -C "${WINEZPREFIX}" "${PREFIXNAME}"                         \
       -C "${TAR_GAME_DIR_PATH}" "./${TAR_GAME_DIR_NAME}"          \
  --transform \
          "s|^\./${TAR_GAME_DIR_NAME}|${PREFIXNAME}/${GAME_BUNDLED_DIR}|g" &)| \
  zenity  --progress --pulsate --auto-close \
          --title="Creating ${PREFIXNAME} Game Bundle...!" \
          --width=500 --text="${BACKUP_FILE}..."

  # 7.7 If user clicks cancel, kill tar commands
  # Handle Backup interruption
  # zenity progress won't kill the process, so we do it
  # find the pid of tar which is working with ${BACKUP_FILE}, else it will kill
  # other wzt file operation like extraction and backup
  PID_OF_TAR=$(ps -aux|grep tar|grep -i "${BACKUP_FILE}" \
                      |sed 's/  */ /g'|cut -f2 -d " ")
 
  # If there is a PID_OF_TAR then we need to kill the tar command
  if ! [ -z "$PID_OF_TAR" ]; then
       kill -9 ${PID_OF_TAR} \
       && echo "I: Script: Backup: Bundle: Cancelled! Killed tar!" \ &&
       rm -f "${TARGET_DIR}/${BACKUP_FILE}" && \
       echo "I: Script: Backup: Bundle: Removed partial ${BACKUP_FILE}"

       # Report Size also
       BACKUP_SIZE=$(du -sh "${TARGET_DIR}/${BACKUP_FILE}"|cut -f1)
       # Backup Sucess Message
       MSG=("${PREFIXNAME} backup cancelled!")

  else
       echo "I: Script: Backup: Bundle: ${BACKUP_FILE} created, success!"
       # Report Size also
       BACKUP_SIZE=$(du -sh "${TARGET_DIR}/${BACKUP_FILE}"|cut -f1)
       # Backup Sucess Message
       MSG=("<b>Prefix: </b> ${PREFIXNAME}\n")
       MSG+="<b>Filename:</b> ${BACKUP_FILE}"
       MSG+="\n<b>Location:</b> ${TARGET_DIR}\n"
       MSG+="<b>Backup Size:</b> ${BACKUP_SIZE}"

  fi

  # 7.7 Restore changed values after backup
  echo "I: Script: Backup: Bundle: Restoring Registry and Info files"
  Backup_Restore_Function "restore"

  # 7.8 Revert Change of EXE_FILE and EXE_PATH by Create Game Bundle Option
  # Change EXE path and name in the script and txt file for the bundle change
  sed "s|${GAME_EXE_PATH}|${EXE_PATH}|g; t;"  \
      -i ${PREFIXDIR}/*.txt   \
      -i ${PREFIXDIR}/*.sh && \
  echo "I: Script: Backup: Bundle: Reverted Game Exe Path to: ${EXE_PATH}"

  sed "s|${GAME_EXE_FILE}|${EXE_FILE}|g; t;"  \
      -i ${PREFIXDIR}/*.txt   \
      -i ${PREFIXDIR}/*.sh && \
  echo "I: Script: Backup: Bundle: Reverted Game Exe File to: ${EXE_FILE}"

  echo "I: Script: Backup: Bundle: Created ${BACKUP_FILE} at ${TARGET_DIR}" && \
  zenity --no-wrap --info --title="Game Bundle!" --text="${MSG[@]}"

}
