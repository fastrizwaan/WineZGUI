# winezgui-backup-template
WineZGUI_Template_Backup()
{
  HEADER="$(basename ${0}): ${FUNCNAME[0]}"
  echo "---------------------${FUNCNAME[0]}-------------------------"
  source "${DATADIR}/script-check-variables-loaded-or-not"
  Script_Check_Variables_Loaded_Or_Not
  DBUG "I: $(basename ${0}): Launched ${FUNCNAME[0]}"
  
  # 1.0 If No Template name is given, ask for template to backup
  if [ -z "${1}" ]; then
       source "${DATADIR}/winezgui-list-available-templates"
       List_Available_Templates # Get SELECTED_TEMPLATE
  else
       SELECTED_TEMPLATE="${TEMPLATE}"
  fi
  
  # 1.1 Need this to print name of template
  SELECTED_TEMPLATE_NAME=$(basename "${SELECTED_TEMPLATE}")

  DBUG "I: ${HEADER}: Template: ${SELECTED_TEMPLATE}"
  DBUG "I: ${HEADER}: Template Name: ${SELECTED_TEMPLATE_NAME}"
  
  
  # 2.0 Get disk usage of template
  DATE=$(date +'%Y%m%d')
  TEMPLATE_EXT="tar.zst"
  TEMPLATE_SIZE_IN_HF=$(du -sh "${SELECTED_TEMPLATE}"|sed "s/  */ /g" \
                       |cut -f1 -d " "| cut -f1 )
  TEMPLATE_SIZE_IN_BYTES=$(echo ${TEMPLATE_SIZE_IN_HF}|cut -f1 -d " " \
                          | numfmt --from iec)

  DBUG "I: ${HEADER}: DATE                  : ${DATE}"
  DBUG "I: ${HEADER}: TEMPLATE_EXT          : ${TEMPLATE_EXT}"
  DBUG "I: ${HEADER}: TEMPLATE_SIZE_IN_HF   : ${TEMPLATE_SIZE_IN_HF}"
  DBUG "I: ${HEADER}: TEMPLATE_SIZE_IN_BYTES: ${TEMPLATE_SIZE_IN_BYTES}"
  
  # 3.0 Set Total Backup size variable
  TOTAL_SIZE_IN_HF=${TEMPLATE_SIZE_IN_HF}
  TOTAL_SIZE_IN_BYTES=${TEMPLATE_SIZE_IN_BYTES}

  DBUG "I: ${HEADER}: TOTAL_SIZE_IN_BYTES   : ${TOTAL_SIZE_IN_BYTES}"
  DBUG "I: ${HEADER}: TOTAL_SIZE_IN_HF      : ${TOTAL_SIZE_IN_HF}"
  
  # 4.0 Prepare TEMPLATE Name
  # 4.1 Format filename for flatpak or system install type
  if [ "${INSTALL_TYPE}" = "flatpak" ]; then
       # If "flatpak-" is not part of flatpak name
       # like WineZGUI flatpak name: io.github.fastrizwaan.WineZGUI, add it
       if ! [[ "$SHORT_FLATPAK_NAME" == *"flatpak-"* ]]; then
            SHORT_FLATPAK_NAME="flatpak-${SHORT_FLATPAK_NAME}"
       fi
       unset FILENAME
       FILENAME+="template"
       FILENAME+="-${SELECTED_TEMPLATE_NAME}-"
       FILENAME+="${SHORT_FLATPAK_NAME}"
       FILENAME+="-${DATE}"
       FILENAME+=".${TEMPLATE_EXT}"
       # Flatpak: template-Template_Name-flatpak-wine7-20220904.tar.zst
  else # for system add wine-version
       unset FILENAME
       FILENAME+="template"
       FILENAME+="-${SELECTED_TEMPLATE_NAME}-"
       FILENAME+="${WINEVER}"
       FILENAME+="-${DATE}"
       FILENAME+=".${TEMPLATE_EXT}"
       # template-Template_Name-wine-7.0-20220904.tar.zst
  fi

  DBUG "I: ${HEADER}: Filename Suggestion: ${FILENAME}"

  # 5.0 Ask FILENAME using Zenity Entry dialog
  unset TITLE
  unset TEXT
  TITLE="Backup ${SELECTED_TEMPLATE_NAME} Template!"
  TEXT+="${TEMPLATE_SIZE_IN_HF} ${SELECTED_TEMPLATE}"

  # 5.1 Suggest and Ask for template file name
  DBUG "I: ${HEADER}: Asking filename"
  BACKUP_FILE=$( zenity                        \
                 --title="${TITLE}"            \
                 --width=700 --height=30       \
                 --text="${TEXT}"              \
                 --entry-text="${FILENAME}"    \
                 --entry)

  # 5.2: If user cancels or nothing
  if [ -z "${BACKUP_FILE}" ]; then
       DBUG "I: ${HEADER}: Cancelled!"
       unset BACKUP_FILE
       unset FILENAME
       return 1
  fi


  # Check if user entered symbols
  source "${DATADIR}/winezgui-check-entry-text"
  WineZGUI_Check_Entry_Text "${BACKUP_FILE}"
  
  ENTRY_CHECK=$?
  if [ ${ENTRY_CHECK} -eq 1 ]; then
       DBUG "I: Script: ${FUNCNAME[0]}: Symbols used in filename, cancelling!"
       return 1
  fi
  
  # 6.0 Ask user to select target backup directory
  DBUG "I: ${HEADER}: Choose Backup Directory..."
  unset TITLE
  TITLE="Choose Backup Directory for ${BACKUP_FILE}!"
  TARGET_DIR=$(zenity  --file-selection --title="${TITLE}" --directory)
  
  # 6.2: If user cancels or nothing
  if [ -z "${TARGET_DIR}" ]; then
       DBUG "I: ${HEADER}: Select backup directory: Cancelled!"
       return 1
  fi

  # 6.2: If the target directory is not writable, inform and return
  if [ $(touch "${TARGET_DIR}") ] && [ ! -w "${TARGET_DIR}" ]; then
       echo "E: ${HEADER}: ${TARGET_DIR} not writable"
       ${ZENITY_CMD} --error --no-wrap --title="Backup Error!" \
              --text "${TARGET_DIR} not writable\nAborting Backup!"
       return 1
  fi

  # 7.0 Process Backup file name
  
  DBUG "I: ${HEADER}: Given ${BACKUP_FILE}"
  # 7.1 Required extension is .tar.zst , if not found add it
  if ! [[ "${BACKUP_FILE}" == *".${TEMPLATE_EXT}" ]]; then
       BACKUP_FILE="$(echo ${BACKUP_FILE}.${TEMPLATE_EXT})"
       DBUG "I: ${HEADER}: added suffix ${TEMPLATE_EXT}"
  fi

  DBUG "I: ${HEADER}: Using ${BACKUP_FILE}"

  # 8.0 Check available disk space in target directory before backing up
  # to make sure that template size < target dir for backup to start
  DBUG "I: ${HEADER}: Determining available space at ${TARGET_DIR}"

  # 8.1: Get available target dir partition's available space in
  # Human format (df -h)
  AVAILABLE_SPACE=$(df -h "${TARGET_DIR}"|sed "s/  */ /g" \
                   |cut -f4 -d " "|tail -n1)
  # 8.2: Convert the above $AVAILABLE_SPACE into bytes for comparison
  AVAILABLE_SPACE_IN_BYTES=$(echo ${AVAILABLE_SPACE}| numfmt --from iec)
  #TEMPLATE_SIZE_IN_BYTES=$(echo ${TEMPLATE_SIZE_IN_HF}|cut -f1 -d " "| numfmt --from iec)

  DBUG "I: ${HEADER}: Available space in Human: ${AVAILABLE_SPACE}"
  DBUG "I: ${HEADER}: Available space in bytes: ${AVAILABLE_SPACE_IN_BYTES}"

  # 8.3: If Target directory does not have sufficient space, abort backup
  DBUG "I: ${HEADER}: Checking if size < target dir space"

  if [ ${AVAILABLE_SPACE_IN_BYTES} -gt ${TOTAL_SIZE_IN_BYTES} ]; then
       DBUG "I: ${HEADER}: ${TARGET_DIR} has ample disk space."
  else
       echo "E: ${HEADER}: Insufficient disk space at ${TARGET_DIR}!"
       unset MSG
       unset TITLE
       TITLE="Not Enough Disk Space!"
       MSG+="${TARGET_DIR} has only ${AVAILABLE_SPACE}"
       MSG+=" "
       MSG+="free disk space left!\n"
       MSG+="TEMPLATE backup requires ${TOTAL_SIZE_IN_HF} free disk space."

       # Warn user
       ${ZENITY_CMD} --warning --no-wrap --title "${TITLE}" --text "${MSG}"
       echo "E: ${HEADER}: Not Enough Disk Space, Cancelled!"
       return 1
  fi

  # 9. Ask for Compression Levels
  unset LEVEL
  LEVEL=$(${ZENITY_CMD} --scale --value 10 --min-value 1 --max-value 19 \
       --text "${BACKUP_FILE}" --title "Select Compression Level...")
  # 9.1 Return if Cancel is clicked
  if [ -z "${LEVEL}" ]; then
       DBUG "I: ${HEADER}: Cancel Selected!"
       return 1
  fi
  DBUG "I: ${HEADER}: Compression Level ${LEVEL} Selected!"

  # 10.0 Create template backup tar.zst file
  # 10.1 Change directory to TEMPLATES_DIR
  DBUG "I: ${HEADER}: Template: Preparing files"
  cd "${TEMPLATES_DIR}"
  # 10.2 Preprocess TEMPLATES_DIR files (remove user name from files)
  DBUG "I: ${HEADER}: Changing Directory to ${TEMPLATES_DIR}"
  DBUG "I: ${HEADER}: Launching: winezgui-identity-remove"
  
  source "${DATADIR}/winezgui-identity-remove"
  Winezgui_Identity_Remove "${SELECTED_TEMPLATE}"

  # 10.3 Create template-info.yml inside SELECTED_TEMPLATE, not needed though
  
  # 11.0 Create Template Backup file using tar and zst
  DBUG "I: ${HEADER}: Creating ${BACKUP_FILE} file..."
  DBUG "I: ${HEADER}: Executing command"
  DBUG "-------------------------------------------------------------"
  DBUG "${TAR_CMD} -I \"zstd -${LEVEL} -T0\" -cf \"${TARGET_DIR}/${BACKUP_FILE}\" \
            -C \"${TEMPLATES_DIR}\" \"${SELECTED_TEMPLATE_NAME}\""
  DBUG "-------------------------------------------------------------"
  # Report user the time it took to bundle
  TIMER_START=${SECONDS}
  # 11.1 Create Backup archive and restore changes as soon as tar is done
  (${TAR_CMD} -I "zstd -${LEVEL} -T0" -cf "${TARGET_DIR}/${BACKUP_FILE}"       \
                               -C  "${TEMPLATES_DIR}" "${SELECTED_TEMPLATE_NAME}" &)| \
  zenity    --progress --pulsate --auto-close        \
            --title="Creating ${SELECTED_TEMPLATE_NAME} backup!" \
            --width=500 --text="${BACKUP_FILE}..."
  TOOK=$(( SECONDS - ${TIMER_START} ))
  DBUG "I: ${HEADER}:Time Taken: $(date -d@${TOOK} -u +%H:%M:%S)"

  # 7.5 If user clicks cancel, kill tar commands
  # zenity progress won't kill the process, so we do it
  # find the pid of tar which is working with ${BACKUP_FILE}, else it will kill
  # other wzt file operation like extraction and backup
  PID_OF_TAR=$(ps -aux|grep tar|grep -i "${BACKUP_FILE}"           \
              |sed "/.*grep -i.*/d"|sed "s/  */ /g" |cut -f2 -d " ")
  
  # If there is a PID_OF_TAR then we need to kill the tar command
  if ! [ -z "${PID_OF_TAR}" ]; then
         kill -9 ${PID_OF_TAR} \
         && DBUG "I: Backup: Template: Cancelled! Killed tar!" \ &&
         rm -f "${TARGET_DIR}/${BACKUP_FILE}" && \
         DBUG "I: Backup: Template: Removed partial ${BACKUP_FILE}"

       # Backup Failure Message
       echo "===================================================="
       unset MSG
       MSG=("${SELECTED_TEMPLATE_NAME} backup cancelled!")
  else
       # If no pid is found, that means wzt=tar.zst is created successfully
       DBUG "I: Backup: Template: Created ${BACKUP_FILE}, Success!"
       # 7.6  Crate message
       BACKUP_SIZE=$(du -sh "${TARGET_DIR}/${BACKUP_FILE}"|cut -f1)
       # Backup Sucess Message
       unset MSG
       MSG=("<b>TEMPLATE: </b> ${SELECTED_TEMPLATE_NAME}\n")
       MSG+="<b>Filename:</b> ${BACKUP_FILE}"
       MSG+="\n<b>Location:</b> ${TARGET_DIR}\n"
       MSG+="<b>Backup Size:</b> ${BACKUP_SIZE}"

  fi

  # 7.7 Restore changed values after backup
  DBUG "I: Backup: Template: Restoring Registry and Info files"
  cd "${TEMPLATES_DIR}"
  source "${DATADIR}/winezgui-identity-restore"
  Winezgui_Identity_Restore "${SELECTED_TEMPLATE}"

  DBUG "I: Backup: Template: Created ${BACKUP_FILE} at ${TARGET_DIR}"

  # 8. Show info about created wzt file
  ${ZENITY_CMD} --no-wrap --info --title="TEMPLATE Backup!" --text="${MSG[@]}"
  return 0
}

  
