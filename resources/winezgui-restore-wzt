################ Restore/Extract .wzt backup/bundle ################
# .wzt file is a tar.zst (created using tar --zstd -cvf wztfile.wzt directory)
# see winezgui-script-backup
# For restoring we need "Prefix" name and Resore "Size" from wzt file
# Steps:
# 0.  Check if winezprefix is writable before restoring
# 1.  Extract prefix name and wzt-info.yml to tmp dir and put that in wzt_var
# 2.  Show Content of extracted wzt-info.yml file before restoring 
# 3.  Determine required disk space to extract the wzt file
# 4.  Restoring wzt file
# 5.  Preprocess backup values and variables in the extracted prefix
# 6.  Create Shortcut in applications directory
# 7.  Cleanup broken links in winezgui shortcuts directory
# 8.  Update desktop menus and Icon cache
# 9.  Get Game name from desktop file
# 10. Ask if the user wants to start the restored game
RESTORE_WZT_FILE()
{
  echo "I: Restore: Selected ${WZT_FILE}"
  cd "${WINEZPREFIX}"
 
  # 0. Check whether WINEZPREFIX is writable before restoring 
  if ! [ -w "${WINEZPREFIX}" ]; then
       echo "I: Restore: ${WINEZPREFIX} is not writable. Aborting!"
       zenity --error --title "${APP_WITH_VER}" \
              --text "${WINEZPREFIX} is not writable"
       Main_Function
  fi
  
  # wzt-info.yml has info about uncompressed size and game name
  WZT_INFO_FILE="wzt-info.yml"
  
  # Get basename of wztfile without path
  WZT_NAME=$(basename "${WZT_FILE}")
  
  # 1. Extract prefixname and wzt-info.yml file to tmp dir from wzt file

  # 1.1  Extract Prefix Name: Get the directory name from wzt file
  WZT_PREFIX=$(tar -tf "${WZT_FILE}"|head -n2|grep "/"|cut -f1 -d "/")
  echo "I: Restore: Prefix from ${WZT_FILE} is ${WZT_PREFIX}"
  
  # 1.2 Create a temporary directory to extract wzt-info.yml file
  export TEMPDIR="${WINEZPREFIX}/tmp"
  mkdir -p  ${TEMPDIR}
  
  # 1.3 Extract wzt-info.yml file to TEMPDIR; Show a progress bar using zenity 
  # Big szied (3GB+) wzt files takes long time to extract wzt-info.yml from them
  (tar --occurrence=1 --extract -O -f "${WZT_FILE}" ${WZT_INFO_FILE} \
  | tee ${TEMPDIR}/${WZT_INFO_FILE} &) | \
  (zenity --progress --pulsate --auto-close  \
         --title="${APP_WITH_VER} - Restore... Please wait." \
         --width=500 --text="Getting info from\n${WZT_NAME}")

  # Zenity on Cancel sends 1 and 0 on OK
  ZENITY_STATUS=$?
  
  # 1.4 If the user cancels extracting wzt-info.yml using tar xfO 
  # kill tar running in background
  # If zenity returns 1 (means either cancel or other error with tar xfO)
  if [ "${ZENITY_STATUS}" = "1" ]; then
       # Find the PID and kill the running tar command which has wzt in it
       unset PID_OF_TAR 
       PID_OF_TAR=$(ps -aux|grep tar|grep -i wzt|sed 's/  */ /g'|cut -f2 -d " ")
       if ! [ -z "$PID_OF_TAR" ]; then # if pid is found kill it
            kill -9 ${PID_OF_TAR} \
            && echo "I: Restore: Getting Info Cancelled!" 
            Main_Function
       fi
  else
       echo "I: Restore: Read ${WZT_NAME} Successfully!"
  fi
  

  # 1.5 Read the wztfile contents into a variable 
  WZT_VAR=$(cat "${TEMPDIR}/${WZT_INFO_FILE}"|tr "\n" "|")
  
  # 1.6 If the WZT_VAR is empty, then WZT_VAR could not read from wzt-info.yml
  if [ -z "${WZT_VAR}" ]; then
       echo "I: Restore: ${WZT_INFO_FILE} not found in tar archive"
       zenity --info    --title "${WZT_NAME}" \
              --no-wrap --text "${WZT_INFO_FILE} not found"
       Main_Function
  fi

  # 2. Show Content of extracted wzt-info.yml file before restoring
  # 2.1 Get Game/App name from the wzt-info.yml file
  GAME_NAME=$(echo ${WZT_VAR}|sed "s/|/\n/g"|grep -E "Name*:"|cut -f2 -d ":")
  echo "I: Restore: Name: ${GAME_NAME}"

  # 2.1 format the wzt-info.yml content for display using zenity
  TEXT_MSG="$(cat ${TEMPDIR}/${WZT_INFO_FILE} | \
           sed "s/:/ ,:, /g"|column -t -s "," | \
           sed -E "s/^(.*:)/<tt><b>\1<\/b><\/tt>/g" | \
           sed -E "s/^(.*)$/ \1/g")"
  # 2.2 Show message
  zenity --question --no-wrap \
         --title "Restore ${GAME_NAME}?" --text "${TEXT_MSG}"
  ANSWER=$?  
  
  # 2.3 if User selects cancel / no
  if [ "$ANSWER" = "1" ]; then
       echo "I: Restore: Restoring WineZGUI file. Cancelled!"
       Main_Function
  fi
                
  # 2.4 Remove ${TEMPDIR} after getting data into WZT_VAR variable
  rm -rf ${TEMPDIR}

  # 3. Determine required disk space to extract the wzt file
  echo "I: Restore: Determining available space for extraction"
  
  # 3.1 Determine available disk space (df -h) of $HOME / winezgui prefix
  WINEZPREFIX_DF=$(df -h ${WINEZPREFIX}|sed "s/  */ /g"|cut -f4 -d " "|tail -n1)
  echo "I: Restore: Available space is: ${WINEZPREFIX_DF}"

  # 3.2 Convert the above $WINEZPREFIX_DF into bytes for comparison
  WINEZPREFIX_DF_IN_BYTES=$(echo ${WINEZPREFIX_DF}|numfmt --from iec)

  # 3.3 Fetch required disk space from wzt variable 
  echo "I: Restore: Fetching required disk space from ${WZT_INFO_FILE}"
  WZT_F_UNCOMPRESSED_SIZE=$(echo ${WZT_VAR}|sed "s/|/\n/g"|grep "Size" \
                           |cut -f2 -d ":"|numfmt --from iec)
  echo "I: Restore: Required space: ${WZT_F_UNCOMPRESSED_SIZE}"
  
  # 3.4 If Target directory does not have sufficient space, abort backup
  echo "I: Restore: Checking Available size is more than Required space"
  if [ ${WINEZPREFIX_DF_IN_BYTES} -gt ${WZT_F_UNCOMPRESSED_SIZE} ];then
       echo "I: Restore: ${WINEZPREFIX} has enough available disk space!"
  else
       echo "W: Restore: ${WINEZPREFIX} does not have free disk space!!!"
       unset MSG
       MSG+="${WINEZPREFIX} has only ${WINEZPREFIX_DF}"
       MSG+=" "
       MSG+="free disk space left!\n"0
       MSG+="Prefix backup requires ${WZT_F_UNCOMPRESSED_SIZE} free disk space."

       # 3.4.1 Inform user on insufficient disk space
       zenity --warning --no-wrap --title "Insufficient Disk Space!" \
              --text "${MSG}"
       echo "E: Restore: Insufficient Disk Space, Cancelled!"
       Main_Function

  fi

  # 4. Restoring wzt file
  echo "I: Restore: Restoring ${WZT_NAME}"
  
  # 4.1 Check: Existing prefix with the same name!?
  if [ -d "${WINEZPREFIX}/${WZT_PREFIX}" ]; then
       # If yes, ask whether to overwrite existing prefix
       zenity --question --title "Restore ${GAME_NAME}" \
              --text "${WZT_PREFIX} already exists, overwrite?"
       ANSWER=$?       
       if [ "${ANSWER}" = "1" ]; then
            echo "I: Restore: User Cancelled Overwriting! Aborting!"
            Main_Function
       else
            echo "I: Restore: Overwriting existing ${WZT_NAME}"
       fi
  fi

  # 4.2 Extract file to WineZGUI Prefix and show gui progress dialog
  # Change directory name XOUSERXO to username on restore
  echo "I: Restore: Extracting ${WZT_NAME} at ${WINEZPREFIX}"
  (tar --zstd -xvf "${WZT_FILE}" -C "${WINEZPREFIX}" --transform \
           "s|XOUSERXO|${USER}|g" &)| \
  (zenity --progress --width=500                    \
          --title="Restoring ${GAME_NAME}!"         \
          --text="Extracting ${WZT_FILE}..."        \
          --pulsate --auto-close)
  

  ZENITY_STATUS=$?

  # 4.2.1 If user cancels extraction,  zenity will return 1
  if [ "${ZENITY_STATUS}" = "1" ]; then
       # If the user cancels extraction of wzt game bundle during extraction
       # kill the running tar command which has wzt in it
       unset PID_OF_TAR 
       PID_OF_TAR=$(ps -aux|grep tar|grep -i wzt|sed 's/  */ /g'|cut -f2 -d " ")
       if ! [ -z "$PID_OF_TAR" ]; then
            kill -9 ${PID_OF_TAR} \
            && echo "I: Restore: Cancelled! Stopped extraction!" 
            # Ask the user whether to delete partially extracted or let it be
            zenity --question --title "Extraction Cancelled!" \
                   --text "Delete ${WZT_PREFIX} prefix?"
            ANSWER=$?
            if [ "${ANSWER}" = "0" ]; then
                 # User selected Delete
                 rm -rf "${WINEZPREFIX}/${WZT_PREFIX}" && \
                 echo "I: Restore: Removed ${WINEZPREFIX}/${WZT_PREFIX}"
                 # Cleanup broken links in winezgui shortcuts directory
                 find ${DESKTOPDIR} -maxdepth 1 -xtype l -delete && \
                 echo "I: Restore: Removed broken WineZGUI .desktop links"
            else
                 # user wants to keep prefix 
                 echo "I: Restore: Keeping extracted ${WINEZPREFIX}/${WZT_PREFIX}"
                 # Restore Sucess Message
            fi
            MSG=("${WZT_PREFIX} Restore Cancelled!")
            Main_Function

       else
            # If no pid of tar is found means extraction already completed
            echo "I: Restore: Restored ${WZT_FILE} Successfully!"
       fi # if ! [ -z "$PID_OF_TAR" ]; then
  fi # [ "${ZENITY_STATUS}" = "1" ]; then


  # 5. Preprocess backup values and variables in the extracted prefix
  cd "${WINEZPREFIX}"
  PREFIXNAME="${WZT_PREFIX}"
  Backup_Restore_Function "restore"

  # 6. Create Shortcut in applications directory
  # 6.1 Create required applications directory for .desktop files
  if [ "${INSTALL_TYPE}" = "flatpak" ]; then
       MAKEDIR=("/home/${USER}/.local/share/applications/")
       MAKEDIR+="winezgui/${FLATPAK_ID}"
       mkdir -p "${MAKEDIR}"
       unset MAKEDIR
  else
       MAKEDIR=("/home/${USER}/.local/share/applications/")
       MAKEDIR+="winezgui"
       mkdir -p "${MAKEDIR}"
  fi

  # Since we are using a default prefix without shortcut and script file
  # Game prefixes will have game.desktop game.sh and game.png files in it.
  # If .desktop file is found, means, it is a non default backup
  FOUND_PREFIX_DIR="${WINEZPREFIX}/${WZT_PREFIX}"
  FOUND_DESKTOP_FILE="${FOUND_PREFIX_DIR}/${WZT_PREFIX}.desktop"
  FOUND_SCRIPT_FILE="${FOUND_PREFIX_DIR}/${WZT_PREFIX}.sh"
  
  # 6.2 If .desktop file is found inside extracted prefix, then create shortcut
  if [ -f "${FOUND_DESKTOP_FILE}" ]; then
       echo "I: Restore: Found ${FOUND_DESKTOP_FILE}," \
            "creating shortcut!"
       # Create a restored.text to update wineprefix
       # without mono and gecko install dialog which
       # winezgui-create-prefix checks on different versions of wine
       # on 1st lauch on restoring
       # we'll use restored.txt to launch wineboot with DLLoverrides 
       echo "yes" > ${FOUND_PREFIX_DIR}/restored.txt

       # link the application shortcut .desktop file
       ln -sf ${FOUND_DESKTOP_FILE} ${DESKTOPDIR}

       # 7. Cleanup broken links in winezgui shortcuts directory
       find ${DESKTOPDIR} -maxdepth 1 -xtype l -delete && \
       echo "I: Restore: Removed broken WineZGUI .desktop links"

       # 8. Update desktop menus and Icon cache
       ${UPDATE_ICON_CACHE}
       ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}
       ${UPDATE_DESKTOP_DATABASE} ${DESKTOPDIR}

       # 9. Get Game name from desktop file
       GN="$(grep -i Name ${FOUND_DESKTOP_FILE}|cut -f2 -d "=")"
       echo "I: Restore: Game Name: $GN"

       # 10. Ask if the user wants to start the restored game
       if zenity --question --no-wrap --width=200    \
                 --title="WineZGUI Backup Restored!" \
                 --text="Launch: ${GN}?"
       then
            # Start the Game script and exit main app
            echo "I: Restore: Launching Script for" \
                 "the restored game..."
            bash ${FOUND_SCRIPT_FILE}
            exit 0
       fi # zenity --question
  fi # -f "${FOUND_DESKTOP_FILE}"
}
