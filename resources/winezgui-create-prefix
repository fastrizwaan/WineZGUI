#!/usr/bin/env bash
# ============================================================================ #
# winez-create-prefix (C) GPL3 Mohammed Asif Ali Rizvan <fast.rizwaan@gmail.com>
# URL: https://github.com/fastrizwaan/WineZGUI
# Creates Application shortcut when called from winezgui.
# ============================================================================ #

echo "I: Create Prefix: Starting WineZGUI Create Script ($0)"

# Exit if no arguments are provided
if [ -z "${1}" ]; then
     echo "I: Create Prefix: No Arguments... bye";
fi


export APPNAME=WineZGUI
export WINEVER="$(wine --version|cut -f1 -d " ")"
export APPLICATIONSDIR="$(realpath -m ~/.local/share/applications)"
export UPDATE_ICON_CACHE="gtk-update-icon-cache -f --ignore-theme-index \
                          ~/.local/share/icons 2>/dev/null"
export UPDATE_DESKTOP_DATABASE="update-desktop-database"
export WINE_CMD="$(which wine)"
export WINEEXE=${WINE_CMD}
export WTRICKS_CMD=$(which winetricks)
export TEMPDIR="${WINEZPREFIX}/tmp"
export EXIFTOOL=$(which exiftool)

# These values will be assigned by Setup using sed command
# Post install ${PREFIX}/bin/winezgui-create-prefix file will be different
export APPVERSION="git"
export APP_WITH_VER="${APPNAME}-${APPVERSION}"
export INSTALL_TYPE="system"
export WINEZPREFIX="$(realpath -m ~/.local/share/winezgui)"
export FLATPAK_NAME="io.github.WineZGUI"

export DATADIR=/usr/share/winezgui    # /usr will be replaced by prefix

# Where to install .desktop shortcuts?
# for system install (./setup -i) use ~/.local/share/applications/winezgui
if [ "${INSTALL_TYPE}" = "system" ]; then
    export DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui)"
else
    # for flatpak create subdirectory with flatpakname
    export DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui/${FLATPAK_NAME})"
fi

# winezgui backup file extension
export BKP_EXT="wzt"

echo "I: Create Prefix: Checking if an exe file is provided"
EXE_FILE=$(realpath -m "$1")
EXE_NAME=$(basename "${EXE_FILE}")
EXE_PATH=$(dirname  "${EXE_FILE}")
EXE_NOSP=$(echo ${EXE_NAME}|tr " " "_");
EXE_NOEXE=$(echo ${EXE_NOSP}|sed "s/\.[Ee][Xx][Ee]//"|sed "s/\.[Mm][Ss][Ii]//")
EXE_EXT="${EXE_FILE##*.}"
export PREFIXDIR="${WINEZPREFIX}/${EXE_NOEXE}"
export PREFIXNAME="${EXE_NOEXE}"
export WINEZGUI_SCRIPTS="${PREFIXDIR}/winezgui-scripts"
# Files
export INFOFILE="${PREFIXDIR}/Info.yml"
export ICONFILE="${PREFIXDIR}/${EXE_NOEXE}.png"
export SCRIPTFILE="${PREFIXDIR}/${EXE_NOEXE}.sh"
export DESKTOPFILE="${PREFIXDIR}/${EXE_NOEXE}.desktop"

ICON="${ICONFILE}"

# If argument is not an exe file, then quit
# Make it small case to compare
EXTENSION="$(echo ${EXE_EXT}|tr A-Z a-z)"
EXE="exe"
MSI="msi"


# If exe or msi file is not given, we can't create script for other files
if [ "${EXTENSION}" != "${EXE}" ] && [ "${EXTENSION}" != "${MSI}" ]; then
     echo "E: Create Prefix: \"${EXE_NAME}\" is not an ${EXE} or ${MSI} file"
     echo "I: Create Prefix: Please, give an ${EXE} or ${MSI} file as argument"
     echo "I: Usage: ${0} path/to/app.exe "
     exit 1
fi

# Clear variables
unset EXTENSION
unset EXE
unset MSI

# Start processing submitted exe file
echo "I: Create Prefix: Preparing prefix for exe file"

# We are switching to Template based system, where user can install all 
# winetricks verbs and save as a template. default will be the link to using
# Template.

TEMPLATE_IN_USE="$(realpath -m ${DEFAULT})"
TEMPLATE_NAME="$(basename $(realpath -m ${DEFAULT}))"
# Copy the Default Prefix linked wine to avoid showing dialog
if [ ! -d "${PREFIXDIR}" ]; then
   echo "${PREFIXDIR} not found, copying..."
   cp -rvf "${WINEZPREFIX}/default/" "${PREFIXDIR}"
fi

# Create required directories
mkdir -p  "${PREFIXDIR}" && \
echo "I: Create Prefix: Created directory ${PREFIXDIR}"

mkdir -p  "${DESKTOPDIR}" && \
echo "I: Create Prefix: Created directory ${DESKTOPDIR}"

# Extract icon and convert it to several png files of diferent quality,
# Create a temporary Directory to extract icon from the exe file
echo "I: Create Prefix: Icon: Extraction from ${EXE_NAME}"
mkdir -p ${TEMPDIR} && \
echo "I: Create Prefix: Icon: Created directory ${TEMPDIR}"
cd ${TEMPDIR}

# wrestool extracts ico file from EXE
wrestool -x -t 14 "${EXE_FILE}" > "${TEMPDIR}/${EXE_NOEXE}.ico" 2> /dev/null && \
echo "I: Create Prefix: Icon: Wrestool executed"

# Only try to extract Icon when Icon is Found in the EXE
# icotool extracts all png files from ico files
# Select and copy the best png image file by sorting using ls -S1.
icotool -x "${TEMPDIR}/${EXE_NOEXE}.ico" 2>/dev/null && \
echo "I: Create Prefix: Icon: Icotool: Extracting png files from" \
     "${EXE_NOEXE}.ico" && \
cp $(ls -S -1 ${TEMPDIR}/${EXE_NOEXE}*.png  | head -n 1) ${ICON} && \
echo "I: Create Prefix: Icon: Copied successfully..." && WARN="false"

# If icon could not be copied, warn the user
if [ "${WARN}" != "false" ]; then
     echo "I: Create Prefix: Icon could not be copied..." \
          "use \"Change Icon...\" option"
fi

# Cleanup tempdir and clear variable
unset WARN

#remove tmp directory after copying icon png
rm -rf "${TEMPDIR}" && \
echo "I: Create Prefix: Icon: Cleanup ${TEMPDIR}"



# Prepare Desktop file
appCategory="Game"
echo "I: Create Prefix: Setting Category - ${appCategory}"

# Create Desktop Shortcut
# Ask for Name
#PROGNAME=$(zenity --title "Create-Desktop-Shortcut" --text "Enter a name or Click OK to use ${EXE_NOEXE} name" --entry)

echo "I: Create Prefix: Name: Program Name Detection from exe file"
# Automatically set name, read from pe file, if not found use exe name
PRODUCT=$(${EXIFTOOL} "${EXE_FILE}"|grep -i "product name"|cut -f2 -d ":" \
                                                          |sed "s/^ //")
# if language is not english inside exe name, or product is "", use exe name
if [ $(echo ${PRODUCT} | grep -aEv [a-zA-Z] ) ] || [ -z "${PRODUCT}" ]; then
     unset PRODUCT
     unset PROGNAME
     PROGNAME=$(echo "${EXE_NAME} (${APP_WITH_VER})"|sed "s/\.[mM][Ss][Ii]//g"\
                                                    |sed "s/\.[eE][Xx][Ee]//g");
     echo "I: Create Prefix: Name: Product Name not found, using exe name"
else
     PROGNAME=$(echo "${PRODUCT} (${APP_WITH_VER})");
     echo "I: Create Prefix: Name: Product Name found: \"${PRODUCT}\""
fi


# Generate Sha256sum for the exefile
SHA256SUM=$(sha256sum "${EXE_FILE}"|cut -f1 -d " ")
echo "I: Create Prefix: Sha256sum: ${SHA256SUM}"

# Create Launch Script for the provided EXE file
# ------------------------------------------------
# Launch script needs
echo "I: Create Prefix: Script: Launch Script Creation..."
echo "I: Create Prefix: Script: Copying required script modules"
unset SCRIPT_MODULES
SCRIPT_MODULES+="winezgui-script-launch "
SCRIPT_MODULES+="winezgui-script-open-other-exe "
SCRIPT_MODULES+="winezgui-script-winetricks-gui "
SCRIPT_MODULES+="winezgui-script-winetricks-cli "
SCRIPT_MODULES+="winezgui-script-launch-winecfg "
SCRIPT_MODULES+="winezgui-script-open-explorer "
SCRIPT_MODULES+="winezgui-script-open-shell "
SCRIPT_MODULES+="winezgui-script-rename "
SCRIPT_MODULES+="winezgui-script-change-icon "
SCRIPT_MODULES+="winezgui-script-change-category "
SCRIPT_MODULES+="winezgui-script-backup "
SCRIPT_MODULES+="winezgui-script-delete "
SCRIPT_MODULES+="winezgui-script-about "
SCRIPT_MODULES+="winezgui-backup-restore-function "
SCRIPT_MODULES+="winezgui-script-locate-exe-function "
SCRIPT_MODULES+="winezgui-create-wzt-info "
SCRIPT_MODULES+="winezgui-rename-name "
SCRIPT_MODULES+="winezgui-rename-prefix "
SCRIPT_MODULES+="winezgui-script-change-exe "
SCRIPT_MODULES+="winezgui-change-installed-exe "
SCRIPT_MODULES+="winezgui-change-any-other-exe "
SCRIPT_MODULES+="winezgui-change-exe-variables-in-files "
SCRIPT_MODULES+="winezgui-script-backup-prefix "
SCRIPT_MODULES+="winezgui-script-backup-bundle "
SCRIPT_MODULES+="winezgui-script-find-installed-exe "
SCRIPT_MODULES+="winezgui-script-remove-wine-created-shortcuts "
SCRIPT_MODULES+="winezgui-create-change-prefix-file "

# Check PREFIXDIR is writable or not
if ! [ -w "${PREFIXDIR}" ] ; then
       echo "E: Create Prefix: Script: Cannot write to ${PREFIXDIR}"
       echo "W: Create Prefix: Script: Aborting!"
       exit 1
fi

#Create scripts directory inside prefixdir
mkdir -p "${WINEZGUI_SCRIPTS}"

# copy the scripts from datadir to winezgui-scripts directory inside prefixdir
for SCRIPT in ${SCRIPT_MODULES}; do

    cp "${DATADIR}/${SCRIPT}" "${WINEZGUI_SCRIPTS}" && \
    echo  "I: Create Prefix: Script: Copied ${SCRIPT} to ${PREFIXDIR}"

done

# Clean up variables
unset SCRIPT_MODULES
unset SCRIPT

# need variables from this script
echo "
#!/bin/bash
export APPNAME=\"${APPNAME}\"
export FLATPAK_NAME=\"${FLATPAK_NAME}\"
export APPVERSION=\"${APPVERSION}\"
export APP_WITH_VER=\"${APPNAME}-${APPVERSION}\"
export WINEVER=\"${WINEVER}\"
export PROGNAME=\"${PROGNAME}\"
export INSTALL_TYPE=\"\"${INSTALL_TYPE}\"\"
export WINEZPREFIX=\"${WINEZPREFIX}\"
export PREFIXNAME=\"${EXE_NOEXE}\"
export EXE_FILE=\"${EXE_FILE}\"
export EXE_NAME=\"${EXE_NAME}\"
export SHA256SUM=\"${SHA256SUM}\"
export EXE_PATH=\"${EXE_PATH}\"
export EXE_NOSP=\"${EXE_NOSP}\"
export EXE_NOEXE=\"${EXE_NOEXE}\"
export EXE_EXT=\"${EXE_FILE##*.}\"
export PREFIXDIR=\"${PREFIXDIR}\"
export WINEPREFIX=\"${PREFIXDIR}\"
export APPLICATIONSDIR=\"${APPLICATIONSDIR}\"
export WINEZGUI_SCRIPTS=\"${WINEZGUI_SCRIPTS}\"

export DESKTOPDIR=\"${DESKTOPDIR}\"
export UPDATE_DESKTOP_DATABASE=\"${UPDATE_DESKTOP_DATABASE}\"
export EXIFTOOL=\"\$(which exiftool)\"
# winezgui backup file extension
export BKP_EXT=\"${BKP_EXT}\"

# Files
export INFOFILE=\"${PREFIXDIR}/Info.yml\"
export ICONFILE=\"${PREFIXDIR}/${EXE_NOEXE}.png\"
export SCRIPTFILE=\"${PREFIXDIR}/${EXE_NOEXE}.sh\"
export DESKTOPFILE=\"${PREFIXDIR}/${EXE_NOEXE}.desktop\"

# if icon is found grep it
if [ -f \"${ICONFILE}\" ]; then
     export ICON=\"\$(grep Icon \${DESKTOPFILE}|cut -f2 -d \"=\")\"
else
     export ICON="null"
fi
" > "${SCRIPTFILE}"

# Append rest
echo '
export WINEARCH=win64
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/app/lib:/app/lib32:/app/lib64
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/app/lib/i386-linux-gnu:/app/lib/wine
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/app/lib64/wine:/app/${NAME}:$(pwd)
export DESKTOP_FILE_EDIT=$(which desktop-file-edit)

source ${WINEZGUI_SCRIPTS}/winezgui-script-locate-exe-function
# LOCATE_EXE_FUNCTION required on Launch


    # If ${FLATPAK_NAME} is installed, and script created using flatpak
    if [ ${INSTALL_TYPE} = "flatpak" ] && \
       [ $(flatpak --command=echo run ${FLATPAK_NAME} 0 2>/dev/null) ]; then
         echo "I: Script: Install type: Flatpak, Running from host!"
         WINE_CMD="flatpak run --command=wine ${FLATPAK_NAME}"
         WTRICKS_CMD="flatpak run --command=winetricks ${FLATPAK_NAME}"
         WINECFG_CMD="flatpak run --command=wine ${FLATPAK_NAME} winecfg"
         WEXPLORER_CMD="flatpak run --command=wine ${FLATPAK_NAME} explorer"
         WBOOT_CMD="flatpak --command=wineboot run ${FLATPAK_NAME} -i"
         WHICHWINE="$(flatpak --command=which run ${FLATPAK_NAME} wine)"
         export WINE_CMD WTRICKS_CMD WINECFG_CMD WEXPLORER_CMD WBOOT_CMD
         export WHICHWINE

    else
        # flatpak install and running from shell inside flatpak winezgui
        if [ "${INSTALL_TYPE}" = "flatpak" ]; then
             echo "I: Script: Install type: Flatpak, Running from flatpak!"
             export WINE_CMD="/app/bin/wine"
             export WTRICKS_CMD="/app/bin/winetricks"
             export WINECFG_CMD="${WINE_CMD} winecfg"
             export WEXPLORER_CMD="${WINE_CMD} explorer"
             export WBOOT_CMD="$(which wineboot) -i"
             export WHICHWINE="${WINE_CMD}"
        else
             # We are using non flatpak install
             echo "I: Script: Install type: System, Running from host!"
             export WINE_CMD="$(which wine)"
             export WTRICKS_CMD="$(which winetricks)"
             export WINECFG_CMD="${WINE_CMD} winecfg"
             export WEXPLORER_CMD="${WINE_CMD} explorer"
             export WBOOT_CMD="$(which wineboot) -i"
             export WHICHWINE="$(which wine)"
        fi
    fi

# Needed for Info.yml and backup and restore function
export WINEEXE=${WINE_CMD}


Game_Function ()
{
unset SELECTION
# EXE handling by providing dialog

SELECTION=$(zenity --title       "${PROGNAME}"        \
                   --window-icon="${ICON}"            \
                   --width=360 --height=450           \
                   --list      --hide-header          \
                   --radiolist --column " "           \
                   --column "Action"                  \
                     TRUE   "Launch..."               \
                     0      "Open Other EXE..."       \
                     0      "Winetricks GUI..."       \
                     0      "Winetricks CLI..."       \
                     0      "Launch Winecfg..."       \
                     0      "Open Explorer..."        \
                     0      "Open Shell..."           \
                     0      "Rename..."               \
                     0      "Change Exe..."           \
                     0      "Change Icon..."          \
                     0      "Change Category..."      \
                     0      "Backup..."               \
                     0      "Delete..."               \
                     0      "About..."                \
                 --text     "Select action for <b>${EXE_NAME}</b>..." )

# Exit if Cancel is clicked
if [ -z "${SELECTION}" ]; then
     echo "I: Script: Cancel Selected. Bye!"
     exit 0
fi

if   [ "${SELECTION}" = "Launch..." ]; then
       echo "I: Script: Launch... Selected"
       source ${WINEZGUI_SCRIPTS}/winezgui-script-launch
       # Return to Game window
       Game_Function

elif [ "${SELECTION}" = "Open Other EXE..." ]; then
       echo "I: Script: Open Other EXE... Selected!"
       source ${WINEZGUI_SCRIPTS}/winezgui-script-open-other-exe
       # Return to Game window
       Game_Function


       # If Winetricks GUI is selected
elif [ "${SELECTION}" = "Winetricks GUI..." ]; then
       echo "I: Script: Winetricks GUI... Selected!"
       source ${WINEZGUI_SCRIPTS}/winezgui-script-winetricks-gui
       # Return to Game window
       Game_Function

     # Provide Command Line to enter multiple Dependencies
elif [ "${SELECTION}" = "Winetricks CLI..." ]; then
       echo "I: Script: Winetricks CLI... Selected!"
       source ${WINEZGUI_SCRIPTS}/winezgui-script-winetricks-cli
       # Return to Game window
       Game_Function

elif [ "${SELECTION}" = "Launch Winecfg..." ]; then
       echo "I: Script: Launch Winecfg... Selected!"
       source ${WINEZGUI_SCRIPTS}/winezgui-script-launch-winecfg
       # Return to Game window
       Game_Function

elif [ "${SELECTION}" = "Open Explorer..." ]; then
       echo "I: Script: Open Explorer... Selected!"
       source ${WINEZGUI_SCRIPTS}/winezgui-script-open-explorer

       # Return to Game window
       Game_Function

elif [ "${SELECTION}" = "Open Shell..." ]; then
       echo "I: Script: Open Shell... Selected!"
       source ${WINEZGUI_SCRIPTS}/winezgui-script-open-shell
       # Return to Game window
       Game_Function

elif [ "${SELECTION}" = "Rename..." ]; then

       source ${WINEZGUI_SCRIPTS}/winezgui-rename-name
       source ${WINEZGUI_SCRIPTS}/winezgui-rename-prefix
       source ${WINEZGUI_SCRIPTS}/winezgui-script-rename
       
       RENAME_FUNCTION # Call the function in the above file

       Game_Function

elif [ "${SELECTION}" = "Change Exe..." ]; then

       source ${WINEZGUI_SCRIPTS}/winezgui-script-change-exe
       source ${WINEZGUI_SCRIPTS}/winezgui-change-installed-exe
       source ${WINEZGUI_SCRIPTS}/winezgui-change-any-other-exe
       source ${WINEZGUI_SCRIPTS}/winezgui-change-exe-variables-in-files
       CHANGE_EXE_FUNCTION # Call the function in the above file

       Game_Function

elif [ "${SELECTION}" = "Change Icon..." ]; then
       echo "I: Script: Change Icon... Selected!"
       source ${WINEZGUI_SCRIPTS}/winezgui-script-change-icon
       CHANGE_ICON
       # Return to Game window
       Game_Function

elif [ "${SELECTION}" = "Change Category..." ]; then
       echo "I: Script: Change Category... Selected!"
       source ${WINEZGUI_SCRIPTS}/winezgui-script-change-category
       Game_Function

  # Ask user to where to save the backup
elif [ "${SELECTION}" = "Backup..." ]; then
       echo "I: Script: Backup... Selected!"
       # source ~/.build/WineZGUI-0.84/script-backup-function
       source ${WINEZGUI_SCRIPTS}/winezgui-script-backup-bundle
       source ${WINEZGUI_SCRIPTS}/winezgui-script-backup-prefix
       source ${WINEZGUI_SCRIPTS}/winezgui-script-backup
       WINEZGUI-SCRIPT-BACKUP-FUNCTION

       
       # Return to Game window after backup or target directory write error
       Game_Function

elif [ "${SELECTION}" = "Delete..." ]; then
       echo "I: Script: Delete... Selected!"
       source ${WINEZGUI_SCRIPTS}/winezgui-script-delete

elif [ "${SELECTION}" = "About..." ]; then
       echo "I: Script: Executing About... Selected!"
       source ${WINEZGUI_SCRIPTS}/winezgui-script-about
       Game_Function


fi
}

# Change Prefix on changing EXE
if [ -f "${PREFIXDIR}/Change-Prefix-Name" ]; then
     echo "=========================================="  
     echo "I: Script: Change Prefix Requested..."
     PREFIX_NAME_TO_CHANGE="$(grep Prefix "${PREFIXDIR}/Change-Prefix-Name" \
                             |cut -f2 -d ":")"
     echo "=========================================="  
     echo "I: Script: Launching winezgui-rename-prefix function (RENAME_PREFIX)"
     source ${WINEZGUI_SCRIPTS}/winezgui-rename-prefix
     rm "${PREFIXDIR}/Change-Prefix-Name"
     echo "------------------------------"  
     echo "RENAME_PREFIX ${PREFIX_NAME_TO_CHANGE}"
     echo "------------------------------"  
     RENAME_PREFIX ${PREFIX_NAME_TO_CHANGE}
     
fi

# If restored from Backup, update the wineprefix on different wine version
# without install mono and install html dialog
if [ -f ${PREFIXDIR}/restored.txt ]; then
     echo "I: Script: Updating wine prefix on 1st run after restoring backup"
     WINEDLLOVERRIDES="mscoree,mshtml=" \
     WINEPREFIX=${PREFIXDIR} \
     ${WBOOT_CMD} 2>/dev/null
     rm ${PREFIXDIR}/restored.txt
fi

# Creating/Updating Prefix for the EXE prefix

# Sandboxify by rm links to ~/Documents ~/Downloads ~/Videos etc.
if [ ! -f ${PREFIXDIR}/replaced_symlinks.txt  ]; then

     echo "I: Script: Prefix: Creating Prefix..."
     # Create Prefix and delete base system linked directory links
     echo "I: Script: Prefix: wine=$(which wine)"
     echo "I: Script: Prefix: WINEPREFIX=${WINEPREFIX}"
     echo "I: Script: Prefix: Wineboot command = ${WBOOT_CMD}"
     echo "I: Script: Prefix: WINEARCH ${WINEARCH}"
     WINEDLLOVERRIDES="mscoree,mshtml=" \
     WINEPREFIX=${PREFIXDIR} \
     ${WBOOT_CMD} 2>/dev/null

     # Replace home liked directory links with normal directories
     # For Games which saves in ~/Documents now will save in
     # Prefix-dir/drive_c/users/${USER}/Documents
     echo "I: Script: Prefix: Replacing symlinks with directories inside prefix"
     SAVEIFS=${IFS}
     IFS=$(echo -en "\n\b")
     for i in $(find ${WINEPREFIX}/drive_c/users/${USER} -type l); do
           rm $i && mkdir -p $i && \
           echo $i >> ${PREFIXDIR}/replaced_symlinks.txt
     done
     IFS=${SAVEIFS}

     # Create file to check later
     touch ${PREFIXDIR}/replaced_symlinks.txt

     # Create H: for HOME Directory for Wine Explorer
     ln -sf "${HOME}" "${PREFIXDIR}/dosdevices/h:"
     echo "I: Script: Prefix: Creating H: symlink to ${HOME}"
     echo "I: Script: Prefix: Created Prefix: ${PREFIXDIR}"
fi

# Create Metadata Info.yml for the prefix
if [ ! -f "${INFOFILE}" ]; then
     #  Insert Data into Info.yml
     DATE=$(date +%F_%H%M)

     echo "Name:${PROGNAME}"                |tee    "${INFOFILE}"
     echo "Exe:${EXE_FILE}"                 |tee -a "${INFOFILE}"
     echo "Sha256sum:${SHA256SUM}"          |tee -a "${INFOFILE}" 
     echo "Exe Path:${EXE_PATH}"            |tee -a "${INFOFILE}"
     echo "Prefix:${PREFIXNAME}"            |tee -a "${INFOFILE}"
     echo "Script:${SCRIPTFILE}"            |tee -a "${INFOFILE}"
     echo "Icon:${ICONFILE}"                |tee -a "${INFOFILE}"
     echo "Shortcut:${DESKTOPFILE}"         |tee -a "${INFOFILE}"
     echo "Created:${DATE}"                 |tee -a "${INFOFILE}"
     echo "Install:${INSTALL_TYPE}"         |tee -a "${INFOFILE}"
     echo "Wine:${WINEVER}"                 |tee -a "${INFOFILE}"
     echo "WineZGUI:${APPVERSION}"          |tee -a "${INFOFILE}"
     # Include flatpak id in Info.yml
     if [ "${INSTALL_TYPE}" = "flatpak" ]; then
          echo "Flatpak:${FLATPAK_NAME}"    |tee -a "${INFOFILE}"
     fi
     echo "WineZGUI Prefix:${WINEZPREFIX}"  |tee -a "${INFOFILE}"
     echo "I: Script: Prefix: Created ${INFOFILE}"
fi


# If asked to run an exe by winezgui using launch option
  if [ "$1" = "launch" ]; then
       echo "I: Script: Launch: ${EXE_FILE}"
       # Test if exe exists?
       if [ ! -f "${EXE_FILE}" ] ; then
            echo "E: Script: Launch: ${EXE_NAME} not found!"

            zenity --error --title "File not found!" --text "${EXE_FILE}"
            Game_Function
       fi
       export EXE_FILE_NAME=\"$(basename "${EXE_FILE}")\"
       export EXE_FILE_DIR=\"$(dirname "${EXE_FILE}")\"
       cd "${EXE_FILE_DIR}"
       echo "I: Script: Launch: Starting ${EXE_FILE_NAME}"
       ${WINE_CMD}  "${EXE_FILE_NAME}"
       exit 0;
  fi

# Backup_Restore_Function()
source ${WINEZGUI_SCRIPTS}/winezgui-backup-restore-function

# Start WineZGUI when no argument is supplied
if [ $# -eq 0 ]
     then
     echo "I: Script: Launching ${EXE_NAME} script"
     Game_Function
fi

' >> "${SCRIPTFILE}"
###############################################
chmod +x "${SCRIPTFILE}"

# Generate desktop entry specifications to be added to the application launcher.
#-------------------------------------------------------------------------------
echo "
[Desktop Entry]
Name=${PROGNAME}
Type=Application
Exec=bash -c \"'${SCRIPTFILE}'\"
Icon=${ICON}
Keywords=winezgui; game; ${EXE_NOEXE};
NoDisplay=false
StartupNotify=true
Terminal=false
Categories=$appCategory;
" > "${DESKTOPFILE}"

    # link the launcher  file to a shortcut on applications menu.
    mkdir -p "${DESKTOPDIR}" && \
    echo "I: Create Prefix: Created ${DESKTOPDIR}"

    ln -sf "${DESKTOPFILE}" \
           "${DESKTOPDIR}/${EXE_NOEXE}.desktop" && \
    echo "I: Create Prefix: Symlinked ${EXE_NOEXE}.desktop" \
         "at ${DESKTOPDIR}/${EXE_NOEXE}"
    # Test if the app link was created sucessfully on applications menu
    if [ $? -eq 0 ]; then
        ${UPDATE_ICON_CACHE}
        ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}
         echo "I: Create Prefix: Shortcut ${EXE_NOEXE}.desktop created"
         echo "I: Create Prefix: Shortcut: Name: ${PROGNAME}"
         echo "I: Create Prefix: Can use \"Rename...\" to change name"
         echo "I: Create Prefix: Shortcut: Exe: ${EXE_NAME}"
    fi
