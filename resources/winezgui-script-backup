# winezgui-backup-function
# This function can create a prefix backup or a game bundle by including gamedir
export SHORT_FLATPAK_NAME="${FLATPAK_NAME##*.}"


# Step 1: Ask Backup, prefix or create game bundle?
# Ask whether to backup only prefix or bundle the game directory too
echo "I: Script: Backup... Selected!"
BKP_RESPONSE=$(zenity --title "${APPNAME}-${APPVERSION}"   \
                      --list   --hide-header               \
                      --width=360 --height=30              \
                      --radiolist --column " "             \
                      --column "Backup..."                 \
                          TRUE "Prefix Backup..."          \
                          0    "Create Game Bundle..."     \
                      --text   "<b>Backup...</b>" )
# If Cancel is clicked
if [ -z "${BKP_RESPONSE}" ]; then
     echo "I: Script: Backup: Cancelled!"
     unset BKP_RESPONSE
     Game_Function
fi


# Step 2: Get disk usage of prefix (common to both prefix backup and bundle)
# By default, using human format (mb, gb)
# Converting human format to bytes for accurate calculation and comparison
PREFIX_SIZE_IN_HF=$(du -sh "${PREFIXDIR}")
PREFIX_SIZE_IN_BYTES=$(echo $PREFIX_SIZE_IN_HF|cut -f1 -d " "|numfmt --from iec)

echo "I: Script: Backup: Prefix = ${PREFIXDIR}"
echo "I: Script: Backup: Prefix size = ${PREFIX_SIZE_IN_HF}"

# Using Date as part of wzt backup filename
DATE=$(date +%F_%H%M)

# Step 3: Avoid Standard Directories from inclusion
# If user chooses Create Game Bundle, we do not want standard directories
# to be included, as this will be a ridiculously big tar file
if [ "${BKP_RESPONSE}" = "Create Game Bundle..." ]; then
     BKP_RESP_TXT="Game Bundle"
     echo "I: Script: Backup: Create Game Bundle... Selected!"
     # Step 3.1: Do not allow game bundle creation if the user has .exe inside
     # standard directories like ~/Documents ~/Downloads etc. to avoid huge file
     echo "I: Script: Backup: Game Bundle: Checking if ${EXE_NAME} is not" \
          "inside a standard directory"

     # List of standard Linux directories to avoid
     unset DO_NOT_BUNDLE
     # Get root dirs using find for changing root partition of different os
     ROOT_DIRS="$(find / -maxdepth 1 -type d)"
     #echo "I: Script: Backup: Game Bundle: Root Dirs: ${ROOT_DIRS}"
     # Get Mounted Partitions using mount command
     MOUNTED_PARTITONs="$(mount |cut -f3 -d " ")"
     #echo "I: Script: Backup: Game Bundle: Mounted Partitions:" \
     #     "${MOUNTED_PARTITONs}"
     # Add Root dirs and mounted partitions to Do_not_bundle variable
     DO_NOT_BUNDLE+="${ROOT_DIRS} "
     DO_NOT_BUNDLE+="${MOUNTED_PARTITONs} "
     # Manually include these
     DO_NOT_BUNDLE+="/    /boot /dev  /etc  /home /media "
     DO_NOT_BUNDLE+="/mnt /opt  /proc /root /run "
     DO_NOT_BUNDLE+="/srv /sys  /tmp  /usr  /var "
     DO_NOT_BUNDLE+="${HOME} "
     DO_NOT_BUNDLE+="${HOME}/Desktop    ${HOME}/Documents "
     DO_NOT_BUNDLE+="${HOME}/Downloads  ${HOME}/Music "
     DO_NOT_BUNDLE+="${HOME}/Pictures   ${HOME}/Public "
     DO_NOT_BUNDLE+="${HOME}/Templates  ${HOME}/Videos "

     # If game.exe file is inside standard (DO_NOT_BUNDLE) directories
     # ask user to copy to a separate gamedir then try to create bundle
     if [[ "${DO_NOT_BUNDLE}" == *"${EXE_PATH}"* ]]; then
           MSG1="Will not create bundle with ${EXE_PATH} as Game directory"
           MSG2="Copy/Move files to a different directory to create bundle!"

           echo "I: Script: Backup: Game Bundle: ${EXE_PATH}"
           echo "E: Script: Backup: Game Bundle: ${MSG1}"
           echo "E: Script: Backup: Game Bundle: ${MSG2}"
           echo "E: Backup: Cancelling Backup!"
           zenity --error --no-wrap --text "${MSG1}\n${MSG2}" \
                  --title "Cannot Bundle ${EXE_PATH}"
           unset DO_NOT_BUNDLE
           Game_Function
     fi

     unset DO_NOT_BUNDLE

     # Step 3.1.1: if gamedir is already inside prefixdir
     if [[ "${EXE_FILE}" == *"${PREFIXDIR}"* ]] ; then
           echo "I: Script: Backup: Game Bundle: Game Directory inside Prefix!"
           # do not include GAMEDIR separately when it is already inside prefix
           TOTAL_BACKUP_SIZE=${PREFIX_SIZE_IN_BYTES}
           TOTAL_BACKUP_SIZE_IN_HF=$(echo ${TOTAL_BACKUP_SIZE}|numfmt --to iec)

     # Show only Prefix size
     unset MSG_TEXT
     MSG_TEXT+="${PREFIX_SIZE_IN_HF}"
     else
     GAMEDIR_DISK_USAGE_IN_HF=$(du -sh "${EXE_PATH}")
     GAMEDIR_DU_IN_BYTES=$(echo ${GAMEDIR_DISK_USAGE_IN_HF}|cut -f1 -d " " \
                                                           |numfmt --from iec)
     # Step 3.3: Calculate total backup size prefix+gamedir
     TOTAL_BACKUP_SIZE=$(expr ${PREFIX_SIZE_IN_BYTES} + $GAMEDIR_DU_IN_BYTES)
     TOTAL_BACKUP_SIZE_IN_HF=$(echo ${TOTAL_BACKUP_SIZE}|numfmt --to iec)
     
     # Show Prefix + Gamedir size
     unset MSG_TEXT
     MSG_TEXT+="${GAMEDIR_DISK_USAGE_IN_HF}\n"
     MSG_TEXT+="${PREFIX_SIZE_IN_HF}"
     fi
     # Step 3.2: Now get disk usage and of gamedir

     echo "I: Script: Backup: Game Bundle: Prefix  Size:" \
          "${PREFIX_SIZE_IN_HF}"
     echo "I: Script: Backup: Game Bundle: Gamedir Size:" \
          "${GAMEDIR_DISK_USAGE_IN_HF}"
     echo "I: Script: Backup: Game Bundle: Bundle  Size:" \
          "${TOTAL_BACKUP_SIZE_IN_HF}"


     # Step 3.3: Set Backup file name, add .bundle suffix
     # Game-WineZGUI-0.84-Game-Bundle-flatpak-wine7.wzt
     if [ "${INSTALL_TYPE}" = "flatpak" ]; then
          # If "flatpak-" is not part of flatpak name, like WineZGUI, add it
          if ! [[ "$SHORT_FLATPAK_NAME" == *"flatpak-"* ]]; then
                  SHORT_FLATPAK_NAME="flatpak-${SHORT_FLATPAK_NAME}"
          fi
          unset WZT_FILE
          WZT_FILE+="${PREFIXNAME}-${APP_WITH_VER}"
          WZT_FILE+="-Game-Bundle-"
          WZT_FILE+="${SHORT_FLATPAK_NAME}.${BKP_EXT}"
     else
      # Game-WineZGUI-0.84-Game-Bundle-wine-7.0.wzt
          unset WZT_FILE
          WZT_FILE+="${PREFIXNAME}-${APP_WITH_VER}"
          WZT_FILE+="-Game-Bundle-"
          WZT_FILE+="${WINEVER}.${BKP_EXT}"
     fi
     echo "I: Script: Backup: Game Bundle: Filename Suggestion: ${WZT_FILE}"
     BKPTITLE="Creating bundle for ${PREFIXNAME}"

# Step 3: If only Prefix is being backed up
elif [ "$BKP_RESPONSE" = "Prefix Backup..." ]; then
     # Step 3.1:
     BKP_RESP_TXT="Prefix Backup"
     echo "I: Script: Backup: Prefix Backup... Selected!"
     TOTAL_BACKUP_SIZE=${PREFIX_SIZE_IN_BYTES}
     TOTAL_BACKUP_SIZE_IN_HF=$(echo ${TOTAL_BACKUP_SIZE}|numfmt --to iec)
     echo "I: Script: Backup: Prefix Backup: Size: ${TOTAL_BACKUP_SIZE_IN_HF}"

     # Suggest name for prefix
     # Game-WineZGUI-0.84-Prefix-Backup-flatpak-wine7.wzt
     if [ "${INSTALL_TYPE}" = "flatpak" ]; then
          # If "flatpak-" is not part of flatpak name, like WineZGUI, add it
          if ! [[ "$SHORT_FLATPAK_NAME" == *"flatpak-"* ]]; then
                  SHORT_FLATPAK_NAME="flatpak-${SHORT_FLATPAK_NAME}"
          fi
          unset WZT_FILE
          WZT_FILE+="${PREFIXNAME}-${APP_WITH_VER}"
          WZT_FILE+="-Prefix-Backup-"
          WZT_FILE+="${SHORT_FLATPAK_NAME}.${BKP_EXT}"
     else
      # Game-WineZGUI-0.84-Game-Bundle-wine-7.0.wzt
          unset WZT_FILE
          WZT_FILE+="${PREFIXNAME}-${APP_WITH_VER}"
          WZT_FILE+="-Prefix-Backup-"
          WZT_FILE+="${WINEVER}.${BKP_EXT}"
     fi
     echo "I: Script: Backup: Prefix Backup: Filename Suggestion: ${WZT_FILE}"
     BKPTITLE="Backup ${PREFIXNAME} Prefix!"
     unset MSG_TEXT
     MSG_TEXT+="${PREFIX_SIZE_IN_HF}"
     #MSG_TEXT+="Name:"
else
     echo "E: Script: Backup: Unknown Selection!"
     echo "E: Script: =========================="
     Game_Function
fi

# Step 4: Ask file name for the prefix / bundle
echo "I: Script: Backup: ${BKP_RESP_TXT}: Asking filename"
BACKUP_FILE=$( zenity                 \
              --title="${BKPTITLE}"   \
              --width=500 --height=30                \
              --text="${MSG_TEXT}"   \
              --entry-text="${WZT_FILE}"             \
              --entry)

# Step 4.1: if backup file is empty / cancel clicked
if [ -z "${BACKUP_FILE}" ]; then
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Cancelled!"
     unset BACKUP_FILE
     unset WZT_FILE
     Game_Function
fi

# Step 5: Ask user to select backup target/destination directory
echo "I: Script: Backup: ${BKP_RESP_TXT}: Select backup directory"
Z_TITLE="Choose Backup Directory for ${BACKUP_FILE}!"

TARGET_DIR=$(zenity  --file-selection --title="${Z_TITLE}" --directory)
if [ -z "${TARGET_DIR}" ]; then
     echo "I: Script: Backup: ${BKP_RESP_TXT}:" \
          "Select backup directory: Cancelled!"
     Game_Function
fi

# 5.1: Check if the target directory is writable or not?
if [ ! -w "${TARGET_DIR}" ]; then
     echo "E: Script: Backup: ${BKP_RESP_TXT}: ${TARGET_DIR} not writable"
     zenity --error --no-wrap --title="Backup Error!" \
            --text "${TARGET_DIR} not writable\nAborting Backup!"
     Game_Function
fi


# Step 5.2 Required extension is .${BKP_EXT} i.e., .wzt, if not found add it
echo "I: Script: Backup: ${BKP_RESP_TXT}: Given ${BACKUP_FILE}"

if ! [[ "${BACKUP_FILE}" == *".${BKP_EXT}" ]]; then
         BACKUP_FILE="$(echo ${BACKUP_FILE}.${BKP_EXT})"
         echo "I: Script: Backup: ${BKP_RESP_TXT}: added suffix ${BKP_EXT}"
fi

echo "I: Script: Backup: ${BKP_RESP_TXT}: Using ${BACKUP_FILE}"

# Step 5.3: Check for available disk space in target directory before backing up
# to make sure that prefix size < target dir for backup to start

# Step 5.4: Get available target dir partition's available space in
# Human format (df -h)
echo "I: Script: Backup: ${BKP_RESP_TXT}: Determining available space"
TARGET_DIR_AVAILABLE_SPACE=$(df -h "${TARGET_DIR}"|sed "s/  */ /g" \
                                              |cut -f4 -d " "|tail -n1)
echo "I: Script: Backup: ${BKP_RESP_TXT}: Available space is:" \
     "${TARGET_DIR_AVAILABLE_SPACE}"

# Step 5.5: Convert the above $TARGET_DIR_AVAILABLE_SPACE into bytes
# for comparison
TARGET_DIR_DF_IN_BYTES=$(echo ${TARGET_DIR_AVAILABLE_SPACE}|numfmt --from iec)

# Step 5.6: If Target directory does not have sufficient space, abort backup
echo "I: Script: Backup: ${BKP_RESP_TXT}: Checking if size < target dir space"
if [ ${TARGET_DIR_DF_IN_BYTES} -gt ${TOTAL_BACKUP_SIZE} ];then
     echo "I: Script: Backup: ${BKP_RESP_TXT}: ${TARGET_DIR}" \
          "has enough available disk space"
else
     echo "W: Script: Backup: ${BKP_RESP_TXT}: ${TARGET_DIR}"\
          "does not have free disk space!!!"
     unset MSG
     MSG+="${TARGET_DIR} has only ${TARGET_DIR_AVAILABLE_SPACE}"
     MSG+=" "
     MSG+="free disk space left!\n"
     MSG+="Prefix backup requires ${TOTAL_BACKUP_SIZE_IN_HF} free disk space."

     # Warn user
     zenity --warning --no-wrap --title "Not Enough Disk Space!" --text "${MSG}"
     echo "E: Script: Backup: ${BKP_RESP_TXT}: Not Enough Disk Space," \
          "Cancelled!"
     Game_Function

fi

# Ask for Compression Levels
unset LEVEL
LEVEL=$(zenity --scale --value 10 --min-value 1 --max-value 19 \
               --text "${WZT_FILE}" --title "Select Compression Level...")
# Exit if Cancel is clicked
if [ -z "${LEVEL}" ]; then
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Cancel Selected!"
     Game_Function
fi
echo "I: Script Backup: ${BKP_RESP_TXT}: Compression Level ${LEVEL} Selected!"


# Change directory to WINEZPREFIX
cd "${WINEZPREFIX}"

# Step 6: Create Backup based on bundle and prefix
###/ Create , copy and process exe file for bundle
if [ "${BKP_RESPONSE}" = "Create Game Bundle..." ]; then
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Processing ${EXE_NAME}"

     # tar would need these 2 variables to bundle gamedir into tar archive
     TAR_GAME_DIR_NAME=$(basename "${EXE_PATH}")
     TAR_GAME_DIR_PATH=$(dirname "${EXE_PATH}")
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Gamedir at: ${TAR_GAME_DIR_PATH}"
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Game Name : ${TAR_GAME_DIR_NAME}"

     # Change EXE_FILE and EXE_PATH before bundling
     # Putting Game directory inside drive_c/bundled_game
     GAME_BUNDLED_DIR="drive_c/bundled_game/${TAR_GAME_DIR_NAME}"
     GAME_EXE_PATH="${PREFIXDIR}/${GAME_BUNDLED_DIR}"
     GAME_EXE_FILE="${GAME_EXE_PATH}/${EXE_NAME}"

     echo "I: Script: Backup: ${BKP_RESP_TXT}: Game Exe Path: ${GAME_EXE_PATH}"
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Game Exe File: ${GAME_EXE_FILE}"

     # Change EXE path and name in the script and txt file
     sed "s|${EXE_PATH}|${GAME_EXE_PATH}|g; t;" \
          -i ${PREFIXDIR}/*.txt   \
          -i ${PREFIXDIR}/*.sh && \
          echo "I: Script: Backup: ${BKP_RESP_TXT}:" \
               "Game Exe Path Changed To: ${GAME_EXE_PATH}"
     sed "s|${EXE_FILE}|${GAME_EXE_FILE}|g; t;"  \
          -i ${PREFIXDIR}/*.txt   \
          -i ${PREFIXDIR}/*.sh && \
          echo "I: Script: Backup: ${BKP_RESP_TXT}:" \
               "Game Exe File Changed To: ${GAME_EXE_FILE}"

     #Preprocess
     # Handle Backup interruption
     # using this file we'll determine if backup was interrupted
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Preparing files"
     Backup_Restore_Function


     # Create wzt-info.txt file for restore prompt and to determine uncompressed
     # size requirement on restore.
     source ${WINEZGUI_SCRIPTS}/winezgui-create-wzt-info

     # Create Bundle
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Game Name: ${TAR_GAME_DIR_NAME}"
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Creating ${BACKUP_FILE} file..."

     (tar -I "zstd -${LEVEL} -T0" -cf \
      "${TARGET_DIR}/${BACKUP_FILE}" \
      -C "${WINEZPREFIX}" "${PREFIXNAME}" \
      -C "${TAR_GAME_DIR_PATH}" "./${TAR_GAME_DIR_NAME}" \
      --transform \
      "s|^\./${TAR_GAME_DIR_NAME}|${PREFIXNAME}/${GAME_BUNDLED_DIR}|g" &)| \
     zenity  --progress --pulsate --auto-close \
             --title="Creating ${PREFIXNAME} Game Bundle...!" \
             --width=500 --text="${BACKUP_FILE}..."

else  # Create Prefix
#     --transform "s|{$TAR_GAME_DIR_NAME}|${PREFIXNAME}/${TAR_GAME_DIR_NAME}|g" \
     #Preprocess
     # Handle Backup interruption
     # using this file we'll determine if backup was interrupted
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Preparing files"
     Backup_Restore_Function

     # Create wzt-info.txt file for restore prompt and to determine uncompressed
     # size requirement on restore.
     source ${WINEZGUI_SCRIPTS}/winezgui-create-wzt-info

     # use this command to include gamdir putty at EXE_PATH
     # tar -zcvf "${TARGET_DIR}/${BACKUP_FILE}" "./${PREFIXNAME}" \
     #-C $(dirname $EXE_PATH) ./$(basename EXE_PATH)
     # tar -cvf test.tar -C ~/Downloads/ ./PUTTY
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Creating ${BACKUP_FILE} file..."
     # Create Backup archive and restore changes as soon as tar is done
     (tar -I "zstd -${LEVEL} -T0" -cf "${TARGET_DIR}/${BACKUP_FILE}" \
             -C "${WINEZPREFIX}" "${PREFIXNAME}" &) | \
     zenity --progress --pulsate --auto-close \
            --title="Creating ${PREFIXNAME} backup!" \
            --width=500 --text="${BACKUP_FILE}..."
fi

# If user clicks cancel, kill tar commands
# zenity progress won't kill the process, so we do it
PID_OF_TAR=$(ps -aux|grep tar|grep -i wzt |sed 's/  */ /g'|cut -f2 -d " ")
if ! [ -z "$PID_OF_TAR" ]; then
     kill -9 ${PID_OF_TAR} \
     && echo "I: Script: Backup: ${BKP_RESP_TXT}: Cancelled! Killed tar!" \ &&
     rm -f "${TARGET_DIR}/${BACKUP_FILE}" && \
     echo "I: Script: Backup: ${BKP_RESP_TXT}: Removed unusable ${BACKUP_FILE}"

     # Report Size also
     BACKUP_SIZE=$(du -sh "${TARGET_DIR}/${BACKUP_FILE}"|cut -f1)
     # Backup Sucess Message
     MSG=("${PREFIXNAME} backup cancelled!")

else
     echo "I: Script: Backup: ${BKP_RESP_TXT}: ${BACKUP_FILE} created, success!"
     # Report Size also
     BACKUP_SIZE=$(du -sh "${TARGET_DIR}/${BACKUP_FILE}"|cut -f1)
     # Backup Sucess Message
     MSG=("<b>Prefix: </b> ${PREFIXNAME}\n")
     MSG+="<b>Filename:</b> ${BACKUP_FILE}"
     MSG+="\n<b>Location:</b> ${TARGET_DIR}\n"
     MSG+="<b>Backup Size:</b> ${BACKUP_SIZE}"

fi

# Restore changed values after backup
echo "I: Script: Backup: ${BKP_RESP_TXT}: Restoring Registry and Info files"
Backup_Restore_Function "restore"

# Revert Change of EXE_FILE and EXE_PATH by Create Game Bundle Option
if [ "${BKP_RESPONSE}" = "Create Game Bundle..." ]; then
     # Change EXE path and name in the script and txt file for the bundle change
     sed "s|${GAME_EXE_PATH}|${EXE_PATH}|g; t;"  \
          -i ${PREFIXDIR}/*.txt   \
          -i ${PREFIXDIR}/*.sh && \
          echo "I: Script: Backup: ${BKP_RESP_TXT}:" \
               "Reverted Game Exe Path to: ${EXE_PATH}"

     sed "s|${GAME_EXE_FILE}|${EXE_FILE}|g; t;"  \
          -i ${PREFIXDIR}/*.txt   \
          -i ${PREFIXDIR}/*.sh && \
          echo "I: Script: Backup: ${BKP_RESP_TXT}:" \
               "Reverted Game Exe File to: ${EXE_FILE}"

fi

echo "I: Script: Backup: ${BKP_RESP_TXT}: Created ${BACKUP_FILE} at" \
     "${TARGET_DIR}" && \
zenity --no-wrap --info --title="${BKP_RESP_TXT}!" \
       --text="${MSG[@]}"


