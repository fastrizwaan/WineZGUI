#!/usr/bin/env bash
# ============================================================================ #
# winez-create-prefix (C) GPL3 Mohammed Asif Ali Rizvan <fast.rizwaan@gmail.com>
# URL: https://github.com/fastrizwaan/WineZGUI
# Creates Application shortcut when called from winezgui.
# ============================================================================ #
export APPNAME=WineZGUI
export WINEVER="$(wine --version|cut -f1 -d ' ')"
export APPLICATIONSDIR="$(realpath -m ~/.local/share/applications)"
export PREFIXDIR=${WINEZPREFIX}
export UPDATE_ICON_CACHE="gtk-update-icon-cache"
export UPDATE_DESKTOP_DATABASE="update-desktop-database"
export WINE_CMD="$(which wine)"
export WINEEXE=${WINE_CMD}
export WTRICKS_CMD=$(which winetricks)
export TEMPDIR="${WINEZPREFIX}/tmp"
export EXIFTOOL=$(which exiftool)

# These values will be assigned by Setup using sed command
# Post install $PREFIX/bin/winezgui-create-prefix file will be different
export APPVERSION="git"
export INSTALL_TYPE="system"
export WINEZPREFIX="$(realpath -m ~/.local/share/winezgui)"
export FLATPAK_NAME="io.github.WineZGUI"
export BINDIR=/usr/bin    # /usr will be replaced by prefix

# Where to install .desktop shortcuts?
# for system install (./setup -i) use ~/.local/share/applications/winezgui
if [ "$INSTALL_TYPE" = "system" ]; then
    export DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui)"
else 
    # for flatpak create subdirectory with flatpakname 
    export DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui/$FLATPAK_NAME)"
fi

echo "winez-create-prefix DESKTOPDIR = $DESKTOPDIR"
#/These values will be changed  by Setup using sed command


# Check if an application argument was submited.
if [[ $(file --mime-type -b "$1") = application/* ]]; then

    # Get the full path, the name & directory name of submited application file.
    EXE_FILE=$(realpath -m "$1")
    EXE_NAME=$(basename "$EXE_FILE")
    EXE_PATH=$(dirname  "$EXE_FILE")
    EXE_NOSP=$(echo $EXE_NAME|tr ' ' '_');
    EXE_NOEXE=$(echo $EXE_NOSP|sed "s/\.exe//g");
    WINEPREFIX_SUBDIR="${PREFIXDIR}/$EXE_NOEXE"
    ICON="${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.png"    

    # Create required directories
    mkdir -pv  "${WINEPREFIX_SUBDIR}"
    mkdir -pv  "${DESKTOPDIR}"
    
    # Extract icon and convert it to several png files of diferent quality, 
    ## Create a temporary Directory to extract icon from the exe file
    mkdir -vp ${TEMPDIR} && cd ${TEMPDIR}
    # wrestool extracts ico file from EXE
    wrestool -x -t 14 "$EXE_FILE" > "${TEMPDIR}/$EXE_NOEXE.ico" 2> /dev/null &&\
    echo "wrestool: Extracting ico file from $EXE_NOEXE"
    # icotool extracts all png files from ico files
    icotool -x "${TEMPDIR}/$EXE_NOEXE.ico" 2>/dev/null && \
    echo "icotool: Extracting png files from ico:$EXE_NOEXE.ico"
    # Select and copy the best png image file by sorting using ls -S1.
    cp $(ls -S -1 ${TEMPDIR}/${EXE_NOEXE}*.png  | head -n 1) ${ICON} && \
    echo "Icon copied successfully..." && \
    rm -rf $TEMPDIR ; #remove tmp directory after copying icon png    

    # Create Desktop Shortcut file for the exe
    # Get the app category and shortcut name inputs from the user.
    #appCategory=$(zenity --title "wine-create-shortcut" --height=450 --list \
    # --radiolist --column " " --column "Categories" 0 AudioVideo 0 Audio 0 Video 0 \
    # Development 0 Education TRUE Game 0 Graphics 0 Network 0 Office 0 Settings 0 \
    # System 0 Utility  --text "Select a Category:" 2> /dev/null)
    
    appCategory="Game"

    # Create Desktop Shortcut
    # Ask for Name
    #PROGNAME=$(zenity --title "Create-Desktop-Shortcut" --text "Enter a name or Click OK to use $EXE_NOEXE name" --entry)
    
    # Automatically set name, read from pe file, if not found use exe name
    PRODUCT=$(${EXIFTOOL} "${EXE_FILE}"|grep -i 'product name'|cut -f2 -d ':' \
                                                              |sed 's/^ //')
    # if language is not english inside exe name, or product is '', use exe name
    if [ $(echo $PRODUCT | grep -aEv [a-zA-Z] ) ] || [ -z "$PRODUCT" ]; then
         unset PRODUCT
         unset PROGNAME
         PROGNAME=$(echo "$EXE_NOEXE (${WINEVER})"|sed 's/\.exe//g');     
    else 
         PROGNAME=$(echo "$PRODUCT (${WINEVER})");   
    fi


# Generate Sha256sum for the exefile
SHA256SUM=$(sha256sum "${EXE_FILE}"|cut -f1 -d " ")


# Create Launch Script for the provided EXE file
# ------------------------------------------------
# Launch script needs 

echo  "Copying PREPROCESS_BACKUP_RESTORE to ${WINEPREFIX_SUBDIR}"
cp -v "${BINDIR}/PREPROCESS_BACKUP_RESTORE" "${WINEPREFIX_SUBDIR}/"

# need variables from this script
echo "
#!/bin/bash
export APPNAME=\"${APPNAME}\"
export FLATPAK_NAME=\"${FLATPAK_NAME}\"
export APPVERSION=\"${APPVERSION}\"
export WINEVER=\"${WINEVER}\"
export PROGNAME=\"${PROGNAME}\"
export INSTALL_TYPE=\"\"${INSTALL_TYPE}\"\"
export PREFIX=\"${WINEZPREFIX}\"
export BACKUPNAME=\"${EXE_NOEXE}\"
export EXE_FILE=\"${EXE_FILE}\"
export EXE_NAME=\"${EXE_NAME}\"
export SHA256SUM=\"${SHA256SUM}\"
export EXE_PATH=\"${EXE_PATH}\"
export EXE_NOSP=\"${EXE_NOSP}\"
export EXE_NOEXE=\"${EXE_NOEXE}\"
export WINEPREFIX_SUBDIR=\"${WINEPREFIX_SUBDIR}\"
export WINEPREFIX=\"${WINEPREFIX_SUBDIR}\"
export APPLICATIONSDIR=\"${APPLICATIONSDIR}\"
export ICON=\"\$(grep Icon \${WINEPREFIX_SUBDIR}/\${EXE_NOEXE}.desktop\
                |cut -f2 -d '=')\"
export DESKTOPDIR=\"${DESKTOPDIR}\"
export UPDATE_DESKTOP_DATABASE=\"${UPDATE_DESKTOP_DATABASE}\"
" > "${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh"

# Append rest 
echo '
export WINEARCH=win64
export WINEDLLOVERRIDES="mscoree,mshtml="
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/app/lib:/app/lib32:/app/lib64
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/app/lib/i386-linux-gnu:/app/lib/wine
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/app/lib64/wine:/app/$NAME:$(pwd)
export DESKTOP_FILE_EDIT="desktop-file-edit"

TEST_FILE_EXIST_IF_NOT_ASK_TO_SELECT()
{
if [ ! -f "${EXE_FILE}" ] ; then
    zenity --question --no-wrap --title "${EXE_NAME} not found!" \
           --text "${EXE_FILE}\nLocate ${EXE_NAME}?"
    ANSWER=$?
    echo ${ANSWER}
    if [ ${ANSWER} -eq 0 ]; then
        FILTER=$(echo $EXE_NOEXE|cut -f1 -d " ")
        FIND_EXE_FILE="$(zenity                      \
                           --file-filter="${FILTER}*.exe"          \
                           --file-selection                      \
                           --title="Locate ${EXE_NAME} File" \
                         )"
             echo "selected ${FIND_EXE_FILE}"
             # If no Backup file is selected, or cancel is clicked
             if [ -z "${FIND_EXE_FILE}" ]
                  then
        	        unset FIND_EXE_FILE; # Empty variable
        	   else
        	       #check shasum and verify
        	       FIND_EXE_FILE_SHA256SUM=$(sha256sum "${FIND_EXE_FILE}" \
        	                                 |cut -f1 -d " ")
        	       echo "old256sum ${SHA256SUM}"
        	       echo "newSha256 ${FIND_EXE_FILE_SHA256SUM}"
        	      if [ "${SHA256SUM}" = "${FIND_EXE_FILE_SHA256SUM}" ]; then
        	           echo "Found same sha256sum file"
        	           zenity --question --no-wrap \
        	                  --title "${EXE_NAME} found!" \
                            --text  "set ${FIND_EXE_FILE}?"
                     ANSWER=$?
                     # Set EXE and EXE path in script file and info.txt and g:
                     if [ ${ANSWER} -eq 0 ]; then
                     
                     # Script ($0) file update
                     sed "s|\(export EXE\_FILE=\).*|\1\"${FIND_EXE_FILE}\"|g" \
                          -i $0
                     FIND_EXE_PATH=$(dirname "$FIND_EXE_FILE")
                     sed "s|\(export EXE\_PATH=\).*|\1\"${FIND_EXE_PATH}\"|g" \
                          -i $0
                     
                     # set g: to new exe path
                     rm  -v  "${WINEPREFIX_SUBDIR}/dosdevices/g:"
                     ln -svf "${FIND_EXE_PATH}" \
                             "${WINEPREFIX_SUBDIR}/dosdevices/g:"
 
                     # Change info.txt
                     REPL_EXE_FILE=$(echo $FIND_EXE_FILE|\
                                     sed "s/\\//\\\\\\//g"|sed "s/\\./\\\\./g")
                     sed "s/\(Game EXE.*: \).*/\1${REPL_EXE_FILE}/g" -i \
                          ${WINEPREFIX_SUBDIR}/info.txt
                     
                     REPL_EXE_PATH=$(echo $FIND_EXE_PATH|\
                                     sed "s/\\//\\\\\\//g"|sed "s/\\./\\\\./g")
                     sed "s/\(Game Directory.*: \).*/\1${REPL_EXE_PATH}/g" -i \
                          ${WINEPREFIX_SUBDIR}/info.txt
                     
                     # Allow launching exe by setting temporarily variables
                     EXE_FILE="${FIND_EXE_FILE}"
                     EXE_PATH="${FIND_EXE_PATH}"

                     fi
                else
                     echo "Warning: Different Sha256sum"
        	           zenity --question --no-wrap \
        	                  --title "${EXE_NAME} Checksum Fail!" \
                            --text  "Just run ${FIND_EXE_FILE} once?"
                     ANSWER=$?
                     # If the user still want to run the mismatched exe
                     # Let the user run it once
                     if [ ${ANSWER} -eq 0 ]; then
                          FIND_EXE_PATH=$(dirname "$FIND_EXE_FILE")
                          EXE_FILE="${FIND_EXE_FILE}"
                          EXE_PATH="${FIND_EXE_PATH}"
                     fi
                fi
        	       
        	  fi
    fi
fi
}

# Test if exe exists?
TEST_FILE_EXIST_IF_NOT_ASK_TO_SELECT

    # If ${FLATPAK_NAME} is installed, and script created using flatpak 
    if [ ${INSTALL_TYPE} = "flatpak" ] && \
       [ $(flatpak --command=echo run ${FLATPAK_NAME} 0 2>/dev/null) ]; then
         echo "We are using flatpak install type, but running from host"
         WINE_CMD="flatpak run --command=wine ${FLATPAK_NAME}"
         WTRICKS_CMD="flatpak run --command=winetricks ${FLATPAK_NAME}"
         WINECFG_CMD="flatpak run --command=wine ${FLATPAK_NAME} winecfg"
         WEXPLORER_CMD="flatpak run --command=wine ${FLATPAK_NAME} explorer"
         WBOOT_CMD="flatpak --command=wineboot run ${FLATPAK_NAME} -i"
         WHICHWINE="$(flatpak --command=which run ${FLATPAK_NAME} wine)"
         
         export WINE_CMD WTRICKS_CMD WINECFG_CMD WEXPLORER_CMD WBOOT_CMD 
         export WHICHWINE
         
    else 
        # flatpak install and running from shell inside flatpak winezgui
        if [ "$INSTALL_TYPE" = "flatpak" ]; then
             echo "We are running this from flatpak & installed via flatpak"
             export WINE_CMD="/app/bin/wine"
             export WTRICKS_CMD="/app/bin/winetricks"
             export WINECFG_CMD="${WINE_CMD} winecfg"
             export WEXPLORER_CMD="${WINE_CMD} explorer"
             export WBOOT_CMD="$(which wineboot) -i" 
             export WHICHWINE="${WINE_CMD}"
             export DESKTOPDIR="${DESKTOPDIR}/${FLATPAK_NAME}"
        else
             # We are using non flatpak install
             echo "We are running this from host system."
             export WINE_CMD="$(which wine)"
             export WTRICKS_CMD="$(which winetricks)"
             export WINECFG_CMD="${WINE_CMD} winecfg"
             export WEXPLORER_CMD="${WINE_CMD} explorer"
             export WBOOT_CMD="$(which wineboot) -i"
             export WHICHWINE="$(which wine)"             
        fi
    fi

  # Sandboxify by rm links to ~/Documents ~/Downloads ~/Videos etc.
  if [ ! -f ${WINEPREFIX_SUBDIR}/replaced_symlinks.txt  ]; then

       # Create Prefix and delete base system linked directory links  
       echo "wine=$(which wine)"
       echo "WINEPREFIX=$WINEPREFIX"
       echo "Wineboot command = ${WBOOT_CMD}"
       echo "WINEARCH $WINEARCH"
       WINEDLLOVERRIDES="mscoree,mshtml=" \
       WINEPREFIX=${WINEPREFIX_SUBDIR} \
       ${WBOOT_CMD} 2>/dev/null 
       
       # Replace home liked directory links with normal directories
       # For Games which saves in ~/Documents now will save in
       # Prefix-dir/drive_c/users/${USER}/Documents
       SAVEIFS=$IFS
       IFS=$(echo -en "\n\b")
       echo "Starting for loop"
       for i in $(find ${WINEPREFIX}/drive_c/users/${USER} -type l); do
         rm $i && mkdir -p $i && \
         echo $i >> ${WINEPREFIX_SUBDIR}/replaced_symlinks.txt
       done
       IFS=$SAVEIFS

       # Create file to check later
       touch ${WINEPREFIX_SUBDIR}/replaced_symlinks.txt
       
       # Create G: for Game Directory for Wine Explorer
       ln -sf "${EXE_PATH}" "${WINEPREFIX_SUBDIR}/dosdevices/g:"
        
       # Create H: for HOME Directory for Wine Explorer
       ln -sf "${HOME}" "${WINEPREFIX_SUBDIR}/dosdevices/h:"
        
  fi

# Create Metadata info.txt for the default wine prefix
if [ ! -f ${WINEPREFIX_SUBDIR}/info.txt ]; then
echo -e "
Game Name      : ${PROGNAME}
Game EXE       : ${EXE_FILE}
Sha256sum      : ${SHA256SUM}
Game Directory : ${EXE_PATH}
Game Prefix    : ${WINEPREFIX_SUBDIR}
Game Script    : ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh
Game Icon      : ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.png
Game Shortcut  : ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.desktop
System Shortcut: ${DESKTOPDIR}
Creation Date  : $(date)
----------------------------------------------------
Application    : ${APPNAME}
Version        : ${APPVERSION}
Wine           : ${WINEEXE}
Wine Version   : ${WINEVER}
Wine Arch      : ${WINEARCH}
WineZGUI Prefix: ${WINEZPREFIX}
" > ${WINEPREFIX_SUBDIR}/info.txt
echo "created ${WINEPREFIX_SUBDIR}/info.txt"
fi


# If asked to run an exe by winezgui using launch option
  if [ "$1" = "launch" ]; then
       # Test if exe exists?
       if [ ! -f "${EXE_FILE}" ] ; then
            zenity --error --title "File not found!" --text "${EXE_FILE}"
            GameFunction
       fi
       export EXE_FILE_NAME=$(basename "$EXE_FILE")
       export EXE_FILE_DIR=$(dirname "$EXE_FILE")
       cd "$EXE_FILE_DIR"
       ${WINE_CMD}  "$EXE_FILE_NAME"
       exit 0;
  fi

# PROCESS_FILES_FOR_BACKUP()
source ${WINEPREFIX_SUBDIR}/PREPROCESS_BACKUP_RESTORE

  GameFunction () 
  {
  echo "$ {EXE_NAME} ${EXE_NAME}"
  echo "$ {EXE_FILE} ${EXE_FILE}"
  unset SELECTION
  # EXE handling by providing dialog
  SELECTION=$(zenity --title "${PROGNAME}"              \
                   --window-icon="${ICON}"              \
                   --width=360 --height=450             \
                   --list                               \
                   --radiolist --column " "             \
                   --column "Action"                    \
                       TRUE "Launch..."                 \
                       0    "Open Other EXE..."         \
                       0    "Winetricks GUI..."         \
                       0    "Winetricks CLI..."         \
                       0    "Launch Winecfg..."         \
                       0    "Open Explorer..."          \
                       0    "Open Shell..."             \
                       0    "Rename..."                 \
                       0    "Change Icon..."            \
                       0    "Backup..."                 \
                       0    "Delete..."                 \
                       0    "About..."                  \
                   --text "Select action for <b>${EXE_NAME}</b>..." )

  # If Cancel button is pressed, exit
  [[ -z "${SELECTION}" ]] && exit 1

  # If Winetricks is selected
  if [ "${SELECTION}" = "Winetricks GUI..." ]; then  
       $WTRICKS_CMD --gui
       # Return to Game window
       GameFunction

    # Provide Command Line to enter multiple Dependencies
    elif [ "${SELECTION}" = "Winetricks CLI..." ]; then
           VERB_LIST="xact xinput xna31 dotnet48 \
                        vcrun2003 vcrun2005      \
                        vcrun2008 vcrun2019      \
                        vcrun2010 dxvk faudio    \
                        quartz corefonts"
           MESSAGE="Change and Press Enter to install these using Winetricks:"
           TITLE_TEXT="Winetricks CLI - Paste your Dlls list"
           # Remove multiple spaces from variable           
           VERB_LIST=$(echo ${VERB_LIST}|sed "s/  / /g")
           VERBS=$(                     \
           zenity                       \
           --title "${TITLE_TEXT}"      \
           --width=800 --height=30      \
           --text  "${MESSAGE}"         \
           --entry-text "${VERB_LIST}"  \
           --entry)
 
          if [ -z "${VERBS}" ]; then #if no dlls are given
               #go back to Main function
               echo "not given verbs=$VERBS"
           
          else   
               VERBS=(${VERBS}) ; #convert string to array
               echo "Given Verbs $VERBS"
                    
               # Show Progress Percentage by getting number of items
               NO_OF_ITEMS=${#VERBS[*]}
               NO_OF_ITEMS=$(expr ${NO_OF_ITEMS} + 1) ;# add +1 for for progress

               PERCENTAGE=$(expr 100 / ${NO_OF_ITEMS})
               
               # Convert number to string
               PROGRESS=$(echo ${PERCENTAGE})  
               
               echo "Info: Selected winetricks verbs: ${VERBS[*]}"
               
               # Show Progress using zenity
               ( for i in ${VERBS[*]}; do

               # Show Progress Percentage and Info
               echo ${PROGRESS}
               echo "# Installing ${i}..."
               
               # Install winetricks verbs and put output to logs
               ${WTRICKS_CMD} --force --unattended  ${i}
               
               PROGRESS=$(expr ${PROGRESS} + ${PERCENTAGE})
               done
               echo 100
               echo "# Done!"
               ) |zenity                                                     \
                 --width=440                                                 \
                 --title                                                     \
                 "Please Wait... Good things take time!"                     \
                 --progress                                                  \
                 --auto-kill
          fi   
          # After winetricks cli,
          # Return to Game window
          GameFunction
  elif [ "${SELECTION}" = "Open Other EXE..." ]
           then
           OTHER_EXE="$( \
                        zenity                  \
                        --file-filter=*.exe     \
                        --file-selection        \
                        --title="Select a File" \
                      )"
           
           # If no exe is selected
           if [ -z "${OTHER_EXE}" ]
                then
                #unset SELECTION ; # Empty variable
                GameFunction    ; # Go back to Game Window
           fi

           # If another exe is selected
           base=$(basename "$OTHER_EXE")
           dire=$(dirname "$OTHER_EXE")
           
           # Launch other EXE
           cd "$dire"
           ${WINE_CMD} "$base"
           
            # Return to Game window
           GameFunction
  
  elif [ "${SELECTION}" = "Launch Winecfg..." ]; then
         ${WINECFG_CMD}
         # Return to Game window
         GameFunction
    
  elif [ "${SELECTION}" = "Open Explorer..." ]; then
         ${WEXPLORER_CMD} "$EXE_PATH"
         # Return to Game window
         GameFunction
 
  elif [ "${SELECTION}" = "Open Shell..." ]; then
          
         #  using flatpak install and script is running from sandbox
         # Check if it is a flatpak based script
         # Check if it is running from inside sandbox
         # and gnome terminal is found on host
         if [ ${INSTALL_TYPE} = "flatpak" ] && \
            [ $(flatpak-spawn --host which gnome-terminal) ]; then
              echo "I am a flatpak script, running from sandbox"
              export WINEPREFIX=${WINEPREFIX_SUBDIR};
              flatpak-spawn --host gnome-terminal --wait -- flatpak run \
              --command=bash ${FLATPAK_NAME} -c  \
             "export WINEPREFIX=${WINEPREFIX_SUBDIR}; cd \"$WINEPREFIX\";\
             exec bash -i;"
         # If flatpak install and script running from host
         # and gnome terminal is found
         elif [ ${INSTALL_TYPE} = "flatpak" ] && \
              [ $(which gnome-terminal) ]; then
              export WINEPREFIX=${WINEPREFIX_SUBDIR};
              echo "export WINEPREFIX=\"${WINEPREFIX_SUBDIR}\";"
              echo "I am a flatpak script, running from host"
              gnome-terminal --wait -- flatpak  \
              --command=bash run ${FLATPAK_NAME} \
              -c "cd \"${WINEPREFIX_SUBDIR}\"; exec bash -i"
         # Else it is a host install and gnome-terminal is found
         elif [ ${INSTALL_TYPE} = "system" ] && \
              [ $(which gnome-terminal) ]; then
              echo "I am a host based script, running from host"
              export WINEPREFIX="${WINEPREFIX_SUBDIR}";
              echo "export WINEPREFIX=${WINEPREFIX_SUBDIR};"
              gnome-terminal --wait -- bash -c \
              "cd \"${WINEPREFIX}\"; exec bash -i"
         # gnome terminal is not found
         else
              echo "gnome-terminal is not installed on the host"
              zenity --title "${SELECTION}" \
                     --width=500 --height=30 --info  \
                     --text "This feature requires \"gnome-terminal\""
         fi            
         # Return to Game window
         GameFunction
                     
  elif [ "${SELECTION}" = "Rename..." ]; then
         NEWPROGNAME=$(zenity --title "Rename shortcut" \
                           --text "Enter a name for your shortcut" \
                           --entry-text "${PROGNAME}"  \
                           --entry)
       
         if [ -z "${NEWPROGNAME}" ]; then #if no name is given use filename
              #zenity --info --title="Shortcut... " --text="no Change"        
              # Return to Game window
              GameFunction
         fi
         
         export WINEVER=$(${WINE_CMD} --version|cut -f1 -d " ")
         ${DESKTOP_FILE_EDIT} --set-name="$NEWPROGNAME ($WINEVER)" \
                              ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.desktop
         
         SED_SEARCH="^export PROGNAME=.*"
         SED_REPLACE="export PROGNAME=\"${NEWPROGNAME} (${WINEVER})\""
         sed -E "s/${SED_SEARCH}/${SED_REPLACE}/" \
            -i ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh
         
         ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}
         
         #zenity --info --title="$EXE_NOEXE.desktop" \
         #       --text="Shortcut renamed sucessfuly: $appname"
         
         # Required for instant change in the GameWindow
         export PROGNAME="$NEWPROGNAME ($WINEVER)"
         # Return to Game window
         GameFunction

  elif [ "${SELECTION}" = "Change Icon..." ]; then
  
         # Ask user to select an image icon
         GET_ICON=$(zenity --file-selection \
                           --file-filter=""*.png" "*.jpg" "*.svg"")
         
         # If he/she cancels, why prompt?
         if [ -z ${GET_ICON} ]; then #if no icon is selected
              #zenity --info --title="Icon... " --text="no Change"        
              echo "No icon selected"
              # Return to Game window
              GameFunction
         fi
         
         # Now that we have included desktop-file-edit in flatpak, not needed
         if [ $(flatpak-spawn echo 0 2>/dev/null) ]; then
             export DESKTOP_FILE_EDIT="flatpak-spawn --host desktop-file-edit"
         else 
             export DESKTOP_FILE_EDIT="$(which desktop-file-edit)"
         fi
         
         # set icon to the user selected one
         ${DESKTOP_FILE_EDIT} --set-icon="${GET_ICON}" \
                                         ${WINEPREFIX_SUBDIR}/$EXE_NOEXE.desktop 
         
         # Update .desktop database
         ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}
         
         # Inform user
         zenity --info --no-wrap --title="$EXE_NOEXE.desktop" \
               --text="Icon Changed sucessfuly: ${GET_ICON}"
     
   # Change Runtime Icon as soon as it is changed
         # Main Window is going to use ICON variable.
         export ICON="${GET_ICON}"

         # Return to Game window
         GameFunction

  # Ask user to where to save the backup
      elif [ "${SELECTION}" = "Backup..." ]; then
         echo "${PREFIX}"
         PREFIX_SIZE=$(du -sh ${PREFIX}|cut -f1)
         echo "${PREFIX_SIZE}"
         # Ask Before Backing up Default prefix
         # Ask Backup filename
         DATE=$(date +%F_%H%M)
         # Set name based on flatpak or system
         if [ ${INSTALL_TYPE} = "flatpak" ]; then
              BKPFNAME="${BACKUPNAME}-${FLATPAK_NAME}-${DATE}.winezgui.tgz"
         else
              BKPFNAME="${BACKUPNAME}-system-${DATE}.winezgui.tgz"
         fi
         
         BACKUP_FILE=$( zenity                    \
           --title="Backup ${BACKUPNAME} Prefix!" \
           --width=500 --height=30                \
           --text="Size: ${PREFIX_SIZE}\nName:"   \
           --entry-text="${BKPFNAME}"             \
           --entry)
         
         # if backup file is empty / cancel clicked
         if [ -z "${BACKUP_FILE}" ]; then
             GameFunction
         fi
         
         # Select Backup Target Directory
         Z_TITLE="Choose Backup Directory for ${BACKUP_FILE}!"
         TARGET_DIR=$(zenity  --file-selection --title="${Z_TITLE}" --directory)
         if [ -z "$TARGET_DIR" ]; then
             GameFunction
         fi

         # required extension is .winezgui.tgz, if not found add it
         if ! [[ "${BACKUP_FILE}" == *".winezgui.tgz" ]]; then
               BACKUP_FILE="$(echo ${BACKUP_FILE}.winezgui.tgz)"
         fi
        
         if [ ! -w "${TARGET_DIR}" ]; then 
              echo "${TARGET_DIR} not writable"
              zenity --error --no-wrap --title="Backup Error!" \
                     --text "${TARGET_DIR} not writable\nAborting Backup!"
         else
              cd "${PREFIX}"
              echo "creating ${BACKUP_FILE} backup..."
              
              #Preprocess
              PROCESS_FILES_FOR_BACKUP
              
              # Create Backup archive and restore changes as soon as tar is done
              (tar -zcvf "${BACKUP_FILE}" "./${BACKUPNAME}" 2>/dev/null) | \
                   zenity --progress --pulsate --auto-close        \
                          --title="Creating ${BACKUPNAME} backup!" \
                          --width=240 --text="${BACKUP_FILE}..."
                   echo "${BACKUP_FILE} created successfully"

              # Restore changed values after backup
              echo "Restoring Registry and Info files"
              PROCESS_FILES_FOR_BACKUP "restore"


              # Report Size also
              BACKUP_SIZE=$(du -sh "${BACKUP_FILE}"|cut -f1)
              # Backup Sucess Message
              MSG=("<b>Prefix: </b> ${BACKUPNAME}\n")
              MSG+="<b>Filename:</b> ${BACKUP_FILE}"
              MSG+="\n<b>Location:</b> ${TARGET_DIR}\n"
              MSG+="<b>Backup Size:</b> ${BACKUP_SIZE}"
              MSG+="\n\n<b>Info: </b>Only wine prefix is backed up!"

              mv -v "${BACKUP_FILE}" "${TARGET_DIR}"   && \
              zenity --no-wrap \
                     --info     \
                     --title="${BACKUP_FILE} Prefix Backup!" \
                     --text="${MSG[@]}"

         fi # ! -w 
         # Return to Game window after backup or target directory write error
         GameFunction

  elif [ "${SELECTION}" = "Delete..." ]; then
         
         # Delete Shortcuts and Prefix Directory
         rm -rfv ${DESKTOPDIR}/$EXE_NOEXE.desktop
         rm -rf  ${WINEPREFIX_SUBDIR}; 
         # Delete all broken links which points to winezgui game prefix
         find ${DESKTOPDIR} -xtype l -delete
         ${UPDATE_ICON_CACHE}
         ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}
         
  elif [ "${SELECTION}" = "About..." ]; then
         echo "Executing About..."
         # Text is more, so we need to format it, with sed in pango markup
         ZCMD="zenity --info --no-wrap --text"
         $ZCMD "$(cat ${WINEPREFIX_SUBDIR}/info.txt | \
                  sed -E "s/^(.*: )/<tt><b>\1<\/b><\/tt>/g" | \
                  sed -E "s/^(.*)$/<small>\1<\/small>/g")"
         GameFunction

  elif [ "${SELECTION}" = "Launch..." ]; then
         # Test if exe exists?
         TEST_FILE_EXIST_IF_NOT_ASK_TO_SELECT

         export base=$(basename "$EXE_FILE")
         export dire=$(dirname "$EXE_FILE")
         
         cd "$dire"
         ${WINE_CMD} "$base"
         exit 0; # Exit after execution of exe
  fi
  }

# Start WineZGUI when no argument is supplied
if [ $# -eq 0 ]
     then
     echo "Info: Launching WineZGUI"
     GameFunction 
fi 

' >> "${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh"
###############################################
chmod +x "${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh"

# Generate desktop entry specifications to be added to the application launcher.
#-------------------------------------------------------------------------------
echo "
[Desktop Entry]
Exec=bash -c \"'${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh'\"
Name=$PROGNAME
#Path=$EXE_PATH
Type=Application
Categories=$appCategory;
Icon=${ICON}
Keywords=winezgui; game; ${EXE_NOEXE};
NoDisplay=false
StartupNotify=true
Terminal=false
" > "${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.desktop"

    # link the launcher  file to a shortcut on applications menu.
    echo "--------------"
    echo "mkdir 3 desktopdir"
    echo "mkdir -p ${DESKTOPDIR}" 
    mkdir -p "${DESKTOPDIR}" 
    
    ln -sfv ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.desktop \
            ${DESKTOPDIR}/"$EXE_NOEXE".desktop
    # Test if the app link was created sucessfully on applications menu 
    if [ $? -eq 0 ]; then
        ${UPDATE_ICON_CACHE}
        ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}
        echo "Shortcut created sucessfuly Name: ${PROGNAME}\nExe: ${EXE_NAME}"
    fi

else 

# If no application was submited, show this message.
  echo Please, submit a windows application file. 
  echo Usage: $0 path/to/app.exe 
  zenity --info --title="Select an EXE to create shortcut" \
         --text="in Filemanager, right-click on an exe and select this!"

fi
