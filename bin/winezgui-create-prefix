#!/usr/bin/env bash
# ============================================================================ #
# This script will create a shortcut on applications menu for windows programs 
# installed with wine.
# Autor: Thiago silva
# Contact: thiagos.dasilva@gmail.com
# URL: https://github.com/thiggy01/wine-create-shortcut
# Updated by Mohammed Asif Ali Rizvan for WineZGUI
# URL: https://github.com/fastrizwaan/WineZGUI
# ============================================================================ #
export APPNAME=WineZGUI
export WINEVER=$(wine --version|cut -f1 -d ' ')
export APPLICATIONSDIR=$(realpath -m ~/.local/share/applications)
export DESKTOPDIR=${APPLICATIONSDIR}/winezgui
export WINEZPREFIX="$(realpath -m ~/.local/share/winezgui)"
export PREFIXDIR=${WINEZPREFIX}
export UPDATE_ICON_CACHE="gtk-update-icon-cache"
export UPDATE_DESKTOP_DATABASE="update-desktop-database"
export WINE_CMD=$(which wine)
export WINETRICKS_CMD=$(which winetricks)
export TEMPDIR="${WINEZPREFIX}/tmp"
export EXIFTOOL=$(which exiftool)


# Check if an application argument was submited.
if [[ $(file --mime-type -b "$1") = application/* ]]; then

    # Get the full path, the name and directory name of submited application file.
    EXE_FILE=$(realpath -m "$1")
    EXE_NAME=$(basename "$EXE_FILE")
    EXE_PATH=$(dirname  "$EXE_FILE")
    EXE_NOSP=$(echo $EXE_NAME|tr ' ' '_');
    EXE_NOEXE=$(echo $EXE_NOSP|sed "s/\.exe//g");
    WINEPREFIX_SUBDIR="${PREFIXDIR}/$EXE_NOEXE"    
#    export WINEPREFIX="${PREFIXDIR}/$EXE_NOEXE"    
  # application shortcut folder
    mkdir -p  "${WINEPREFIX_SUBDIR}"
    mkdir -p  "${DESKTOPDIR}"
    # Function to verify if required program is installed.
    VerInst () {
                if [ $? -eq 127 ]; then
                    echo "$1 package is not installed."
                    echo "Install it before running this script."
                    echo "Aborting."
                    exit 1
                fi
    }
    
    # Extract icon and convert it to several png files of diferent quality, 
     mkdir -vp ${TEMPDIR}
     cd ${TEMPDIR}
     wrestool -x -t 14 "$EXE_FILE" > "${TEMPDIR}/$EXE_NOEXE.ico" 2> /dev/null
     VerInst icoutils

    
    icotool -x "${TEMPDIR}/$EXE_NOEXE.ico" 2>/dev/null
    echo icotool: extracting png from ico:$EXE_NOEXE.ico
    ls -R "${TEMPDIR}/" 
    
    # Select the best png image file.\
    cp $(ls -S -1 ${TEMPDIR}/${EXE_NOEXE}*.png  | head -n 1) \
       ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.icon.png && \
    

    echo rm -rf $TEMPDIR ; #remove tmp directory after copying icon png    
    
    # Get the app category and shortcut name inputs from the user.
    #appCategory=$(zenity --title "wine-create-shortcut" --height=450 --list \
    # --radiolist --column " " --column "Categories" 0 AudioVideo 0 Audio 0 Video 0 \
    # Development 0 Education TRUE Game 0 Graphics 0 Network 0 Office 0 Settings 0 \
    # System 0 Utility  --text "Select a Category:" 2> /dev/null)
    
    appCategory="Game"

    VerInst zenity
    
    # Create Desktop Shortcut
    # Ask for Name
    #PROGNAME=$(zenity --title "Create-Desktop-Shortcut" --text "Enter a name or Click OK to use $EXE_NOEXE name" --entry)
    # Automatically set name, read from pe file, if not found use exe name
    
    PROGNAME=$(${EXIFTOOL} "${EXE_FILE}"|grep -i 'product name'|cut -f2 -d ':'|sed 's/^ //')
    
    # if language is not english set exe name
    if [ $(echo $PROGNAME | grep -Ev [a-zA-Z] ) ]; then
         unset PROGNAME
    fi
    if [ ! "$PROGNAME" ]; #if no name is given, then use exe filename
       then         
       PROGNAME=$(echo "$EXE_NOEXE (${WINEVER})"|sed 's/\.exe//g');     
    else 
       PROGNAME=$(echo "$PROGNAME (${WINEVER})");   
    fi


# Create Launch Script for the provided EXE file
# ------------------------------------------------
# need variables from this script
echo "
#!/bin/bash
export PROGNAME=\"${PROGNAME}\"
export PREFIX=\"${WINEZPREFIX}\"
export BACKUPNAME=\"${EXE_NOEXE}\"
export EXE_FILE=\"${EXE_FILE}\"
export EXE_NAME=\"${EXE_NAME}\"
export EXE_PATH=\"${EXE_PATH}\"
export EXE_NOSP=\"${EXE_NOSP}\"
export EXE_NOEXE=\"${EXE_NOEXE}\"
export WINEPREFIX_SUBDIR=\"${WINEPREFIX_SUBDIR}\"
export WINEPREFIX=\"${WINEPREFIX_SUBDIR}\"
export APPLICATIONSDIR=\"$APPLICATIONSDIR\"
export DESKTOPDIR=\"\${APPLICATIONSDIR}/winezgui\"
export UPDATE_DESKTOP_DATABASE=\"${UPDATE_DESKTOP_DATABASE}\"
" > "${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh"

# Append rest 
echo '
export WINEARCH=win64
export WINEDLLOVERRIDES="mscoree,mshtml="
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/app/lib:/app/lib32:/app/lib64:/app/lib/i386-linux-gnu:/app/lib/wine:/app/lib64/wine:/app/$NAME:$(pwd)
export DESKTOP_FILE_EDIT="desktop-file-edit"

    # If io.github.WineZGUI is installed, then most probably we are using flatpak version
    # and we need to assign flatpak wine commands to created wine shortcuts
    if [ $(flatpak --command=echo run io.github.WineZGUI 0 2>/dev/null) ]; then
        export WINE_CMD="flatpak --filesystem=host run --command=wine io.github.WineZGUI"
        export WINETRICKS_CMD="flatpak --filesystem=host --command=winetricks run io.github.WineZGUI"
        export WINECFG_CMD="flatpak --filesystem=host --command=wine run io.github.WineZGUI winecfg"
        export WINEEXPLORER_CMD="flatpak --filesystem=host --command=wine  run io.github.WineZGUI explorer"
        #export DESKTOP_FILE_EDIT="flatpak-spawn --host desktop-file-edit"
		export WINEBOOT_CMD="flatpak --filesystem=host --command=wineboot run io.github.WineZGUI -u"
    else # We are using non flatpak install
        export WINE_CMD="$(which wine)"
        export WINETRICKS_CMD="$(which winetricks)"
        export WINECFG_CMD="${WINE_CMD} winecfg"
        export WINEEXPLORER_CMD="${WINE_CMD} explorer"
		export WINEBOOT_CMD="$(which wineboot) -u"
    fi

  # Sandboxify by rm links to ~/Documents ~/Downloads ~/Videos etc.
  if [ ! -f ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.symlinks-removed  ]; then

       # Create Prefix and delete base system linked directory links       
        WINEDLLOVERRIDES="mscoree,mshtml=" \
        WINEPREFIX=${WINEPREFIX_SUBDIR} \
        ${WINEBOOT_CMD} && \

       rm ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/Desktop   
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/Downloads
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/"My Documents"
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/"My Music"
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/"My Pictures"
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/"My Videos"
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/Templates

       #Create normal folders for the deleted symlinks
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/Desktop
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/Downloads
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/"My Documents"
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/"My Music"
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/"My Pictures"
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/"My Videos" 
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/$USER/Templates

       # Create file to check later
        touch ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.symlinks-removed
  fi



# If asked to run an exe by winezgui using launch option
  if [ "$1" = "launch" ]; then
       export EXE_FILE_NAME=$(basename "$EXE_FILE")
       export EXE_FILE_DIR=$(dirname "$EXE_FILE")
       cd "$EXE_FILE_DIR"
       ${WINE_CMD}  "$EXE_FILE_NAME"
       exit 0;
  fi



  # EXE handling by providing dialog
  SELECTION=$(zenity --title "$EXE_NOSP"       \
                   --width=340 --height=380             \
                   --list                               \
                   --radiolist --column " "             \
                   --column "Action"                    \
                       TRUE "Launch..."            \
                       0    "Winetricks GUI..."         \
                       0    "Winetricks CLI..."         \
                       0    "Launch Winecfg..."         \
                       0    "Open Explorer..."          \
                       0    "Open Shell..."             \
                       0    "Rename..."                 \
                       0    "Change Icon..."            \
                       0    "Backup..."                 \
                       0    "Delete Prefix..." \
                   --text "Select Action..." )

  # If Cancel button is pressed, exit
  [[ -z "${SELECTION}" ]] && exit 1

  # If Winetricks is selected
  if [ "${SELECTION}" = "Winetricks GUI..." ]; then  
       $WINETRICKS_CMD --gui

    # Provide Command Line to enter multiple Dependencies
    elif [ "${SELECTION}" = "Winetricks CLI..." ]; then
           VERB_LIST="xact xinput xna31 dotnet48 \
                      vcrun2003 vcrun2005        \
                      vcrun2008 vcrun2012        \
                      vcrun2015 dxvk faudio      \
                      quartz corefonts"
           MESSAGE="Change and Press Enter to install these using Winetricks:"
           TITLE_TEXT="Winetricks CLI - Paste your Dlls list"
           # Remove multiple spaces from variable           
           VERB_LIST=$(echo ${VERB_LIST}|sed "s/  / /g")
           VERBS=$(                     \
           zenity                       \
           --title "${TITLE_TEXT}"      \
           --width=800 --height=30      \
           --text  "${MESSAGE}"         \
           --entry-text "${VERB_LIST}"  \
           --entry)
 
          if [ -z "${VERBS}" ]; then #if no dlls are given
               #go back to Main function
      			   echo "not given verbs=$VERBS"
	         
          else   
               VERBS=(${VERBS}) ; #convert string to array
			         echo "Given Verbs $VERBS"
                    
               # Show Progress Percentage by getting number of items
               NO_OF_ITEMS=${#VERBS[*]}
               NO_OF_ITEMS=$(expr ${NO_OF_ITEMS} + 1) ;# add +1 for for progress

               PERCENTAGE=$(expr 100 / ${NO_OF_ITEMS})
               
               # Convert number to string
               PROGRESS=$(echo ${PERCENTAGE})  
               
               echo "Info: Selected winetricks verbs: ${VERBS[*]}"
               
               # Show Progress using zenity
               ( for i in ${VERBS[*]}; do

               # Show Progress Percentage and Info
               echo ${PROGRESS}
               echo "# Installing ${i}..."
               
               # Install winetricks verbs and put output to logs
               ${WINETRICKS_CMD} --force --unattended  ${i}
               
               PROGRESS=$(expr ${PROGRESS} + ${PERCENTAGE})
               done
               echo 100
               echo "# Done!"
               ) |zenity                                                     \
                 --width=440                                                 \
                 --title                                                     \
                 "Please Wait... Good things take time!"                     \
                 --progress                                                  \
                 --auto-kill
          fi   
          # After winetricks cli, return to main menu
          # MainFunction need to implement
          
  # PSEUDO CODE WORK HERE
  # Download mf-install from github (create fastrizwan mf-install)
  elif [ "${SELECTION}" = "Install Media Foundation Libraries" ]; then
#  wget github.com/fastrizwaan/mf-install/release/mf-install.tar.gz
#  tar -hxvf mf-install.tar.gz
#  cd mf-install
#  WINEPREFIX=${WINEZPREFIX-WHATEVER} mf-install
#  AND FOR FLATPAK?
#  flatpak run --command=/app/mf-install/mf-install.sh org.winehq.flatpak-wine70 
   echo "fix me"
   
  elif [ "${SELECTION}" = "Launch Winecfg..." ]; then
         ${WINECFG_CMD}
    
  elif [ "${SELECTION}" = "Open Explorer..." ]; then
         ${WINEEXPLORER_CMD}
 
  elif [ "${SELECTION}" = "Open Shell..." ]; then
          
          # Prompt user to install gnome-terminal if not found
          if [ $(command -v gnome-termina) ]; then 
               zenity --title "${SELECTION}" \
                      --width=500 --height=30 --info \
                      --text "This feature requires \"gnome-terminal\""
               # MainFunction
          fi 
             
         #  using flatpak install and script is running from host
         if [ "${WINE_CMD}" = "/app/bin/wine" ] && \
            [ $(flatpak --command=echo run io.github.WineZGUI 0 2>/dev/null) ]; then
              export WINEPREFIX=${WINEPREFIX_SUBDIR};
              echo "I am in sandbox and I am confused ;-)"
gnome-terminal --wait -- flatpak --filesystem=host --command=bash run io.github.WineZGUI -c "export WINEPREFIX=${WINEPREFIX_SUBDIR}; cd $WINEPREFIX; exec bash -i"
        elif [ "${WINE_CMD}" = "/app/bin/wine" ] && \
              [ $(flatpak-spawn --host echo 0 2>/dev/null) ]; then
         echo "I am in /app/bin/wine and flatpak-spawn command runs"
         echo "WINE_CMD = $WINE_CMD"
         echo "flatpak-spawn --command = $(flatpak-spawn --host echo 0)"
flatpak-spawn --host gnome-terminal --wait -- flatpak run --command=bash io.github.WineZGUI -c  "bash -c \"export WINEPREFIX=${WINEPREFIX_SUBDIR}; cd $WINEPREFIX; exec bash -i\""

         elif [ "${WINE_CMD}" != "/app/bin/wine" ] && \
              [ $(flatpak --command=echo run io.github.WineZGUI 0 2>/dev/null) ]; then
         echo "I am in not app/bin/wine and flatpak command runs"
         echo "WINE_CMD = $WINE_CMD"
         echo "flatpak --command = $(flatpak --command=echo run io.github.WineZGUI 0)"
gnome-terminal --wait -- flatpak --filesystem=host --command=bash run io.github.WineZGUI -c "export WINEPREFIX=${WINEPREFIX_SUBDIR}; cd $WINEPREFIX; exec bash -i"
        else
            echo "WINECMD $WINE_CMD"
            echo "I am in else"
             gnome-terminal --wait -- bash -c  "bash -c \"export WINEPREFIX=${WINEPREFIX_SUBDIR}; cd $WINEPREFIX; exec bash -i\""
         fi

  elif [ "${SELECTION}" = "Rename..." ]; then
         PROGNAME=$(zenity --title "Rename shortcut" --text "Enter a name for your shortcut" --entry)
       
         if [ ! "${PROGNAME}" ]; then #if no name is given use filename
              zenity --info --title="Shortcut... " --text="no Change"        
              exit;
         fi
         
         export WINEVER=$(${WINE_CMD} --version|cut -f1 -d " ")
	     ${DESKTOP_FILE_EDIT} --set-name="$PROGNAME ($WINEVER)" ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.desktop
         ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}
         zenity --info --title="$EXE_NOEXE.desktop" --text="Shortcut renamed sucessfuly: $appname"

  elif [ "${SELECTION}" = "Change Icon..." ]; then
         get_icon=$(zenity --file-selection --file-filter=""*.png" "*.jpg" "*.svg"")
        if [ ! $get_icon ]; then #if no icon is selected
           zenity --info --title="Icon... " --text="no Change"        
           exit;
        fi
        if [ $(flatpak-spawn echo 0 2>/dev/null) ]; then
             export DESKTOP_FILE_EDIT="flatpak-spawn --host desktop-file-edit"
         else 
             export DESKTOP_FILE_EDIT="$(which desktop-file-edit)"
         fi
        ${DESKTOP_FILE_EDIT} --set-icon="$get_icon" ${WINEPREFIX_SUBDIR}/$EXE_NOEXE.desktop 
        ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}
        zenity --info --title="$EXE_NOEXE.desktop" --text="Icon Changed sucessfuly: $get_icon"

  # Ask user to where to save the backup
  elif [ "${SELECTION}" = "Backup..." ]; then
         DATE=$(date +%F_%H%M)
         TARGET_DIR=$(zenity  --file-selection --title="Choose Backup  Directory"  --directory)
         if [ -z "$TARGET_DIR" ]; then
              exit 0;
         fi
         
         # Backup
         cd "${PREFIX}"
         echo "creating ${BACKUPNAME}-${DATE}.winezgui (tar.gz) backup"
         (tar -zcvf "${BACKUPNAME}-${DATE}.winezgui.tgz" "./${BACKUPNAME}")| \
		 zenity --progress   --title="Creating ${BACKUPNAME} backup!" \
		 --text="${BACKUPNAME}-${DATE}.winezgui.tgz..." --pulsate --auto-kill
			
		 mv -v "${BACKUPNAME}-${DATE}.winezgui.tgz" "${TARGET_DIR}"   && \
         zenity --info --title="Prefix Backup!" --text="Prefix: ${BACKUPNAME}\nFilename: ${BACKUPNAME}-${DATE}.winezgui.tgz\nLocation:$ {TARGET_DIR}\n\n Info: Only wine prefix is backed up!"


  elif [ "${SELECTION}" = "Delete Prefix..." ]; then
         
         rm -rfv ${DESKTOPDIR}/$EXE_NOEXE.desktop
         rm -rf  ${WINEPREFIX_SUBDIR}; 
         
         ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}

  elif [ "${SELECTION}" = "Launch..." ]; then
         export base=$(basename "$EXE_FILE")
         export dire=$(dirname "$EXE_FILE")
         
         cd "$dire"
         ${WINE_CMD} "$base"
  fi
' >> "${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh"
###############################################
chmod +x "${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh"

# Generate desktop entry specifications to be added to the application launcher.
#--------------------------------------------------------------------------------
echo "
[Desktop Entry]
Exec=bash -c ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh
Name=$PROGNAME
Path=$EXE_PATH
Type=Application
Categories=$appCategory;
Icon=${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.icon.png
Keywords=winezgui; game; ${EXE_NOEXE};
NoDisplay=false
StartupNotify=true
Terminal=false
" > "${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.desktop"

    # link the launcher  file to a shortcut on applications menu.
    ln -sfv ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.desktop ${DESKTOPDIR}/"$EXE_NOEXE".desktop
    # Test if the app link was created sucessfully on applications menu 
    if [ $? -eq 0 ]; then
        ${UPDATE_ICON_CACHE}
        ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}
        echo "Shortcut created sucessfuly Name: ${PROGNAME}\nExe: ${EXE_NAME}"
      zenity --info      --title="Shortcut Created!"\
             --width 300 --text="Name: ${PROGNAME}\nExe: ${EXE_NAME}"
    fi

else 

# If no application was submited, show this message.
  echo Please, submit a windows application file. 
  echo Usage: $0 path/to/app.exe 
  zenity --info --title="Select an EXE to create shortcut" --text="in Filemanager, right-click on an exe and select this!"

fi
