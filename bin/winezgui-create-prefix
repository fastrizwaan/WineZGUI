#!/usr/bin/env bash
# ============================================================================ #
# This script will create a shortcut on applications menu for windows programs 
# installed with wine.
# Autor: Thiago silva
# Contact: thiagos.dasilva@gmail.com
# URL: https://github.com/thiggy01/wine-create-shortcut
# Updated by Mohammed Asif Ali Rizvan for wine bottle
# URL: https://github.com/fastrizwaan/flatpak-wine
# ============================================================================ #
export APPNAME=WineZGUI
export WINEVER=$(wine --version|cut -f1 -d ' ')
export APPLICATIONSDIR=$(realpath -m ~/.local/share/applications)
export DESKTOPDIR=${APPLICATIONSDIR}/winezgui
export WINEZPREFIX="$(realpath -m ~/.local/share/winezgui)"
export PREFIXDIR=${WINEZPREFIX}
export UPDATE_ICON_CACHE="gtk-update-icon-cache"
export UPDATE_DESKTOP_DATABASE="update-desktop-database"
export WINE_CMD=$(which wine)
export WINETRICKS_CMD=$(which winetricks)
export TEMPDIR="${WINEZPREFIX}/tmp"



# Check if an application argument was submited.
if [[ $(file --mime-type -b "$1") = application/* ]]; then

    # Get the full path, the name and directory name of submited application file.
    EXE_FILE=$(realpath -m "$1")
    EXE_NAME=$(basename "$EXE_FILE")
    EXE_PATH=$(dirname  "$EXE_FILE")
    EXE_NOSP=$(echo $EXE_NAME|tr ' ' '_');
    EXE_NOEXE=$(echo $EXE_NOSP|sed "s/\.exe//g");
    WINEPREFIX_SUBDIR="${PREFIXDIR}/$EXE_NOEXE"    
#    export WINEPREFIX="${PREFIXDIR}/$EXE_NOEXE"    
  # application shortcut folder
    mkdir -p  "${WINEPREFIX_SUBDIR}"
    mkdir -p  "${DESKTOPDIR}"
    # Function to verify if required program is installed.
    VerInst () {
                if [ $? -eq 127 ]; then
                    echo "$1 package is not installed."
                    echo "Install it before running this script."
                    echo "Aborting."
                    exit 1
                fi
    }
    
    # Extract icon and convert it to several png files of diferent quality, 
     mkdir -vp ${TEMPDIR}
     cd ${TEMPDIR}
     wrestool -x -t 14 "$EXE_FILE" > "${TEMPDIR}/$EXE_NOEXE.ico" 2> /dev/null
     VerInst icoutils

    
    icotool -x "${TEMPDIR}/$EXE_NOEXE.ico" 2>/dev/null
    echo icotool: extracting png from ico:$EXE_NOEXE.ico
    ls -R "${TEMPDIR}/" 
    
    # Select the best png image file.\
    cp $(ls -S -1 ${TEMPDIR}/${EXE_NOEXE}*.png  | head -n 1) \
       ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.icon.png && \
    

    echo rm -rf $TEMPDIR ; #remove tmp directory after copying icon png    
    
    # Get the app category and shortcut name inputs from the user.
    appCategory=$(zenity --title "wine-create-shortcut" --height=450 --list \
 --radiolist --column " " --column "Categories" 0 AudioVideo 0 Audio 0 Video 0 \
 Development 0 Education TRUE Game 0 Graphics 0 Network 0 Office 0 Settings 0 \
 System 0 Utility  --text "Select a Category:" 2> /dev/null)


    VerInst zenity
    
    # Create Desktop Shortcut
    # Ask for Name
    PROGNAME=$(zenity --title "Create-Desktop-Shortcut" --text "Enter a name or Click OK to use $EXE_NOEXE name" --entry)

    if [ ! "$PROGNAME" ]; #if no name is given use exe filename
       then         
       PROGNAME=$(echo "$EXE_NOEXE (${WINEVER})"|sed 's/\.exe//g');     
    else 
       PROGNAME=$(echo "$PROGNAME (${WINEVER})");   
    fi


# Create Launch Script for the provided EXE file
###############################################
cat << EOF > ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh
#!/bin/bash
export PREFIX=${WINEPREFIX_SUBDIR}
export WINEPREFIX=${WINEPREFIX_SUBDIR}
export WINEPREFIX_SUBDIR=${WINEPREFIX}
export WINEARCH=win64
export WINEDLLOVERRIDES="mscoree,mshtml="
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/app/lib:/app/lib32:/app/lib64:/app/lib/i386-linux-gnu:/app/lib/wine:/app/lib64/wine:/app/\$NAME:\$(pwd)
export DESKTOP_FILE_EDIT=\$(which desktop-file-edit)

    # If io.github.WineZGUI is installed, then most probably we are using flatpak version
    # and we need to assign flatpak wine commands to created wine shortcuts
    if [ \$(flatpak --command=echo run io.github.WineZGUI 0) ]; then
        export WINE_CMD="flatpak --filesystem=host run --command=wine io.github.WineZGUI"
        export WINETRICKS_CMD="flatpak --filesystem=host --command=winetricks run io.github.WineZGUI"
        export WINECFG_CMD="flatpak --filesystem=host --command=wine run io.github.WineZGUI winecfg"
        export WINEEXPLORER_CMD="flatpak --filesystem=host --command=wine  run io.github.WineZGUI explorer"
        export TERMINAL_CMD="gnome-terminal -- flatpak --filesystem=host --command=bash run
         io.github.WineZGUI"
        export DESKTOP_FILE_EDIT="flatpak-spawn --host desktop-file-edit"
    else # We are using non flatpak install
        export WINE_CMD="\$(which wine)"
        export WINETRICKS_CMD="\$(which winetricks)"
        export WINECFG_CMD="\${WINE_CMD} winecfg"
        export WINEEXPLORER_CMD="\${WINE_CMD} explorer"
        export TERMINAL_CMD="gnome-terminal bash"
    fi

## Debug
# echo ${PREFIXDIR}/$EXE_NOSP/$EXE_NOSP.symlinks-removed
# ls   ${PREFIXDIR}/$EXE_NOSP/$EXE_NOSP.symlinks-removed
# echo 'testing empty'
## Debug

  # Sandboxify by rm links to ~/Documents ~/Downloads ~/Videos etc.
  if [ ! -f ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.symlinks-removed  ]; then

#       # Create Prefix and delete base system linked directory links       
#       WINEDLLOVERRIDES="mscoree,mshtml=" \
#       WINEPREFIX=${WINEPREFIX_SUBDIR} \
#       wineboot -u && \ 

       rm ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/Desktop   
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/Downloads
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/'My Documents'
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/'My Music'
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/'My Pictures'
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/'My Videos' 
       rm ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/Templates

       #Create normal folders for the deleted symlinks
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/Desktop
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/Downloads
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/'My Documents'
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/'My Music'
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/'My Pictures'
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/'My Videos' 
       mkdir -p ${WINEPREFIX_SUBDIR}/drive_c/users/\$USER/Templates

       # Create file to check later
        touch ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.symlinks-removed
  fi



# If asked to run an exe by winezgui using launch option
  if [ "\$1" = "launch" ]; then
       export EXE_FILE_NAME=\$(basename "$EXE_FILE")
       export EXE_FILE_DIR=\$(dirname "$EXE_FILE")
       cd "\$EXE_FILE_DIR"
       \${WINE_CMD}  "\$EXE_FILE_NAME"
       exit 0;
  fi



  # EXE handling by providing dialog
  choice=\$(zenity --title "$EXE_NOSP: Choose!" \
                   --width=340 --height=500 \
                   --list \
                   --radiolist --column " " \
                   --column "Action" \
                       0    "Install Custom DLLs..." \
                       TRUE "Launch $EXE_NOEXE" \
                       0    "Run Winetricks..." \
                       0    "Install Media Foundation Libraries" \
                       0    "Launch Winecfg..." \
                       0    "Open Explorer++..." \
                       0    "Open Shell..." \
                       0    "Rename..." \
                       0    "Change Icon..." \
                       0    "Backup..." \
                       0    "Delete Prefix: $EXE_NOEXE" \
                   --text "Select Action..." )

  # If Cancel button is pressed, exit
  [[ -z "\$choice" ]] && exit 1

  # If Winetricks is selected
  if [ "\$choice" = "Run Winetricks..." ]; then  
       \$WINETRICKS_CMD --gui

  # Install Custom dependencies for Wine
  elif [ "\$choice" = "Install Custom DLLs..." ]; then
         DEPS=\$(zenity --title "Install custom dlls" \
                        --text  "paste winetricks (e.g. dv9k dxvk xna31 d3dx9 xinput faudio)" \
                        --entry)
         #If no DLLs are given, install default ones
         if [ -z "\$DEPS" ]; then         
              DEPS=(xact xact_x64 xinput xna31 vcrun2003 vcrun2005 vcrun2008 vcrun2010 vcrun2012 vcrun2015 vcrun2019 d3dx9 d9vk faudio quartz dotnet48)
         else
              DEPS=( \$DEPS ) ; #convert string to array
         fi

        # Show Progress
        size=\${#DEPS[*]}
        size=\$(expr \$size + 1) ;# add +1 for progress
        step=\$(expr 100 / \$size)
        step=\$(expr \$step + 1)
        prog=\$(echo \$step)

        ( for i in \${DEPS[*]};
          do
            echo \$prog
            echo "# Installing \$i..."
            \${WINETRICKS_CMD} --force --unattended \$i
              prog=\$(expr \$prog + \$step)
          done
          echo 100
          echo "# Done!"
        ) | zenity --width=340 --title "$EXE_NOSP: Installing Custom DLLs with Winetricks" --progress --auto-kill

  # PSEUDO CODE WORK HERE
  # Download mf-install from github (create fastrizwan's mf-install)
  elif [ "\$choice" = "Install Media Foundation Libraries" ]; then
#  wget github.com/fastrizwaan/mf-install/release/mf-install.tar.gz
#  tar -hxvf mf-install.tar.gz
#  cd mf-install
#  WINEPREFIX=${WINEZPREFIX-WHATEVER} mf-install
#  AND FOR FLATPAK?
#  flatpak run --command=/app/mf-install/mf-install.sh org.winehq.flatpak-wine70 
   echo "fix me"
   
  elif [ "\$choice" = "Launch Winecfg..." ]; then
         \${WINECFG_CMD}
    
  elif [ "\$choice" = "Open Explorer++..." ]; then
  #wine /app/explorer++/Explorer++.exe
         \${WINEEXPLORER_CMD}
  elif [ "\$choice" = "Open Shell..." ]; then   
         \${TERMINAL_CMD}
 
  elif [ "\$choice" = "Rename..." ]; then
         PROGNAME=\$(zenity --title "Rename shortcut" --text "Enter a name for your shortcut" --entry)
       
         if [ ! \$PROGNAME ]; then #if no name is given use filename
              zenity --info --title="Shortcut... " --text="no Change"        
              exit;
         fi
         
         export WINEVER=\$(wine --version|cut -f1 -d ' ')
         ${DESKTOP_FILE_EDIT} --set-name="\$PROGNAME ($WINEVER)" \${WINEPREFIX_SUBDIR}/\${EXE_NOEXE}.desktop
         ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}/
         zenity --info --title="$EXE_NOEXE.desktop" --text="Shortcut renamed sucessfuly: \$appname"

  elif [ "\$choice" = "Change Icon..." ]; then
         get_icon=\$(zenity --file-selection --file-filter=""*.png" "*.jpg" "*.svg"")
        if [ ! \$get_icon ]; then #if no icon is choosen
           zenity --info --title="Icon... " --text="no Change"        
           exit;
        fi
        
        ${DESKTOP_FILE_EDIT} --set-icon="\$get_icon" \${WINEPREFIX_SUBDIR}/"$EXE_NOEXE".desktop 
        ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}/
        zenity --info --title="$EXE_NOEXE.desktop" --text="Icon Changed sucessfuly: \$get_icon"

  # Ask user to where to save the backup
  elif [ "\$choice" = "Backup..." ]; then
#         DATE=\$(date +'%Y%m%d')
#         mkdir -p \$HOME/flatpak-wine70-backup;
#   tar -zcvf "\$HOME/flatpak-wine70-backup/flatpak-wine70-bottle-$EXE_NOSP-\$DATE.tar.gz" \
#      ${PREFIXDIR}/"$EXE_NOSP"          \
#      ${PREFIXDIR}/"$EXE_NOSP.sh"       \
#      ${PREFIXDIR}/"$EXE_NOSP.desktop"  \
#      ${PREFIXDIR}/"$EXE_NOSP.icon.png" \
#       && zenity --info --title="Bottle backed up: $EXE_NOSP" --text="flatpak-wine70-bottle-$EXE_NOSP-\$DATE.tar.gz at \$HOME/flatpak-wine70-backup"
      echo "fix me"


  elif [ "\$choice" = "Delete Prefix: $EXE_NOEXE" ]; then
         rm -rfv ${WINEPREFIX_SUBDIR}; 
         rm -rfv ${DESKTOPDIR}/$EXE_NOEXE.desktop

  elif [ "\$choice" = "Launch $EXE_NOEXE" ]; then
         export base=\$(basename "$EXE_FILE")
         export dire=\$(dirname "$EXE_FILE")
         
         cd "\$dire"
         \${WINE_CMD} "\$base"
  fi
EOF

###############################################
chmod +x ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh

# Generate desktop entry specifications to be added to the application launcher.
echo "
[Desktop Entry]
Exec=bash -c ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.sh
Name=$PROGNAME
Path=$EXE_PATH
Type=Application
Categories=$appCategory;
Icon=${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.icon.png
Keywords=winezgui; game; ${EXE_NOEXE};
NoDisplay=false
StartupNotify=true
Terminal=false
" > "${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.desktop"

    # link the launcher  file to a shortcut on applications menu.
    ln -sfv ${WINEPREFIX_SUBDIR}/${EXE_NOEXE}.desktop ${DESKTOPDIR}/"$EXE_NOEXE".desktop
    # Test if the app link was created sucessfully on applications menu 
    if [ $? -eq 0 ]; then
        ${UPDATE_ICON_CACHE}
        ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR
        echo "Shortcut created sucessfuly on applications menu."
      zenity --info --title="Shortcut created sucessfuly " --text="$EXE_NOEXE.desktop"
    fi

else 

# If no application was submited, show this message.
  echo Please, submit a windows application file. 
  echo Usage: $0 path/to/app.exe 
  zenity --info --title="Select an EXE to create shortcut" --text="in Filemanager, right-click on an exe and select this!"

fi
