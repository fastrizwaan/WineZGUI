#!/usr/bin/env bash
# ============================================================================ #
# WineZGUI (winezgui) (C) GPL3 Mohammed Asif Ali Rizvan <fast.rizwaan@gmail.com>
# URL: https://github.com/fastrizwaan/WineZGUI
# winezgui main program to run or create a wine prefix for a selected exe
# ============================================================================ #
export AUTHOR="Mohammed Asif Ali Rizvan"
export EMAIL="fast.rizwaan@gmail.com"
export COPYRIGHT="GNU General Public License (GPLv3+)"
export WEBSITE="https://github.com/fastrizwaan/WineZGUI"
# Variables
export DEBUG="Y"
export PROCESSNAME="$0"
export HEADER="$(basename ${0})" # for Terminal Messages
# These values will be assigned by Setup using sed command
export APPNAME=WineZGUI   # Application Name
export APPVERSION="1.00"
export APP_WITH_VER="${APPNAME}-${APPVERSION}" # Example: WineZGUI-0.88
export INSTALL_PREFIX="/usr"
export DATADIR=/usr/share/winezgui # scripts & data dir; /usr changes to prefix
export INSTALL_TYPE="system"
export WINEZGUIDIR="$(realpath -m ~/.local/share/winezgui)"
export TEMPDIR="$(realpath -m ${WINEZGUIDIR}/tmp)"

export FLATPAK_NAME=""
#/These values will be changed  by Setup using sed command
export SETTINGS_FILE="${WINEZGUIDIR}/Settings.yml" # Settings file 
export TEMPLATES_DIR="${WINEZGUIDIR}/Templates"    # Prefix Templates Directory
export PREFIXES_DIR="${WINEZGUIDIR}/Prefixes"      # Scripts Prefixes Directory
export RUNNERS_DIR="${WINEZGUIDIR}/Runners"        # Wine runners Directory
# Commands used by WineZGUI and Scripts
export UPDATE_ICON_CACHE="gtk-update-icon-cache -f -t ~/.local/share/icons 2>/dev/null"
export UPDATE_DESKTOP_DATABASE="update-desktop-database"
export WBOOT_CMD="$(which wineboot) -i"
export ICOTOOL_CMD="$(which icotool)"
export WRESTOOL_CMD="$(which wrestool)"
export ZENITY_CMD="$(which zenity)"
export EXIFTOOL_CMD="$(which exiftool)"
export ZSTD_CMD="$(which zstd)"
export TAR_CMD="$(which tar)"
export WGET_CMD="$(which wget)"
# LD_LIBRARY_PATH
if [ -z "${LD_LIBRARY_PATH}" ]; then
LD_LIBRARY_PATH+="/lib:/lib32:/lib64"; fi
LD_LIBRARY_PATH+="${LD_LIBRARY_PATH}:/app/lib:/app/lib32:/app/lib64:"
LD_LIBRARY_PATH+="/app/lib/i386-linux-gnu:/app/lib/wine:"
LD_LIBRARY_PATH+="/app/lib64/wine:"
LD_LIBRARY_PATH+="/usr/lib/x86_64-linux-gnu/wine:"
LD_LIBRARY_PATH+="/usr/lib/wine:"
LD_LIBRARY_PATH+="/usr/lib/wine/wine:"
LD_LIBRARY_PATH+="/usr/lib64/wine:"
LD_LIBRARY_PATH+="/usr/lib64/wine/wine:"
LD_LIBRARY_PATH+="/usr/lib/i386-linux-gnu/wine:"
LD_LIBRARY_PATH+="$(pwd)"
export LD_LIBRARY_PATH
export PATH="${PATH}:/bin:/usr/bin:/usr/local/bin:/app/bin"
export ARGV="$@"

# Testing whether startup checks works before this
# #winezgui-startup-checks setups up runner, template, etc.
# export RUNNER=$(grep "runner:" ${SETTINGS_FILE}|cut -f2 -d ":")
# # If runner is not found in Settings  empty
# if [ -z "${RUNNER}" ]; then
#      echo "13. RUNNER = $RUNNER NOT FOUND, USING DEFAULT WINE"
#      export RUNNER="$(which wine)"
# fi

# # if runner is from local install /app/bin/wine or /usr/bin/wine etc.
# # set RUNNER_NAME
# if [ "${RUNNER}" = "$(which wine)" ]; then
#      export RUNNER_NAME="System Default"
# else #Get directory name containing bin/wine
#      export RUNNER_NAME=$(basename $(dirname $(dirname ${RUNNER})))
# fi

# export WINE_CMD=${RUNNER} # will be changed by startup-checks
# export WINEVER="$(${RUNNER} --version)"

echo "0000 ---- WINE _ CM D =$WINE_CMD"
sleep 3s

export WINETRICKS="$(which winetricks)"
export INFOFILE="${PREFIXDIR}/Info.yml"
export ABOUTFILE="${WINEZGUIDIR}/About.yml"
export APPLICATIONSDIR="$(realpath -m ~/.local/share/applications)"
# Shortcuts directory for winezgui scripts symbolic links
if [ "${INSTALL_TYPE}" = "system" ]; then 
     #DEXSKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui)"
     SHORTCUT_PREFIX="system_winezgui"
else 
     #DEXSKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui/${FLATPAK_NAME})"
     SHORTCUT_PREFIX="${FLATPAK_NAME}"
fi
#export DEXSKTOPDIR SHORTCUT_PREFIX
export SHORTCUT_PREFIX
export BKP_EXT="wzt" # winezgui backup file extension

# # If prefix=nothing then install to /usr
# if [ -z "${INSTALL_PREFIX}" ]; then
#      INSTALL_PREFIX="/usr"
# fi

# # Flatpak Specific Commands and Variables
# if [ "${FLATPAK}" = "true" ]; then
#      echo setting prefix and paths for flatpak
#      INSTALL_PREFIX="/app"
#      TEMPDIR="\$(realpath -m \~/.var/app/${FLATPAK_NAME}/data/tmp)"
#      WINEZGUIDIR="$(realpath -m ~/.local/share/winezgui)"  #FIXME why this here?
#      INSTALL_TYPE="system" #FIXME why this here?
# fi
source "${DATADIR}/winezgui-source"
SOURCE "check-all-variables"
echo "-------------------------------${0}------------------------------------------"
check-all-variables "AUTHOR EMAIL COPYRIGHT WEBSITE DEBUG PROCESSNAME HEADER APPNAME \
                APPVERSION APP_WITH_VER DATADIR INSTALL_TYPE WINEZGUIDIR FLATPAK_NAME \
                SETTINGS_FILE TEMPLATES_DIR PREFIXES_DIR UPDATE_ICON_CACHE \
                UPDATE_DESKTOP_DATABASE WINEVER WBOOT_CMD ICOTOOL_CMD WRESTOOL_CMD \
                ZENITY_CMD EXIFTOOL_CMD ZSTD_CMD TAR_CMD WGET_CMD LD_LIBRARY_PATH PATH \
                WINE_CMD WINETRICKS INFOFILE ABOUTFILE APPLICATIONSDIR SHORTCUT_PREFIX \
                BKP_EXT INSTALL_PREFIX TEMPDIR WINEZGUIDIR INSTALL_TYPE"

WineZGUI_Window() # Main WineZGUI application window function
{
  HEADER="$(basename ${0})"
  SELECTION=$(${ZENITY_CMD} --list --hide-header               \
                     --title "${APP_WITH_VER}" --width=360     \
                     --height=460 --radiolist --column " "     \
                     --column "Action"                         \
                         TRUE "Open Exe..."                    \
                            0 "Launch..."                      \
                            0 "Script..."                      \
                            0 "Backup..."                      \
                            0 "Restore..."                     \
                            0 "Delete..."                      \
                            0 "Runner..."                      \
                            0 "Template..."                    \
                            0 "Settings..."                    \
                            0 "Kill all..."                    \
                            0 "More..."                        \
                            0 "Help..."                        \
                            0 "About..."                       \
                            0 "Quit..."                        \
                       --text "<b>Wine GUI using Zenity...</b>")
  
  if    [ -z "${SELECTION}" ]; then # Exit if Cancel is clicked
          echo "I: ${HEADER}: Cancel Selected. Bye!"
          exit 0
  fi         
 
  dbug "I: ${HEADER}: ${SELECTION} Selected!" # Show What is selected
 
  if   [ "${SELECTION}" = "Open Exe..." ]; then
         SOURCE "winezgui-open-exe"
         winezgui-open-exe

  elif [ "${SELECTION}" = "Launch..."  ]; then
         SOURCE "winezgui-launch"
         winezgui-launch

  elif [ "${SELECTION}" = "Script..."  ]; then
         SOURCE "winezgui-script"
         winezgui-script

  elif [ "${SELECTION}" = "Backup..." ]; then
         SOURCE "winezgui-backup"
         winezgui-backup

  elif [ "${SELECTION}" = "Restore..." ]; then
         SOURCE "winezgui-restore"
         winezgui-restore
  
  elif [ "${SELECTION}" = "Delete..."  ]; then
         SOURCE "winezgui-delete-prefix"
         winezgui-delete-prefix
  
  elif [ "${SELECTION}" = "Runner..." ]; then
        SOURCE "winezgui-runner"
        winezgui-runner
  
  elif [ "${SELECTION}" = "Template..." ]; then
         SOURCE "winezgui-template"
         winezgui-template

  elif [ "${SELECTION}" = "Settings..."  ]; then
         SOURCE "winezgui-settings"
         winezgui-settings

  elif [ "${SELECTION}" = "More..."  ]; then
         SOURCE "winezgui-more"
         winezgui-more

  elif [ "${SELECTION}" = "Help..." ]; then
         SOURCE "winezgui-help"
         winezgui-help

  elif [ "${SELECTION}" = "About..." ]; then
         SOURCE "winezgui-about"
         winezgui-about

  elif [ "${SELECTION}" = "Kill all..." ]; then
         SOURCE "winezgui-kill-all"
         winezgui-kill-all

  elif [ "${SELECTION}" = "Quit..." ]; then
         SOURCE "winezgui-quit"
         winezgui-quit
  fi

  # When program returns from script, source changes
  source "${DATADIR}/winezgui-source"

  WineZGUI_Window  # After All options
} 

#------------------------------- Startup -----------------------------#
# Load file with SOURCE function to load files
source "${DATADIR}/winezgui-source"

SOURCE "winezgui-dbug"

SOURCE "winezgui-cli-arguments"
winezgui-cli-arguments

echo "00. ----------------------------- RUNNER:${RUNNER}"
echo "00. ----------------------------- RUNNER_NAME:${RUNNER_NAME}"
echo "00. ----------------------------- WINE_CMD:${WINE_CMD}"

SOURCE "winezgui-startup-checks"
winezgui-startup-checks

echo "01. ----------------------------- RUNNER:${RUNNER}"
echo "01. ----------------------------- RUNNER_NAME:${RUNNER_NAME}"
echo "01. ----------------------------- WINE_CMD:${WINE_CMD}"

SOURCE "winezgui-check-file-type"
winezgui-check-file-type "${1}"

dbug "I: ${HEADER}: Launching ${APPNAME}"
WineZGUI_Window

