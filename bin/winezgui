#!/bin/bash

# On 1st launch create default wine prefix
export APPNAME=WineZGUI
export WINEVER=$(wine --version|cut -f1 -d ' ')
export WINEZPREFIX=$(realpath -m ~/.local/share/winezgui)
export PREFIXDIR="${WINEZPREFIX}/default"
export WINEARCH=win64
#export WINEDLLOVERRIDES="mscoree,mshtml="
export LD_LIBRARY_PATH="/app/lib:/app/lib32:/app/lib64:\
                        /app/lib/i386-linux-gnu:/app/lib/wine:\
                        /app/lib64/wine:/app/$NAME:$(pwd)"
                       
export PATH=$PATH:$(pwd)
export BINDIR=/usr/bin
export ARGV="$@"
export WINEPREFIX=${PREFIXDIR}
#export WINEEXE="flatpak run org.winehq.Wine"
export WINEEXE="$(which wine)"
export WINETRICKS="$(which winetricks)"
#export WINETRICKS="PREFIX=${PREFIXDIR} flatpak run --command=winetricks org.winehq.Wine"

  # if no argument is provided
  if [ $# -eq 0  ]; then
      # info
      echo "Info: No arguments supplied"
  
  else
      EXE_FILE=$(realpath -m "$1")
      EXE_NAME=$(basename "${EXE_FILE}")
      EXE_PATH=$(dirname  "${EXE_FILE}")
      EXE_NOSP=$(echo ${EXE_NAME}|tr ' ' '_');
      EXE_NOEXE=$(echo ${EXE_NOSP}|sed "s/\.exe//g");
      EXE_EXT="${EXE_FILE##*.}"
      WINEPREFIX_SUBDIR="${WINEZPREFIX}/${EXE_NOEXE}"    
      
      # some games need to cd to the dir to work
      export base=$(basename "$1")
      export dire=$(dirname  "$1")
  
      # if arugment is not an exe file, then quit
      IS_EXE="$(echo $EXE_EXT|tr A-Z a-z)"

      if [ "$IS_EXE" != "exe" ]; then
          echo "Warn: \"${EXE_NAME}\" is not an EXE file"
          echo "info: Please provide EXE file as argument"
          echo "info: Exiting..."
          exit 1
      fi
  fi      

  # Create a wine prefix directory used as default
  mkdir -p "${PREFIXDIR}"


   # Wine creates some directories which are linked to user's home
   # To prevent games/programs from writing to host ~/Documents
   # and to allow sandbox backup we need to remove the links \
   # and create real directories inside wine prefix
   
   # Check if default prefix was created and symlinks removed
   if [ ! -f ${PREFIXDIR}/default.symlinks-removed ]; then
    
    # Create Prefix then delete host linked directories
    WINEDLLOVERRIDES="mscoree,mshtml=" \
    WINEPREFIX=${PREFIXDIR} \
    WINEDEBUG=-all \
    wineboot -u 2>/dev/null && \
    
    rm -rf ${PREFIXDIR}/drive_c/users/${USER}/Desktop
    rm -rf ${PREFIXDIR}/drive_c/users/${USER}/Downloads
    rm -rf ${PREFIXDIR}/drive_c/users/${USER}/'My Documents'
    rm -rf ${PREFIXDIR}/drive_c/users/${USER}/'My Music'
    rm -rf ${PREFIXDIR}/drive_c/users/${USER}/'My Pictures'
    rm -rf ${PREFIXDIR}/drive_c/users/${USER}/'My Videos' 
    rm -rf ${PREFIXDIR}/drive_c/users/${USER}/Templates

    # Create normal directories for the deleted symlinks
    mkdir -p ${PREFIXDIR}/drive_c/users/${USER}/Desktop
    mkdir -p ${PREFIXDIR}/drive_c/users/${USER}/Downloads
    mkdir -p ${PREFIXDIR}/drive_c/users/${USER}/'My Documents'
    mkdir -p ${PREFIXDIR}/drive_c/users/${USER}/'My Music'
    mkdir -p ${PREFIXDIR}/drive_c/users/${USER}/'My Pictures'
    mkdir -p ${PREFIXDIR}/drive_c/users/${USER}/'My Videos' 
    mkdir -p ${PREFIXDIR}/drive_c/users/${USER}/Templates

    # Create an empty file to test whether prefix is created 
    touch ${PREFIXDIR}/default.symlinks-removed

    # info
    echo "Info: Default Wine Prefix at ${PREFIXDIR}" Created
   fi


# Start WineZGUI when no argument is supplied
if [ $# -eq 0 ];  then
    echo "Info: Launching WineZGUI"
   
    SELECTION=$(                                             \
    zenity --title "${APPNAME} (${WINEVER})"                 \
           --list                                            \
           --width=240 --height=320                          \
           --radiolist --column " "                          \
           --column "Action"                                 \
                  0 "Winetricks GUI..."                      \
                  0 "Winetricks CLI..."                      \
                  0 "Launch Winecfg..."                      \
               TRUE "Open Explorer"                          \
                  0 "Open Shell..."                          \
                  0 "Kill all Instances"                     \
                  0 "Delete Prefix"                          \
           --text   "WineZGUI Default Prefix\n${PREFIXDIR} " \
            )
# TODO
#                 0 "Install Media Foundation Libs"         \

    # Handle User Selected Options for the above menu
   
    # Exit if Cancel is clicked
    if [ -z "${SELECTION}" ]; then
         exit 1
    fi
   
    # Winetricks is Selected
    if [ "${SELECTION}" = "Winetricks GUI..." ]; then  
         WINEPREFIX=${PREFIXDIR} ${WINETRICKS} --gui

    # Provide Command Line to enter multiple Dependencies
    elif [ "${SELECTION}" = "Winetricks CLI..." ]; then
           VERB_LIST="xact xinput xna31 dotnet48 \
                      vcrun2003 vcrun2005        \
                      vcrun2008 vcrun2012        \
                      vcrun2015 dxvk faudio      \
                      quartz corefonts"
           MESSAGE="Change and Press Enter to install these using Winetricks:"
           TITLE_TEXT="Winetricks CLI - Paste your Dlls list"
           # Remove multiple spaces from variable           
           VERB_LIST=$(echo ${VERB_LIST}|sed 's/  / /g')
           VERBS=$(                     \
           zenity                       \
           --title "${TITLE_TEXT}"      \
           --width=800 --height=30      \
           --text  "${MESSAGE}"         \
           --entry-text "${VERB_LIST}"  \
           --entry)
 
          if [ -z "${VERBS}" ]; then #if no dlls are given
               exit 0
          else   
               VERBS=(${VERBS}) ; #convert string to array
          fi
          
          # Show Progress Percentage by getting number of items
          NO_OF_ITEMS=${#VERBS[*]}
          NO_OF_ITEMS=$(expr ${NO_OF_ITEMS} + 1) ;# add +1 for PROGRESSress

          PERCENTAGE=$(expr 100 / ${NO_OF_ITEMS})
          
          # Convert number to string
          PROGRESS=$(echo ${PERCENTAGE})  
          
          echo "Info: Selected winetricks verbs: ${VERBS[*]}"
          echo "Info: log location ${PREFIXDIR}"
          echo "Info: Install log: winetricks.install.log"
          echo "Info: Error   log: winetricks.error.log"
          
          # Show Progress using zenity
          ( for i in ${VERBS[*]}; do

          # Show Progress Percentage and Info
          echo ${PROGRESS}
          echo "# Installing ${i}..."
          
          # Install winetricks verbs and put output to logs
          ${WINETRICKS} --force --unattended  ${i}     \
          1>>${PREFIXDIR}/winetricks.install.log       \
          2>>${PREFIXDIR}/winetricks.error.log 
          
          PROGRESS=$(expr ${PROGRESS} + ${PERCENTAGE})
          done
          echo 100
          echo "# Done!"
          ) |zenity                                                     \
            --width=440                                                 \
            --title                                                     \
            "Please Wait... Good things take time!"                     \
            --progress                                                  \
            --auto-kill
  
  #  # Install Media Foundation Libraries
  #  elif [ "${SELECTION}" = "Install Media Foundation Libraries" ]; then
  #     cd /app/mf-install && PREFIX=${PREFIXDIR} sh mf-install.sh
      
    # winecfg
    elif [ "${SELECTION}" = "Launch Winecfg..." ]; then
          ${WINEEXE} winecfg
         
    elif [ "${SELECTION}" = "Kill all Instances" ]; then
          # Find all process which ends with .exe and kill them
          WINE_PROCESSES=$(\
                            ps -aux|\
                            grep -i '\.exe'|\
                            sed 's/\( \)*/\1/g'|\
                            cut -f2 -d ' '
                          )
          for PROCESS in ${WINE_PROCESSES}; do
              kill -9 $PROCESS 2>/dev/null
          done
          # also kill wineserver to kill explorer, etc.
          wineserver -k
          
    elif [ "${SELECTION}" = "Open Shell..." ]; then   
          gnome-terminal --
         
    elif [ "${SELECTION}" = "Delete Prefix" ]; then
          rm -rfv ${PREFIXDIR}; 

    elif [ "${SELECTION}" = "Open Explorer" ]; then
          ${WINEEXE} explorer
       
    else
          ${WINEEXE} explorer

    fi
# END of "Start WineZGUI when no argument is supplied" section
else

    # Prompt to Launch exe with default or existing Prefix of that exe
    EXE_NAME=$(basename "$1")
       
    # If existing prefix exists for the exe
    if [ -f  ${WINEZPREFIX}/${EXE_NOEXE}/"${EXE_NOEXE}.sh" ]; then
            SELECTION=$(                                                  \
            zenity                                                        \
            --title "${APPNAME} (${WINEVER})"                             \
            --width=500 --height=300                                      \
            --list                                                        \
            --radiolist --column " "                                      \
            --column "Action"                                             \
                   0 "Run ${EXE_NAME} using Default Prefix"               \
                TRUE "Run ${EXE_NAME} using existing ${EXE_NOEXE} Prefix" \
                   0 "Run ${EXE_NAME} configuration"                      \
              --text "Select Action for ${PREFIXDIR} " )
   else
        SELECTION=$(                                                      \
        zenity                                                            \
        --title "${APPNAME} (${WINEVER})"                                 \
        --width=500 --height=300                                          \
        --list                                                            \
        --radiolist --column " "                                          \
        --column "Action"                                                 \
            TRUE "Run ${EXE_NAME} using Default Prefix"                   \
               0 "Create Prefix for ${EXE_NAME}"                          \
          --text "Select Action for ${PREFIXDIR} " )
   fi
    
   # Exit if Cancel is clicked
   if [ -z "${SELECTION}" ]; then
       exit 1
   fi
   
   # If existing prefix does not exist for the exe supplied
   if [ "${SELECTION}" = "Run ${EXE_NAME} using Default Prefix" ]; then  
       cd "$dire" 2>/dev/null;#go to the exe directory then run
       WINEPREFIX=${PREFIXDIR} ${WINEEXE} "$@"
   # Create Prefix for the selected EXE
   elif [ "${SELECTION}" = "Create Prefix for ${EXE_NAME}" ]; then
   
       echo "${EXE_FILE} ${EXE_FILE}"
        $BINDIR/winezgui-create-prefix "${EXE_FILE}"
   elif [ "${SELECTION}" = "Run ${EXE_NAME} using existing ${EXE_NOEXE} Prefix" ]; then
     # We replace "name with space" to "name_with_space"
     ${WINEPREFIX_SUBDIR}/"${EXE_NOEXE}.sh" "launch"

   elif [ "${SELECTION}" = "Run ${EXE_NAME} configuration" ]; then
         ${WINEPREFIX_SUBDIR}/"${EXE_NOEXE}.sh"
   fi
  

fi

