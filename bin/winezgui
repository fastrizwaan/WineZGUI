#!/usr/bin/env bash
# ============================================================================ #
# WineZGUI (winezgui) (C) GPL3 Mohammed Asif Ali Rizvan <fast.rizwaan@gmail.com>
# URL: https://github.com/fastrizwaan/WineZGUI
# winezgui main program to run or create a wine prefix for a selected exe
# ============================================================================ #

# Variables
export APPNAME=WineZGUI
# These values will be assigned by Setup using sed command
# Post install $PREFIX/bin/winezgui file will be different
export BINDIR=/usr/bin    # /usr will be replaced by prefix
export APPVERSION="git"
export INSTALL_TYPE="system"
export WINEZPREFIX=$(realpath -m ~/.local/share/winezgui)
export FLATPAK_NAME="io.github.WineZGUI"
#/These values will be changed  by Setup using sed command

export AUTHOR="Mohammed Asif Ali Rizvan"
export EMAIL="fast.rizwaan@gmail.com"
export COPYRIGHT="GNU General Public License (GPLv3)"
export WEBSITE="https://github.com/fastrizwaan/WineZGUI"
export PROCESSNAME="$0"
export WINEVER=$(wine --version|cut -f1 -d ' ')

export PREFIXDIR="${WINEZPREFIX}/default"
export WINEARCH=win64
export WINEDLLOVERRIDES="mscoree,mshtml="
export LD_LIBRARY_PATH="/app/lib:/app/lib32:/app/lib64:\
                        /app/lib/i386-linux-gnu:/app/lib/wine:\
                        /app/lib64/wine:/app/$NAME:$(pwd)"

export PATH=$PATH:$(pwd)
export ARGV="$@"
export WINEPREFIX=${PREFIXDIR}
export WINEEXE="$(which wine)"
export WINETRICKS="$(which winetricks)"
export WINE_CMD=${WINEEXE}

export APPLICATIONSDIR="$(realpath -m ~/.local/share/applications)"
# Where to install .desktop shortcuts?
# for system install (./setup -i) use ~/.local/share/applications/winezgui
if [ "$INSTALL_TYPE" = "system" ]; then
    export DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui)"
else
    # for flatpak create subdirectory with flatpakname
    export DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui/$FLATPAK_NAME)"
fi


# On launch check required runtime dependencies
if [ ! -f "${WINEZPREFIX}/DepsCheckOK.txt" ]; then
     # Function to print if dependencies are installed.
     FOUND=()    # Array/list to hold all found commands
     NOTFOUND=() # Array/list to hold all not found commands

     RUNTIME="wine winetricks icotool exiftool zenity wget"
     echo $RUNTIME
     for i in $RUNTIME ; do
         if [ $(which $i) ]; then
                FOUND+="$i"
                FOUND+=" "
                echo "FOUND = $i"
         else
                NOTFOUND+="$i"
                NOTFOUND+=" "
         fi
     done

     # Show found and not found dependencies for WineZGUI
     echo "Dependencies..."
     echo "Found    : $FOUND"
     echo "Not Found: $NOTFOUND"
     if [ ! -z "${NOTFOUND}" ]; then
          zenity --info --no-wrap --title="Missing Dependencies" \
                 --text="Please install these in your system:\n${NOTFOUND}"
     else
          touch "${WINEZPREFIX}/DepsCheckOK.txt"
     fi
fi

# Preprocessing files for Backup and Restore Function
# include backup and restore preprocess function
# which can be used both by default prefix and game prefix script
# PROCESS_FILES_FOR_BACKUP()
source ${BINDIR}/PREPROCESS_BACKUP_RESTORE

    # Main WineZGUI application window function
    MainFunction ()
    {
      unset EXE_FILE
      unset SELECTION
      SELECTION=$( \
      zenity --title "${APPNAME}-${APPVERSION}" \
             --list                                             \
             --width=360 --height=410                           \
             --radiolist --column " "                           \
             --column "Action"                                  \
                 TRUE "Open EXE..."                             \
                    0 "Winetricks GUI..."                       \
                    0 "Winetricks CLI..."                       \
                    0 "Launch Winecfg..."                       \
                    0 "Open Explorer..."                        \
                    0 "Open Shell..."                           \
                    0 "Kill all..."                             \
                    0 "Backup..."                               \
                    0 "Restore..."                              \
                    0 "Delete..."                               \
                    0 "About..."                                \
             --text   "Wine GUI using Zenity! Choose Action..." \
              )

      # Exit if Cancel is clicked
      if [ -z "${SELECTION}" ]
           then
           echo "Bye!"
           exit 0
      fi

      # Open EXE... Opens file dialog
      if [ "${SELECTION}" = "Open EXE..." ]
           then
      	   EXE_FILE="$( \
      	                zenity                  \
      	                --file-filter=*.exe     \
      	                --file-selection        \
      	                --title="Select a File" \
      	              )"
      	
      	   # If no exe is selected
      	   if [ -z "${EXE_FILE}" ]
                then
      	        unset EXE_FILE  ; # Empty variable
      	        unset SELECTION ; # Empty variable
                MainFunction    ; # Go back to Main Window
      	   fi

          # Redundant check
          case $? in
           0)
              echo "\"$EXE_FILE\" selected.";
              export EXE_FILE;;

           1)
              echo "No file selected.";
              unset EXE_FILE
      	      unset SELECTION
      	      MainFunction;;
          -1)
              echo "An unexpected error has occurred.";;
          esac

      # ====================== Winetricks GUI ========================= #
      elif [ "${SELECTION}" = "Winetricks GUI..." ]
             then
             WINEPREFIX=${PREFIXDIR} ${WINETRICKS} --gui
             MainFunction

      # ====================== Winetricks CLI ========================= #
      # Provide text entry command Line to enter multiple Dependencies
      elif [ "${SELECTION}" = "Winetricks CLI..." ]
             then

             # Present some preselected winetricks verbs
             VERB_LIST="xact xinput xna31 dotnet48 \
                        vcrun2003 vcrun2005        \
                        vcrun2008 vcrun2019        \
                        vcrun2010 dxvk faudio      \
                        quartz corefonts"
             MESSAGE="Change & Press Enter to install these using Winetricks:"
             TITLE_TEXT="Winetricks CLI - Paste winetricks verb list"
             # Remove multiple spaces from variable
             # from the above VERB_LIST
             VERB_LIST=$(echo ${VERB_LIST}|sed 's/  / /g')

             # Show the dialog
             VERBS=$( \
             zenity                       \
             --title "${TITLE_TEXT}"      \
             --width=800 --height=30      \
             --text  "${MESSAGE}"         \
             --entry-text "${VERB_LIST}"  \
             --entry)

            # If Cancel is clicked or nothing is entered
            if [ -z "${VERBS}" ]
                 then
                 echo "No Winetricks verbs are given."
                 MainFunction ; # Return to main application window
            else
                 VERBS=(${VERBS}) ; # convert string to array
            fi

            # Show Progress Percentage by getting number of items
            NO_OF_ITEMS=${#VERBS[*]}

            # Add +1 for progress to show 100% only after
            # the last item is finished
            NO_OF_ITEMS=$(expr ${NO_OF_ITEMS} + 1);

            # At what percentage, progress bar should advance
            PERCENTAGE=$(expr 100 / ${NO_OF_ITEMS})

            # Convert number to string
            PROGRESS=$(echo ${PERCENTAGE})

            echo "Info: Selected winetricks verbs: ${VERBS[*]}"

            # Start of Show Progress using zenity dialog
            ( for i in ${VERBS[*]}; do

            # Show Progress Percentage and Info
            echo ${PROGRESS}
            echo "# Installing ${i}..."

            # Install winetricks verbs and put output to logs
            ${WINETRICKS} --force --unattended  ${i}

            PROGRESS=$(expr ${PROGRESS} + ${PERCENTAGE})
            done
            echo 100
            echo "# Done!"
            ) |zenity                                 \
              --width=440                             \
              --title                                 \
              "Please Wait... This will take time!"   \
              --progress                              \
              --auto-kill
            # End of Show Progress using zenity dialog

            MainFunction ; # Return to Main Application Window

      # ====================== Launch Winecfg ========================= #
      elif [ "${SELECTION}" = "Launch Winecfg..." ]
             then
             ${WINE_CMD} winecfg
             MainFunction

      # ========================= Kill all ============================ #
      # It is a required feature, users will have trouble if
      # some wine application hang or stay resident
      elif [ "${SELECTION}" = "Kill all..." ]
             then

            # for killing all wine instance from flaptak sandbox
            if [ $(flatpak-spawn echo 0 2>/dev/null) ]
                 then
                 # flatpak wine and winezgui will be killed
                 flatpak-spawn --host flatpak kill ${FLATPAK_NAME}
            else
                 # Find all process which ends with .exe and kill them
                 WINE_PROCESSES=$( \
                                   ps -aux             | \
                                   grep -i '\.exe'     | \
                                   sed 's/\( \)*/\1/g' | \
                                   cut -f2 -d ' '
                                 )
                 for PROCESS in ${WINE_PROCESSES}; do
                     kill -9 $PROCESS 2>/dev/null
                 done
                 # also kill wineserver to kill explorer, etc.
                 wineserver -k
                 # exit winezgui also for consistent behavior with flatpak
                 # else host will not exit, but flatpak version will exit
                 # on using Kill all process
                 exit
            fi
            # Go back to menu
            MainFunction
      # ====================== Open Shell ========================= #
      elif [ "${SELECTION}" = "Open Shell..." ]
             then


             # Check if "gnome-terminal" is installed on the Host
             # Required for "Open Shell..." feature

             if [ "${WINE_CMD}" = "/app/bin/wine" ] && \
                [ $(flatpak-spawn  --host which gnome-terminal) ]
                 then
                 echo "gnome-terminal found via flatpak-spawn"
                 export GNOME_TERMINAL=0 ; #Available via flatpak-spwan
            elif [ "${WINE_CMD}" != "/app/bin/wine" ] && \
                 [ $(which gnome-terminal) ];
                   then
                   echo "gnome-terminal found on host system"
                   export GNOME_TERMINAL=0 ; #Available on host install
            else
                 echo "gnome-terminal not found"
                 export GNOME_TERMINAL=1 ; #Unavailable on host
            fi


            # Using Variable, If gnome terminal is not found inform user
            if [ ${GNOME_TERMINAL} -eq 1 ]
                 then
                 zenity --title "${SELECTION}" \
                        --width=500 --height=30 --info  \
                        --text "This feature requires \"gnome-terminal\""
                 # and return to main application window
                 MainFunction
            fi

             # If found in flatpak sandbox, use flatpak-spawn
             if [ "${WINE_CMD}" = "/app/bin/wine" ] && \
                [ $(flatpak-spawn --host echo 0) ]
                  then
                  echo "Opening gnome-terminal from flatpak sandbox"
                  # Shell needs WINEPREFIX as we are working with wine
                  export WINEPREFIX=${PREFIXDIR}
                  flatpak-spawn --host gnome-terminal --wait --        \
                  flatpak --command=bash run ${FLATPAK_NAME}           \
                  -c "cd $WINEPREFIX; export WINEPREFIX=${WINEPREFIX}; \
                  exec bash -i"

             # If found on host, run gnome-terminal
             else
                 echo "Opening gnome-terminal from host"
                 export WINEPREFIX=${PREFIXDIR}
                 gnome-terminal --wait --                              \
                 bash -c "export WINEPREFIX=${WINEPREFIX};             \
                 cd $WINEPREFIX;                                       \
                 exec bash -i"
             fi
              # on closing shell, go back to main application window
              MainFunction
      # ====================== About ================================== #
      elif [ "${SELECTION}" = "About..." ]; then
             echo "Executing About..."
             # Text is more, so we need to format it, with sed in pango markup
             ZCMD="zenity --info --no-wrap --text"
             $ZCMD "$(cat ${PREFIXDIR}/info.txt | \
                      sed -E 's/^(.*: )/<tt><b>\1<\/b><\/tt>/g' | \
                      sed -E 's/^(.*)$/<small>\1<\/small>/g')"
             MainFunction
      # ====================== Backup ================================= #
      elif [ "${SELECTION}" = "Backup..." ]; then
         echo "${PREFIXDIR}"
         PREFIX_SIZE=$(du -sh ${PREFIXDIR}|cut -f1)
         echo "${PREFIX_SIZE}"
         # Ask Before Backing up Default prefix
         # Ask Backup filename
         DATE=$(date +%F_%H%M)
         BACKUPNAME="default"
         # Set name based on flatpak or system
         if [ ${INSTALL_TYPE} = "flatpak" ]; then
              BKPFNAME="${BACKUPNAME}-${FLATPAK_NAME}-${DATE}.winezgui.tgz"
         else
              BKPFNAME="${BACKUPNAME}-system-${DATE}.winezgui.tgz"
         fi
         
         
         BACKUP_FILE=$( zenity                    \
           --title="Backup ${BACKUPNAME} Prefix!" \
           --width=500 --height=30                \
           --text="Size: ${PREFIX_SIZE}\nName:"   \
           --entry-text="${BKPFNAME}"             \
           --entry)
         
         # if backup file is empty / cancel clicked
         if [ -z "${BACKUP_FILE}" ]; then
             MainFunction
         fi
         
         # Select Backup Target Directory
         Z_TITLE="Choose Backup Directory for ${BACKUP_FILE}!"
         TARGET_DIR=$(zenity --file-selection     \
                             --title="${Z_TITLE}" \
                             --directory)
         # Cleanup variable after use
         unset Z_TITLE

         # If no directory is selected or cancel is clicked by the user
         if [ -z "$TARGET_DIR" ]; then
             # Retun to Main window
             MainFunction
         fi

         # Required extension is .winezgui.tgz,
         # If substring (suffix *.winezgui.tgz") is NOT found add it
         if ! [[ "${BACKUP_FILE}" == *".winezgui.tgz" ]]; then
               BACKUP_FILE="${BACKUP_FILE}.winezgui.tgz"
         fi

         # Check if the user can write to the selected Backup Directory 
         if [ ! -w "${TARGET_DIR}" ]; then 
              echo "${TARGET_DIR} not writable"
              zenity --error --no-wrap --title="Backup Error!" \
                     --text "${TARGET_DIR} not writable\nAborting Backup!"
         else
              cd "${WINEZPREFIX}"
              echo "creating ${BACKUP_FILE} backup..."
              
              
              # Preprocess: Prepare *.reg *.sh and *.txt for Backup 
              PROCESS_FILES_FOR_BACKUP
              
              # Create Backup archive and restore changes as soon as tar is done
              (tar -zcvf "${BACKUP_FILE}" "./${BACKUPNAME}" 2>/dev/null) | \
                   zenity --progress --pulsate --auto-close        \
                          --title="Creating ${BACKUPNAME} backup!" \
                          --width=240 --text="${BACKUP_FILE}..."
                   echo "${BACKUP_FILE} created successfully"

              # Restore changed values after backup
              echo "Restoring Registry and Info files"
              PROCESS_FILES_FOR_BACKUP "restore"

              # Report Size also
              BACKUP_SIZE=$(du -sh "${BACKUP_FILE}"|cut -f1)
              # Backup Sucess Message
              MSG=("<b>Prefix: </b> ${BACKUPNAME}\n")
              MSG+="<b>Filename:</b> ${BACKUP_FILE}"
              MSG+="\n<b>Location:</b> ${TARGET_DIR}\n"
              MSG+="<b>Backup Size:</b> ${BACKUP_SIZE}"
              MSG+="\n\n<b>Info: </b>Only wine prefix is backed up!"

              mv -v "${BACKUP_FILE}" "${TARGET_DIR}"   && \
              zenity --no-wrap \
                     --info     \
                     --title="${BACKUP_FILE} Prefix Backup!" \
                     --text="${MSG[@]}"

         fi # ! -w 
         # Cleanup variables after use
         unset MSG
         unset BACKUP_SIZE
         unset TARGET_DIR
         unset BACKUP_SIZE
         unset BACKUP_FILE
         
         # Return to Game window after backup or target directory write error
         MainFunction
      # ====================== Restore ================================= #
      elif [ "${SELECTION}" = "Restore..." ]
             then
             # Ask user to select the .winezgui.tgz backup file to restore
             WINEZGUI_BACKUP_FILE="$(zenity                      \
                           --file-filter=*.winezgui.tgz          \
                           --file-selection                      \
                           --title="Select WineZGUI Backup File" \
                         )"
             
             # If no Backup file is selected, or cancel is clicked
             if [ -z "${WINEZGUI_BACKUP_FILE}" ]; then
        	        unset WINEZGUI_BACKUP_FILE  ; # Empty variable

             else
                  echo "selected ${WINEZGUI_BACKUP_FILE}"
        	        # If user selects a .winezgui.tgz file
        	        # extract Prefix name from the winezgui.tgz 
        	        BACKUPNAME=$(tar -tzf "${WINEZGUI_BACKUP_FILE}" 2>/dev/null \
        	             |head -n1|cut -f2 -d '/')
                  echo "Prefix from ${WINEZGUI_BACKUP_FILE} is ${BACKUPNAME}"
             
                  # Extract file to WineZGUI Prefix and show gui progress dialog
                  echo "Extracting ${WINEZGUI_BACKUP_FILE} at ${WINEZPREFIX}"
             
                 (tar -zxf "${WINEZGUI_BACKUP_FILE}" -C "${WINEZPREFIX}" \
                       2>/dev/null)|                                     \
                  zenity --progress --width=240                          \ 
                         --title="Restoring ${BACKUPNAME}!"              \
                         --text="Extracting ${WINEZGUI_BACKUP_FILE}..."  \
                         --pulsate --auto-kill

                 # Now do Preprocessing for host and flatpak installs
                 cd "${WINEZPREFIX}"
                 PROCESS_FILES_FOR_BACKUP "restore"
                 
                 # Create required applications directory for .desktop files
            	   if [ "${INSTALL_TYPE}" = "flatpak" ]; then
            	        MAKEDIR=("/home/${USER}/.local/share/applications/")
            	        MAKEDIR+="winezgui/${FLATPAK_ID}"
                      mkdir -p "${MAKEDIR}"
                      unset MAKEDIR
                 else
                      MAKEDIR=("/home/${USER}/.local/share/applications/")
            	        MAKEDIR+="winezgui"
                      mkdir -p "${MAKEDIR}"
                 fi
        	   
            	   # If .desktop file is found, means, it is a non default backup
            	   
            	   FOUND_PREFIX_DIR=("${WINEZPREFIX}/${BACKUPNAME}/")
            	   FOUND_DESKTOP_FILE+="${FOUND_PREFIX_DIR}/${BACKUPNAME}.desktop"
            	   FOUND_SCRIPT_FILE+="${FOUND_PREFIX_DIR}/${BACKUPNAME}.sh"
            	   if [ -f "${FOUND_DESKTOP_FILE}" ]
            	        then
            	        echo "found ${FOUND_DESKTOP_FILE}, creating shortcut"
            	       
            	        # link the application shortcut .desktop file
            	        ln -svf ${FOUND_DESKTOP_FILE} ${DESKTOPDIR}
                     
                      # Get Game name from desktop file
            	        GN="$(grep -i Name ${FOUND_DESKTOP_FILE}|cut -f2 -d '=')"
            	        echo "Game Name: $GN"
            	          
            	     	 # Inform & ask if the user wants to start the restored game
                     if zenity --question --no-wrap --width=200    \
                               --title="WineZGUI Backup Restored!" \
                               --text="Launch: ${GN}?"
                     then
                          # Start the Game script and exit main app
                          echo "Launching Script for the restored game..."
                          bash ${FOUND_SCRIPT_FILE}
                          exit 0
                     fi # zenity --question
                 fi # -f "${FOUND_DESKTOP_FILE}"
        	   fi # -z "${WINEZGUI_BACKUP_FILE}"
        	   
        	   # Clear temporary used variables
        	   unset WINEZGUI_BACKUP_FILE
        	   unset FOUND_PREFIX_DIR
        	   unset FOUND_DESKTOP_FILE
        	   unset FOUND_SCRIPT_FILE
        	   unset BACKUPNAME
        	   unset GN
        	   
        	   # Go back to Main Window
        	   MainFunction

      # ====================== Delete ================================= #
      elif [ "${SELECTION}" = "Delete..." ]
             then

             # Delete Shortcuts and Prefix Directory
             rm -rf ${PREFIXDIR};
             echo "Deleted default prefix"
             
             # Delete all broken links which points to winezgui
             find ${DESKTOPDIR} -xtype l -delete
             ${UPDATE_ICON_CACHE}
             ${UPDATE_DESKTOP_DATABASE} ${APPLICATIONSDIR}

             # Return to Main window after deleting default prefix
             MainFunction
      # ====================== Open Explorer ========================== #
      elif [ "${SELECTION}" = "Open Explorer..." ]
             then
             
             # Open home directory using windows explorer
             echo "Opening Explorer"
             ${WINE_CMD} explorer $HOME
             
             # Return to Main window, when explorer exits
             MainFunction

      else
            echo "Unknown selection = ${SELECTION}"
            exit 1

      fi


    } # End of MainFunction
  # END of "Start WineZGUI when no argument is supplied" section


  # Redundant, if no argument is provided
  if [ $# -eq 0  ]
       then
       # info
       echo "Info: No arguments supplied"

  else
       echo "EXE FILE IN ELSE IS $EXE_FILE AND $ 1 IS $1"
       EXE_FILE="$(realpath -m "$1")"
       EXE_NAME=$(basename "${EXE_FILE}")
       EXE_PATH=$(dirname  "${EXE_FILE}")
       EXE_NOSP=$(echo ${EXE_NAME}|tr ' ' '_');
       EXE_NOEXE=$(echo ${EXE_NOSP}|sed "s/\.exe//g");
       EXE_EXT="${EXE_FILE##*.}"
       WINEPREFIX_SUBDIR="${WINEZPREFIX}/${EXE_NOEXE}"

       # some games need to cd to the dir to work
       export base=$(basename "$1")
       export dire=$(dirname  "$1")

       # if arugment is not an exe file, then quit
       IS_EXE="$(echo $EXE_EXT|tr A-Z a-z)"

       if [ "$IS_EXE" != "exe" ]
            then
            echo "Warn: \"${EXE_NAME}\" is not an EXE file"
            echo "info: Please provide EXE file as argument"
            echo "info: Exiting..."
            exit 1
       fi
  fi

## On 1st launch create default wine prefix
### Create a default wine prefix directory ###

   mkdir -p "${PREFIXDIR}"

   # Wine creates some directories which are linked to user's home
   # To prevent games/programs from writing to host ~/Documents
   # and to allow sandbox backup we need to remove the links \
   # and create real directories inside wine prefix

   # Check if default prefix was created and symlinks removed
   # and create prefix only when wine is found
   if [ ! -f ${PREFIXDIR}/ReplacedSymLinks.txt ] && \
      [ $(which wine) ]
        then

        # Create Prefix then delete host linked directories
        WINEDLLOVERRIDES="mscoree,mshtml=" \
        WINEPREFIX=${PREFIXDIR} \
        WINEDEBUG=-all \
        wineboot -i 2>/dev/null

       # Replace home liked directory links with normal directories
       # For Games which saves in ~/Documents now will save in
       # Prefix-dir/drive_c/users/${USER}/Documents
       SAVEIFS=$IFS
       IFS=$(echo -en "\n\b")
       echo "Starting for loop"
       for i in $(find ${WINEPREFIX}/drive_c/users/${USER} -type l); do
         rm $i && mkdir -p $i && echo $i >> ${PREFIXDIR}/ReplacedSymLinks.txt
       done
       IFS=$SAVEIFS

       # Create an empty file to test whether prefix is created
       touch ${PREFIXDIR}/ReplacedSymLinks.txt

       # info
       echo "Info: Default Wine Prefix at ${PREFIXDIR}" Created

       # Create H: for HOME Directory for Wine Explorer
       ln -sf $HOME "${PREFIXDIR}/dosdevices/h:"

   fi

### End of Create a default wine prefix directory ###


# Create Metadata info.txt for the default wine prefix
# Update info only when wine is found
if [ ! -f ${PREFIXDIR}/info.txt ] && [ $(which wine) ]; then
echo -e   "
Application     : ${APPNAME}
Version         : ${APPVERSION}
Copyright       : ${COPYRIGHT}
Website         : ${WEBSITE}
Author          : ${AUTHOR}
E-mail          : ${EMAIL}
Wine            : ${WINEEXE}
Wine Version    : ${WINEVER}
Wine Arch       : ${WINEARCH}
WineZGUI Prefix : ${WINEZPREFIX}
Wine Prefix     : ${PREFIXDIR}
Creation Date   : $(date)
" > ${PREFIXDIR}/info.txt
echo "Created ${PREFIXDIR}/info.txt"
fi

# Start WineZGUI when no argument is supplied
if [ $# -eq 0 ]
     then
     echo "Info: Launching WineZGUI"
     MainFunction
fi

# If an exe file is provided as argument or selected by the Open EXE...
# TODO: list all available prefixes to install Redist softwares
# ====================== Open EXE ================================= #
if [ -f "${EXE_FILE}"  ]
     then
     echo "Entered -f EXE_FILE"
     # Prompt to Launch exe with default or existing Prefix of that exe
     EXE_FILE=$(realpath -m "$EXE_FILE")
     EXE_NAME=$(basename "${EXE_FILE}")
     EXE_PATH=$(dirname  "${EXE_FILE}")
     EXE_NOSP=$(echo ${EXE_NAME}|tr ' ' '_');
     EXE_NOEXE=$(echo ${EXE_NOSP}|sed "s/\.exe//g");
     EXE_EXT="${EXE_FILE##*.}"
     WINEPREFIX_SUBDIR="${WINEZPREFIX}/${EXE_NOEXE}"
     echo EXE_NAME IS $EXE_FILE
     # If existing prefix exists for the exe
     if [ -f  ${WINEZPREFIX}/${EXE_NOEXE}/"${EXE_NOEXE}.sh" ]
          then
          SELECTION=$( \
          zenity \
          --title "${APPNAME} (${WINEVER})" \
          --width=500 --height=300 \
          --list \
          --radiolist --column " " \
          --column "Action"                                             \
                 0 "Run ${EXE_NAME} using Default Prefix"               \
              TRUE "Run ${EXE_NAME} with existing ${EXE_NOEXE} Prefix"  \
                 0 "Run ${EXE_NAME} configuration"                      \
            --text "Select Action for ${EXE_NAME} " )
     else
          SELECTION=$(                                                  \
          zenity                                                        \
          --title "${APPNAME} (${WINEVER})"                             \
          --width=500 --height=300                                      \
          --list                                                        \
          --radiolist --column " "                                      \
          --column "Action"                                             \
              TRUE "Run ${EXE_NAME} using Default Prefix"               \
                 0 "Create Prefix for ${EXE_NAME}"                      \
            --text "Select Action for ${PREFIXDIR} " )
     fi

     # Exit if Cancel is clicked go back to main menu
     if [ -z "${SELECTION}" ]
          then
          MainFunction
     fi

     # If exe prefix (already created prefix for the exe) does not exist
     if [ "${SELECTION}" = "Run ${EXE_NAME} using Default Prefix" ]
          then
          cd "$EXE_PATH" 2>/dev/null; # Go to the exe directory then run
          echo "Inside Run EXE with default prefix"
          echo "WINEPREFIX=${PREFIXDIR} ${WINE_CMD} \"${EXE_NAME}\" # $@"
          WINEPREFIX=${PREFIXDIR} ${WINE_CMD} "${EXE_NAME}" # "$@"

     # Create Prefix for the selected EXE
     elif [ "${SELECTION}" = "Create Prefix for ${EXE_NAME}" ]
            then
            echo "Creating Prefix for ${EXE_FILE}"
            $BINDIR/winezgui-create-prefix "${EXE_FILE}"
          	# Launch after creating new prefix
          	${WINEPREFIX_SUBDIR}/"${EXE_NOEXE}.sh"
	
	   # Run with existing exe prefix?
     elif [ "${SELECTION}" = \
            "Run ${EXE_NAME} with existing ${EXE_NOEXE} Prefix" ]
            then
            echo "Launching ${WINEPREFIX_SUBDIR}/\"${EXE_NOEXE}.sh\""
	          ${WINEPREFIX_SUBDIR}/"${EXE_NOEXE}.sh" "launch"

     # Show exe prefix configuration
     elif [ "${SELECTION}" = "Run ${EXE_NAME} configuration" ]
            then
            echo "Launching ${WINEPREFIX_SUBDIR}/\"${EXE_NOEXE}.sh\" Config..."
            ${WINEPREFIX_SUBDIR}/"${EXE_NOEXE}.sh"
     fi
fi
