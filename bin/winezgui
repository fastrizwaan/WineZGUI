#!/usr/bin/env bash
# ============================================================================ #
# WineZGUI (winezgui) (C) GPL3 Mohammed Asif Ali Rizvan <fast.rizwaan@gmail.com>
# URL: https://github.com/fastrizwaan/WineZGUI
# winezgui main program to run or create a wine prefix for a selected exe
# ============================================================================ #
export APPNAME=WineZGUI
export APPVERSION="git"
export APP_WITH_VER="${APPNAME}-${APPVERSION}"

# HANDLE CLI ARGUMENT
# Function Show help
ShowHelp ()
{
     echo "WineZGUI - Wine GUI using Zenity "
     echo "Usage:"
     echo "$0 <argument>"
     echo ""
     echo "Argument:"
     echo "exe/msi file      Creates prefix for the given exe file, else launch"
     echo "wzt file          Restore a backed up prefix or bundle file (.wzt)"
     echo "Options:"
     echo "-v, --version     WinzeGUI version"
     echo "-h, --help        Shows this help!"
     echo ""
     echo "Examples:"
     echo "$0 setup.exe"
     echo "$0 putty_installer.msi"
     echo "$0 Notepadd.wzt"

}

# parse command line arguments
for i in "$@"
do
case $i in
    -v|--version)
    echo "${APPVERSION}"
    exit
    ;;
    -h|--help)
    ShowHelp
    exit
    ;;
esac
done


# If prefix=nothing then install to /usr
if [ -z "${INSTALL_PREFIX}" ]; then
     INSTALL_PREFIX="/usr"
fi

# Flatpak Specific Commands and Variables
if [ "${FLATPAK}" = "true" ]; then
     echo setting prefix and paths for flatpak
     INSTALL_PREFIX="/app"
     TEMPDIR="\$(realpath -m \~/.var/app/${FLATPAK_NAME}/data/tmp)"
     WINEZGUIDIR="\$(realpath -m \~/.var/app/${FLATPAK_NAME}/data/winezgui)"
     INSTALL_TYPE=\"flatpak\"
fi
# HANDLE CLI ARGUMENT

# set -x
# Variables

# Only show debug message when DEBUG="Y" or DEBUG="anything"
# Use unset DEBUG will stop messages.
DBUG()
{ 
     if [ "${DEBUG}" = "Y" ] || [ ! -z "${DEBUG}" ]; then
          echo "${1}"
     fi
}

# These values will be assigned by Setup using sed command
# Post install ${PREFIX}/bin/winezgui file will be different
export DATADIR=/usr/share/winezgui # /usr will be replaced by prefix
export INSTALL_TYPE="system"
export WINEZGUIDIR=$(realpath -m ~/.local/share/winezgui)

export FLATPAK_NAME="io.github.fastrizwaan.WineZGUI"
#/These values will be changed  by Setup using sed command

# We prefer arch to win64 as wine uses wow64
export SETTINGS_FILE="${WINEZGUIDIR}/Settings.yml"
export TEMPLATES_DIR="${WINEZGUIDIR}/Templates"
export PREFIXES_DIR="${WINEZGUIDIR}/Prefixes"

export UPDATE_ICON="gtk-update-icon-cache -f -t ~/.local/share/icons >/dev/null"
export UPDATE_DESKTOP_DATABASE="update-desktop-database"

export AUTHOR="Mohammed Asif Ali Rizvan"
export EMAIL="fast.rizwaan@gmail.com"
export COPYRIGHT="GNU General Public License (GPLv3)"
export WEBSITE="https://github.com/fastrizwaan/WineZGUI"
export PROCESSNAME="$0"
export WINEVER=$(wine --version|cut -f1 -d " ")
export WBOOT_CMD="$(which wineboot) -i"

# Create Template and Prefixes Directory
mkdir -p "${WINEZGUIDIR}"
mkdir -p "${TEMPLATES_DIR}"
mkdir -p "${PREFIXES_DIR}"



#  -- Handle Wine Arch... -- #
# If Settings.yml exists and debug: is set to true
# If Settings.yml exists, get arch value from it: win32 or win64
if [ -f "${SETTINGS_FILE}" ]; then
     export WINEARCH=$(grep arch     ${SETTINGS_FILE}|cut -f2 -d ":")
     export TEMPLATE=$(grep template ${SETTINGS_FILE}|cut -f2 -d ":")
     export DEBUG=$(grep debug ${SETTINGS_FILE}|cut -f2 -d ":")
     export WINEZGUI_TEMPLATE="${TEMPLATES_DIR}/WineZGUI-${WINEARCH}"
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
fi

# If Settings.yml does not exists, add arch:win64 and template:WineZGUI-win64
if [ ! -f "${SETTINGS_FILE}" ] && [ -w ${WINEZGUIDIR} ]; then
     export WINEARCH="win64"
     export WINEZGUI_TEMPLATE="${TEMPLATES_DIR}/WineZGUI-${WINEARCH}"
     DBUG "I: Winearch not defined in ${SETTINGS_FILE}; setting arch to win64"
     DBUG "I: Prefix template not defined in ${SETTINGS_FILE}"
     DBUG "I: using ${WINEZGUI_TEMPLATE}"
     echo "arch:win64" >> "${SETTINGS_FILE}"
     echo "template:${WINEZGUI_TEMPLATE}" >> "${SETTINGS_FILE}"
     export TEMPLATE="${WINEZGUI_TEMPLATE}"
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
fi

# If Settings.yml exists and arch: value do not match win32 or win64; use win64
if [ "$WINEARCH" != "win32" ] && [ "$WINEARCH" != "win64" ] ; then
     export WINEARCH="win64"
     echo "E: arch:wine32/wine64 not found in ${SETTINGS_FILE}; using win64"
     echo "arch:win64" >> "${SETTINGS_FILE}"
     export WINEZGUI_TEMPLATE="${TEMPLATES_DIR}/WineZGUI-${WINEARCH}"
fi

# -- HANDLE TEMPLATES -- #
# If Template Directory not found, set to WineZGUI-win64 prefix template
if [ ! -d "${TEMPLATE}" ]; then
     sed "s|template:.*|template:${WINEZGUI_TEMPLATE}|g" -i "${SETTINGS_FILE}"
     export TEMPLATE="${WINEZGUI_TEMPLATE}"
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
fi



# Use current TEMPLATE as default prefix and wineprefix for WineZGUI
export DEFAULT="${TEMPLATE}"

# LD_LIBRARY_PATH
if [ -z "${LD_LIBRARY_PATH}" ]; then
     LD_LIBRARY_PATH+="/lib:/lib32:/lib64"
fi
LD_LIBRARY_PATH+="${LD_LIBRARY_PATH}:/app/lib:/app/lib32:/app/lib64:"
LD_LIBRARY_PATH+="/app/lib/i386-linux-gnu:/app/lib/wine:"
LD_LIBRARY_PATH+="/app/lib64/wine:"
LD_LIBRARY_PATH+="/usr/lib/x86_64-linux-gnu/wine:"
LD_LIBRARY_PATH+="/usr/lib/wine:"
LD_LIBRARY_PATH+="/usr/lib/wine/wine:"
LD_LIBRARY_PATH+="/usr/lib64/wine:"
LD_LIBRARY_PATH+="/usr/lib64/wine/wine:"
LD_LIBRARY_PATH+="/usr/lib/i386-linux-gnu/wine:"
LD_LIBRARY_PATH+="$(pwd)"
export LD_LIBRARY_PATH



export PATH=${PATH}:$(pwd)
export ARGV="$@"
export WINEPREFIX="${DEFAULT}"
export WINE_CMD="$(which wine)"
export WINETRICKS="$(which winetricks)"

export INFOFILE="${PREFIXDIR}/Info.yml"
export ABOUTFILE="${WINEZGUIDIR}/About.yml"

export APPLICATIONSDIR="$(realpath -m ~/.local/share/applications)"

# Where to install .desktop shortcuts?
# for system install (./setup -i) use ~/.local/share/applications/winezgui
if [ "${INSTALL_TYPE}" = "system" ]; then
     export DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui)"
else # for flatpak create subdirectory with flatpakname
     DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui/${FLATPAK_NAME})"
     export DESKTOPDIR
fi


# winezgui backup file extension
export BKP_EXT="wzt"

# On launch check required runtime dependencies
if [ ! -f "${WINEZGUIDIR}/DepsCheckOK.txt" ]; then
     # Function to print if dependencies are installed.
     FOUND=()    # Array/list to hold all found commands
     NOTFOUND=() # Array/list to hold all not found commands

     RUNTIME="wine winetricks icotool exiftool zenity wget"
     for i in ${RUNTIME} ; do
          if [ $(which $i) ]; then
               FOUND+="$i"
               FOUND+=" "
          else
               NOTFOUND+="$i"
               NOTFOUND+=" "
          fi
     done

     # Show found and not found dependencies for WineZGUI
     if [ ! -z "${NOTFOUND}" ]; then
          echo "Dependencies..."
          echo "Found: ${FOUND}"
          echo "Not Found: ${NOTFOUND}"
          zenity --info --no-wrap --title="Missing Dependencies" \
               --text="Please install these in your system:\n${NOTFOUND}"
     else
          mkdir -p "${WINEZGUIDIR}"
          echo "Yes" > "${WINEZGUIDIR}/DepsCheckOK.txt"
     fi
fi



INITIALIZE_WINEPREFIX()
{
     if [ ! -f "${1}/ReplacedSymLinks.txt" ] && [ $(which wine) ] ; then
          DBUG "I: Startup: Initializing wine Prefix... arch is ${WINEARCH}"
          # Create Prefix then delete host linked directories
          WINEDLLOVERRIDES="mscoree,mshtml=" \
          WINEPREFIX=${1} \
          WINEDEBUG=-all \
          ${WBOOT_CMD} 2>/dev/null

          # Replace home liked directory links with normal directories
          # For Games which saves in ~/Documents now will save in
          # Prefix-dir/drive_c/users/${USER}/Documents
          SAVEIFS=${IFS}
          IFS=$(echo -en "\n\b")

          DBUG "I: Startup: Removing symlinks from wineprefix"

          for i in $(find "${1}/drive_c/users/${USER}" -type l); do
               rm "${i}" && mkdir -p "${i}" && \
                    echo "${i}" >> "${1}/ReplacedSymLinks.txt"
          done
          IFS=${SAVEIFS}

          # Create an empty file to test whether prefix is created
          touch "${1}/ReplacedSymLinks.txt"
          DBUG "I: Startup: Default Wine Prefix at ${1} Created"

          # Create H: for HOME Directory for Wine Explorer
          ln -sf ${HOME} "${1}/dosdevices/h:"
          DBUG "I: Startup: Created H: symlink to ${HOME}"
     fi


     # Create Metadata About.yml for the default wine prefix
     # Update info only when wine is found
     if [ ! -f "${ABOUTFILE}" ] && [ $(which wine) ]; then
          echo "Application:${APPNAME}"        >  "${ABOUTFILE}"
          echo "Version:${APPVERSION}"         >> "${ABOUTFILE}"
          echo "Copyright:${COPYRIGHT}"        >> "${ABOUTFILE}"
          echo "Website:${WEBSITE}"            >> "${ABOUTFILE}"
          echo "Author:${AUTHOR}"              >> "${ABOUTFILE}"
          echo "E-mail:${EMAIL}"               >> "${ABOUTFILE}"
          echo "Wine:${WINE_CMD}"              >> "${ABOUTFILE}"
          echo "Template:${TEMPLATE_NAME}"     >> "${ABOUTFILE}"
          echo "Wine Version:${WINEVER}"       >> "${ABOUTFILE}"
          echo "Wine Arch:${WINEARCH}"         >> "${ABOUTFILE}"
          echo "WineZGUI Prefix:${WINEZGUIDIR}">> "${ABOUTFILE}"
          echo "Wine Prefix:${DEFAULT}"        >> "${ABOUTFILE}"
          echo "Creation Date:$(date)"         >> "${ABOUTFILE}"
          echo "Install Type:${INSTALL_TYPE}"  >> "${ABOUTFILE}"
          if ! [ -z "${FLATPAK_NAME}" ]; then  # If flatpak (variable has value)
          echo "Flatpak Name:${FLATPAK_NAME}"  >> "${ABOUTFILE}"
          fi
          DBUG "I: Startup: Created ${ABOUTFILE}"
     fi
}


# Create wine template and link it to defaults
# If Default (WINEZGUI_TEMPLATE) is not found initialize it
if [ ! -d "${WINEZGUI_TEMPLATE}" ]; then
     INITIALIZE_WINEPREFIX "${WINEZGUI_TEMPLATE}"
fi

# Main WineZGUI application window function
WineZGUI_Window()
{
     SELECTION=$(zenity --list --hide-header                      \
                        --title "${APP_WITH_VER}"                 \
                        --width=360 --height=440                  \
                        --radiolist --column " "                  \
                        --column "Action"                         \
                            TRUE "Open Exe..."                    \
                               0 "Shortcuts..."                   \
                               0 "Launchers..."                   \
                               0 "Backup..."                      \
                               0 "Restore..."                     \
                               0 "Delete..."                      \
                               0 "Configure..."                   \
                               0 "Settings..."                    \
                               0 "Kill all..."                    \
                               0 "More..."                        \
                               0 "Help..."                        \
                               0 "About..."                       \
                               0 "Quit..."                        \
                          --text "<b>Wine GUI using Zenity...</b>")

     # Exit if Cancel is clicked
     if [ -z "${SELECTION}" ] ; then
          DBUG "I: Cancel Selected. Bye!"
          exit 0
     fi

     # Open EXE... Opens file dialog
     if [ "${SELECTION}" = "Open Exe..." ]; then
          DBUG "I: 1:Open EXE... Selected!"
          unset SELECT_FILE
          SELECT_FILE="$(zenity --file-filter="*.exe *.msi" --file-selection \
                                --title="Select a File" )"
          #
          SELECT_FILE_ANSWER=$?
          echo "SELECT_FILE = $SELECT_FILE"
          # If no exe is selected
          if [ -z "${SELECT_FILE}" ];  then
               DBUG "I: 2:Open EXE... Cancelled!"
               WineZGUI_Window   ; # Go back to Main Window
          fi

          # 2.3 if User selects cancel / no
          if [ ${SELECT_FILE_ANSWER} -eq 0 ]; then
               DBUG "I: 3:Open Exe:\"${EXE_FILE}\" Selected!";
               export EXE_FILE="${SELECT_FILE}"
               OPEN_EXE_FUNCTION
          fi

          if [ ${SELECT_FILE_ANSWER} -eq 1 ]; then
               DBUG "I: 4:ANSWER = 1 Cancelled!"
               WineZGUI_Window
          fi
     fi

     if [ "${SELECTION}" = "Shortcuts..."  ]; then
          source ${DATADIR}/winezgui-list-available-scripts
          LIST_AVAILABLE_SCRIPTS

          # Directly start the exe with wine program
          SCRIPT_NAME="$(echo ${SELECTED_SCRIPT}|grep -E "PROGNAME=")"
          echo "SELECTED_SCRIPT = $SELECTED_SCRIPT"
          export LAUNCH="True"
          ${SELECTED_SCRIPT} launch
          WineZGUI_Window
     fi

     if [ "${SELECTION}" = "Launchers..."  ]; then
          source ${DATADIR}/winezgui-list-available-prefixes
          LIST_AVAILABLE_PREFIXES

          # Launch the script
          SCRIPT_NAME=$(basename ${SELECTED_PREFIX})
          export LAUNCH="False"
          ${SELECTED_PREFIX}/${SCRIPT_NAME}.sh
          WineZGUI_Window
     fi

     # Create, Modify, Delete Templates
     if [ "${SELECTION}" = "Backup..." ]; then
          source ${DATADIR}/winezgui-backup-restore-function
          source ${DATADIR}/winezgui-list-available-prefixes
          LIST_AVAILABLE_PREFIXES

          # Launch Backup from the selected prefix script
          SCRIPT_NAME=$(basename ${SELECTED_PREFIX})
          ${SELECTED_PREFIX}/${SCRIPT_NAME}.sh backup
          WineZGUI_Window

     fi

     # ====================== Restore ================================= #
     if [ "${SELECTION}" = "Restore..." ] ; then
          DBUG "I: Restore... Selected!"
          # Ask user to select the .wzt backup file to restore
          WZT_FILE="$(zenity                     \
          --file-filter=*.${BKP_EXT}          \
          --file-selection                      \
          --title="Select WineZGUI Backup File" \
     )"

          # If no Backup file is selected, or cancel is clicked
          if [ -z "${WZT_FILE}" ]; then
               DBUG "I: Restore: Cancelled!"
               unset WZT_FILE  ; # Empty variable

          else
               # Backup_Function Restore_Function()
               source ${DATADIR}/winezgui-backup-restore-function
               source ${DATADIR}/winezgui-restore-wzt
               RESTORE_WZT_FILE
          fi # -z "${WZT_FILE}"

          # Clear temporary used variables
          unset WZT_FILE
          unset FOUND_PREFIX_DIR
          unset FOUND_DESKTOP_FILE
          unset FOUND_SCRIPT_FILE
          unset PREFIXNAME
          unset GN

          # Go back to Main Window
          WineZGUI_Window
     fi


     if [ "${SELECTION}" = "Configure..." ] ;then
          source ${DATADIR}/winezgui-configure
          CONFIGURE
          WineZGUI_Window
     fi

     # Settings
     if [ "${SELECTION}" = "Settings..."  ]; then
          source ${DATADIR}/winezgui-settings
          SETTINGS
          WineZGUI_Window
     fi

     # More
     if [ "${SELECTION}" = "More..."  ]; then
          source ${DATADIR}/winezgui-more
          MORE
          WineZGUI_Window
     fi
     # Delete
     if [ "${SELECTION}" = "Delete..."  ]; then
          source ${DATADIR}/winezgui-delete-prefix
          DELETE_PREFIX
          WineZGUI_Window
     fi

     if [ "${SELECTION}" = "Help..." ]; then
          DBUG "I: Help... Selected!"
          source ${DATADIR}/winezgui-show-help
          SHOW_HELP
          WineZGUI_Window
          # Customize
     fi

     # ====================== About ================================== #
     if [ "${SELECTION}" = "About..." ]; then
          DBUG "I: About... Selected!"
          # Text is more, so we need to format it, with sed in pango markup
          unset TEXT
          TEXT="$(cat ${ABOUTFILE} \
          |sed "s/https:/https|/g" \
          |sed -E "s/([0-9]):([0-9])/\1|\2/g" \
          |sed "s/:/,:,/g" \
          |column -t -s ","      \
          |sed -E "s/^(.*:)/<tt><b>\1<\/b><\/tt>/" \
          |sed -E "s/^(.*)$/<small>\1<\/small>/" \
          |sed "s/|/:/g" )"
          zenity --info --no-wrap --text "${TEXT}"
          WineZGUI_Window
     fi
     # ========================= Kill all ============================ #
     # It is a required feature, users will have trouble if
     # some wine application hang or stay resident
     if [ "${SELECTION}" = "Kill all..." ] ; then
          DBUG "I: Kill all... Selected!"
          DBUG "I: Kill all: exiting ${APPNAME}!"
          # for killing all wine instance from flaptak sandbox
          if [ $(flatpak-spawn echo 0 2>/dev/null) ] ; then
               # flatpak wine and winezgui will be killed
               flatpak-spawn --host flatpak kill ${FLATPAK_NAME}
          else
               # Find all process which ends with .exe and kill them
               WINE_PROCESSES=$( ps -aux             | \
                         grep -i "\.exe"     | \
                         sed "s/\( \)*/\1/g" | \
                         cut -f2 -d " "
               )
               for PROCESS in ${WINE_PROCESSES}; do
                    kill -9 ${PROCESS} 2>/dev/null
               done
               # also kill wineserver to kill explorer, etc.
               wineserver -k
               # exit winezgui also for consistent behavior with flatpak
               # else host will not exit, but flatpak version will exit
               # on using Kill all process
               exit 0
          fi

          # Go back to menu, exit above will not let next line work
     fi


     # ====================== Quit ================================== #
     if [ "${SELECTION}" = "Quit..." ] ; then
          DBUG "I: Quit Selected..."
          DBUG "I: Magic! :-)"
          exit 0
     fi



} # End of WineZGUI_Window
# END of "Start WineZGUI window when no argument is supplied" section

#------------------------------- Startup -----------------------------#
# on launch, if no argument is provided
if [ $# -eq 0  ]; then
     DBUG "I: Startup: No arguments supplied..."
else

     DBUG "I: Startup: Checking ${EXE_FILE}"
     EXE_FILE="$(realpath -m "$1")"
     EXE_NAME=$(basename "${EXE_FILE}")
     EXE_PATH=$(dirname  "${EXE_FILE}")
     EXE_NOSP=$(echo ${EXE_NAME}|tr " " "_");
     EXE_LESS=$(echo ${EXE_NOSP}|sed "s/\.[Ee][Xx][Ee]//" \
          |sed "s/\.[Mm][Ss][Ii]//")
     EXE_EXT="${EXE_FILE##*.}"
     WINEPREFIX_SUBDIR="${PREFIXES_DIR}/${EXE_LESS}"

     # some games need to cd to the dir to work
     export base=$(basename "$1")
     export dire=$(dirname  "$1")

     # if arugment is not an exe file, then quit
     IS_EXE="$(echo ${EXE_EXT}|tr A-Z a-z)"

     # Check if the argument is exe or msi or wzt
     if [ "${IS_EXE}" != "exe" ] && [ "${IS_EXE}" != "msi" ] && \
        [ "${IS_EXE}" != "wzt" ] ; then

          echo "E: Startup: \"${EXE_NAME}\" is not an EXE file"
          Mesg "I: Startup: Please provide an exe, msi, or a wzt file..."
          DBUG "I: Startup: Exiting..."
          exit 1

     fi
fi

## On 1st launch create default wine prefix
### Create a default wine prefix directory ###
if ! [ -d "${WINEZGUI_TEMPLATE}" ]; then
     DBUG "I: Startup: ${WINEZGUI_TEMPLATE} does not exist, creating.."
     mkdir -p "${WINEZGUI_TEMPLATE}"
fi

# ====================== Open EXE ================================= #
OPEN_EXE_FUNCTION(){
     if [ -f "${EXE_FILE}"  ] ; then

          if [ "${IS_EXE}" = "wzt" ]; then
               export WZT_FILE="${EXE_FILE}"
               DBUG "I: Startup: WineZGUI Backup file submitted"
               source ${DATADIR}/winezgui-backup-restore-function
               source ${DATADIR}/winezgui-restore-wzt
               RESTORE_WZT_FILE
               DBUG "I: Startup: Exiting main program after restoring backup"
               exit 0;
          fi
          DBUG "I: Open EXE: exe is ${EXE_FILE}"
          # Prompt to Launch exe with default or existing Prefix of that exe
          EXE_FILE=$(realpath -m "${EXE_FILE}")
          EXE_NAME=$(basename    "${EXE_FILE}")
          EXE_PATH=$(dirname     "${EXE_FILE}")
          EXE_NOSP=$(echo ${EXE_NAME} |tr " " "_");
          EXE_LESS=$(echo ${EXE_NOSP}|sed "s/\.[Ee][Xx][Ee]//" \
               |sed "s/\.[Mm][Ss][Ii]//")
          EXE_EXT="${EXE_FILE##*.}"
          WINEPREFIX_SUBDIR="${PREFIXES_DIR}/${EXE_LESS}"
          # If existing prefix exists for the exe
          SCRIPT_TO_RUN="${WINEZGUIDIR}/${EXE_LESS}/${EXE_LESS}.sh"
          DEBUG="y"
          DBUG "SCRIPT_TO_RUN $SCRIPT_TO_RUN"
          unset DEBUG
          if [ -f  "${SCRIPT_TO_RUN}" ] ; then
               DBUG "I:OE: Prefix found for ${EXE_NAME}! Launching..."
               
               "${SCRIPT_TO_RUN}" # Run the script file associated with the exe

               # If open exe closes/deleted/cancelled by user from winezgui,
               #  continue with winezgui, this is more of an expected behavior
               DBUG "I: Open EXE: Re-Launching Main function after ${EXE_LESS}.sh"
               WineZGUI_Window

          else
               DBUG "I: Open EXE: Creating Prefix for ${EXE_FILE}"
               ${DATADIR}/winezgui-create-prefix "${EXE_FILE}"
               # Launch after creating new prefix
               DBUG "I: Open EXE: Created Script:" \
                    "${WINEPREFIX_SUBDIR}/${EXE_LESS}.sh"
               DBUG "I: Open EXE: Created Script: Launching ${EXE_LESS}.sh"
               ${WINEPREFIX_SUBDIR}/"${EXE_LESS}.sh"

               # Exit after script file is created
               echo "WineZGUI !!!not!!! Exiting after launching ${EXE_LESS}.sh..."
               #exit 0
               WineZGUI_Window
          fi
     fi
}

# Initialize Wineprefix for use
INITIALIZE_WINEPREFIX "${WINEZGUI_TEMPLATE}"

# Start WineZGUI when no argument is supplied
if [ $# -eq 0 ] ; then
     DBUG "I: Startup: Launching WineZGUI"
     WineZGUI_Window
fi
# Open exe function handles exe argument
OPEN_EXE_FUNCTION

