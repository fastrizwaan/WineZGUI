#!/usr/bin/env bash
# ============================================================================ #
# WineZGUI (winezgui) (C) GPL3 Mohammed Asif Ali Rizvan <fast.rizwaan@gmail.com>
# URL: https://github.com/fastrizwaan/WineZGUI
# winezgui main program to run or create a wine prefix for a selected exe
# ============================================================================ #
export APPNAME=WineZGUI
export APPVERSION="git"
export APP_WITH_VER="${APPNAME}-${APPVERSION}"

# HANDLE CLI ARGUMENT
# Function Show help
ShowHelp ()
{
  echo "WineZGUI - Wine GUI using Zenity "
  echo "Usage:"
  echo "$0 <argument>"
  echo ""
  echo "Argument:"
  echo "exe/msi file      Creates prefix for the given exe file, else launch"
  echo "wzt file          Restore a backed up prefix or bundle file (.wzt)"
  echo "Options:"
  echo "-v, --version     WinzeGUI version"
  echo "-h, --help        Shows this help!"
  echo ""
  echo "Examples:"
  echo "$0 setup.exe"
  echo "$0 putty_installer.msi"
  echo "$0 Notepadd.wzt"

}

# parse command line arguments
# HANDLE CLI ARGUMENT
for i in "$@"
do
case $i in
    -v|--version)
    echo "${APPVERSION}"
    exit
    ;;
    -h|--help)
    ShowHelp
    exit
    ;;
esac
done


# If prefix=nothing then install to /usr
if [ -z "${INSTALL_PREFIX}" ]; then
     INSTALL_PREFIX="/usr"
fi

# Flatpak Specific Commands and Variables
if [ "${FLATPAK}" = "true" ]; then
     echo setting prefix and paths for flatpak
     INSTALL_PREFIX="/app"
     TEMPDIR="\$(realpath -m \~/.var/app/${FLATPAK_NAME}/data/tmp)"
     WINEZGUIDIR="\$(realpath -m \~/.var/app/${FLATPAK_NAME}/data/winezgui)"
     INSTALL_TYPE=\"flatpak\"
fi

# set -x

# Only show debug message when DEBUG="Y" or DEBUG="anything"
# Use unset DEBUG will stop messages.
DBUG()
{ 
     if [ "${DEBUG}" = "Y" ] || [ ! -z "${DEBUG}" ]; then
          echo "${1}"
     fi
}

# Variables
# These values will be assigned by Setup using sed command
# Post install ${PREFIX}/bin/winezgui file will be different
export DATADIR=/usr/share/winezgui # /usr will be replaced by prefix
export INSTALL_TYPE="system"
export WINEZGUIDIR=$(realpath -m ~/.local/share/winezgui)

export FLATPAK_NAME="io.github.fastrizwaan.WineZGUI"
#/These values will be changed  by Setup using sed command

# We prefer arch to win64 as wine uses wow64
export SETTINGS_FILE="${WINEZGUIDIR}/Settings.yml"
export TEMPLATES_DIR="${WINEZGUIDIR}/Templates"
export PREFIXES_DIR="${WINEZGUIDIR}/Prefixes"

export UPDATE_ICON="gtk-update-icon-cache -f -t ~/.local/share/icons >/dev/null"
export UPDATE_DESKTOP_DATABASE="update-desktop-database"

export AUTHOR="Mohammed Asif Ali Rizvan"
export EMAIL="fast.rizwaan@gmail.com"
export COPYRIGHT="GNU General Public License (GPLv3)"
export WEBSITE="https://github.com/fastrizwaan/WineZGUI"
export PROCESSNAME="$0"
export WINEVER=$(wine --version|cut -f1 -d " ")
export WBOOT_CMD="$(which wineboot) -i"

# Create Template and Prefixes Directory
mkdir -p "${WINEZGUIDIR}"
mkdir -p "${TEMPLATES_DIR}"
mkdir -p "${PREFIXES_DIR}"



#  -- Handle Wine Arch... -- #
# If Settings.yml exists and debug: is set to true
# If Settings.yml exists, get arch value from it: win32 or win64
if [ -f "${SETTINGS_FILE}" ]; then
     export WINEARCH=$(grep arch     ${SETTINGS_FILE}|cut -f2 -d ":")
     export TEMPLATE=$(grep template ${SETTINGS_FILE}|cut -f2 -d ":")
     export DEBUG=$(grep debug ${SETTINGS_FILE}|cut -f2 -d ":")
     export WineZGUI_TEMPLATE="${TEMPLATES_DIR}/WineZGUI-${WINEARCH}"
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
fi

# If Settings.yml does not exists, add arch:win64 and template:WineZGUI-win64
if [ ! -f "${SETTINGS_FILE}" ] && [ -w ${WINEZGUIDIR} ]; then
     export WINEARCH="win64"
     export WineZGUI_TEMPLATE="${TEMPLATES_DIR}/WineZGUI-${WINEARCH}"
     DBUG "I: Winearch not defined in ${SETTINGS_FILE}; setting arch to win64"
     DBUG "I: Prefix template not defined in ${SETTINGS_FILE}"
     DBUG "I: using ${WineZGUI_TEMPLATE}"
     echo "arch:win64" >> "${SETTINGS_FILE}"
     echo "template:${WineZGUI_TEMPLATE}" >> "${SETTINGS_FILE}"
     export TEMPLATE="${WineZGUI_TEMPLATE}"
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
fi

# If Settings.yml exists and arch: value do not match win32 or win64; use win64
if [ "$WINEARCH" != "win32" ] && [ "$WINEARCH" != "win64" ] ; then
     export WINEARCH="win64"
     echo "E: arch:wine32/wine64 not found in ${SETTINGS_FILE}; using win64"
     echo "arch:win64" >> "${SETTINGS_FILE}"
     export WineZGUI_TEMPLATE="${TEMPLATES_DIR}/WineZGUI-${WINEARCH}"
fi

# -- HANDLE TEMPLATES -- #
# If Template Directory not found, set default to WineZGUI-win64 prefix template
if [ ! -d "${TEMPLATE}" ]; then
     sed "s|template:.*|template:${WineZGUI_TEMPLATE}|g" -i "${SETTINGS_FILE}"
     export TEMPLATE="${WineZGUI_TEMPLATE}"
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
fi

# Use current TEMPLATE as default $WINEPREFIX for WineZGUI
export DEFAULT="${TEMPLATE}"

# LD_LIBRARY_PATH
if [ -z "${LD_LIBRARY_PATH}" ]; then
     LD_LIBRARY_PATH+="/lib:/lib32:/lib64"
fi
LD_LIBRARY_PATH+="${LD_LIBRARY_PATH}:/app/lib:/app/lib32:/app/lib64:"
LD_LIBRARY_PATH+="/app/lib/i386-linux-gnu:/app/lib/wine:"
LD_LIBRARY_PATH+="/app/lib64/wine:"
LD_LIBRARY_PATH+="/usr/lib/x86_64-linux-gnu/wine:"
LD_LIBRARY_PATH+="/usr/lib/wine:"
LD_LIBRARY_PATH+="/usr/lib/wine/wine:"
LD_LIBRARY_PATH+="/usr/lib64/wine:"
LD_LIBRARY_PATH+="/usr/lib64/wine/wine:"
LD_LIBRARY_PATH+="/usr/lib/i386-linux-gnu/wine:"
LD_LIBRARY_PATH+="$(pwd)"
export LD_LIBRARY_PATH

export PATH=${PATH}:$(pwd)
export ARGV="$@"
export WINEPREFIX="${DEFAULT}"
export WINE_CMD="$(which wine)"
export WINETRICKS="$(which winetricks)"

export INFOFILE="${PREFIXDIR}/Info.yml"
export ABOUTFILE="${WINEZGUIDIR}/About.yml"

export APPLICATIONSDIR="$(realpath -m ~/.local/share/applications)"

# Where to install .desktop shortcuts?
# for system install (./setup -i) use ~/.local/share/applications/winezgui
if [ "${INSTALL_TYPE}" = "system" ]; then
     export DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui)"
else # for flatpak create subdirectory with flatpakname
     DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui/${FLATPAK_NAME})"
     export DESKTOPDIR
fi

# winezgui backup file extension
export BKP_EXT="wzt"

# On launch check required runtime dependencies
if [ ! -f "${WINEZGUIDIR}/DepsCheckOK.txt" ]; then
     # Function to print if dependencies are installed.
     FOUND=()    # Array/list to hold all found commands
     NOTFOUND=() # Array/list to hold all not found commands

     RUNTIME="wine winetricks icotool exiftool zenity wget"
     for i in ${RUNTIME} ; do
          if [ $(which $i) ]; then
               FOUND+="$i"
               FOUND+=" "
          else
               NOTFOUND+="$i"
               NOTFOUND+=" "
          fi
     done

     # Show found and not found dependencies for WineZGUI
     if [ ! -z "${NOTFOUND}" ]; then
          echo "Dependencies..."
          echo "Found: ${FOUND}"
          echo "Not Found: ${NOTFOUND}"
          zenity --info --no-wrap --title="Missing Dependencies" \
               --text="Please install these in your system:\n${NOTFOUND}"
     else
          mkdir -p "${WINEZGUIDIR}"
          echo "Yes" > "${WINEZGUIDIR}/DepsCheckOK.txt"
     fi
fi



INITIALIZE_WINEPREFIX()
{
  if [ ! -f "${1}/Prefix_Initialized.txt" ] && [ $(which wine) ] ; then
       DBUG "I: Startup: Initializing wine Prefix... arch is ${WINEARCH}"
       # Create Prefix then delete host linked directories
       WINEDLLOVERRIDES="mscoree,mshtml=" \
       WINEPREFIX=${1} \
       WINEDEBUG=-all \
       ${WBOOT_CMD} 2>/dev/null

       # Replace home liked directory links with normal directories
       # For Games which saves in ~/Documents now will save in
       # Prefix-dir/drive_c/users/${USER}/Documents
       SAVEIFS=${IFS}
       IFS=$(echo -en "\n\b")

       DBUG "I: Startup: Removing symlinks from wineprefix"

       for i in $(find "${1}/drive_c/users/${USER}" -type l); do
              rm "${i}" && mkdir -p "${i}" && \
            echo "${i}" >> "${1}/Prefix_Initialized.txt"
       done
       IFS=${SAVEIFS}

       # Create an empty file to test whether prefix is created
       touch "${1}/Prefix_Initialized.txt"
       DBUG "I: Startup: Default Wine Prefix at ${1} Created"

       # Create H: for HOME Directory for Wine Explorer
       ln -sf ${HOME} "${1}/dosdevices/h:"
       DBUG "I: Startup: Created H: symlink to ${HOME}"
  fi


  # Create Metadata About.yml for the default wine prefix
  # Update info only when wine is found
  if [ ! -f "${ABOUTFILE}" ] && [ $(which wine) ]; then
       echo "Application:${APPNAME}"        >  "${ABOUTFILE}"
       echo "Version:${APPVERSION}"         >> "${ABOUTFILE}"
       echo "Copyright:${COPYRIGHT}"        >> "${ABOUTFILE}"
       echo "Website:${WEBSITE}"            >> "${ABOUTFILE}"
       echo "Author:${AUTHOR}"              >> "${ABOUTFILE}"
       echo "E-mail:${EMAIL}"               >> "${ABOUTFILE}"
       echo "Wine:${WINE_CMD}"              >> "${ABOUTFILE}"
       echo "Template:${TEMPLATE_NAME}"     >> "${ABOUTFILE}"
       echo "Wine Version:${WINEVER}"       >> "${ABOUTFILE}"
       echo "Wine Arch:${WINEARCH}"         >> "${ABOUTFILE}"
       echo "WineZGUI Prefix:${WINEZGUIDIR}">> "${ABOUTFILE}"
       echo "Wine Prefix:${DEFAULT}"        >> "${ABOUTFILE}"
       echo "Creation Date:$(date)"         >> "${ABOUTFILE}"
       echo "Install Type:${INSTALL_TYPE}"  >> "${ABOUTFILE}"
       if ! [ -z "${FLATPAK_NAME}" ]; then  # If flatpak (variable has value)
       echo "Flatpak Name:${FLATPAK_NAME}"  >> "${ABOUTFILE}"
       fi
       DBUG "I: Startup: Created ${ABOUTFILE}"
  fi
}


# Create wine template and link it to defaults
# If Default (WineZGUI_TEMPLATE) is not found initialize it
if [ ! -d "${WineZGUI_TEMPLATE}" ]; then
     INITIALIZE_WINEPREFIX "${WineZGUI_TEMPLATE}"
fi

# Main WineZGUI application window function
WineZGUI_Window()
{
     SELECTION=$(zenity --list --hide-header                      \
                        --title "${APP_WITH_VER}"                 \
                        --width=360 --height=440                  \
                        --radiolist --column " "                  \
                        --column "Action"                         \
                            TRUE "Open Exe..."                    \
                               0 "Launch..."                      \
                               0 "Prefixes..."                   \
                               0 "Backup..."                      \
                               0 "Restore..."                     \
                               0 "Delete..."                      \
                               0 "Configure..."                   \
                               0 "Settings..."                    \
                               0 "Kill all..."                    \
                               0 "More..."                        \
                               0 "Help..."                        \
                               0 "About..."                       \
                               0 "Quit..."                        \
                          --text "<b>Wine GUI using Zenity...</b>")

     # Exit if Cancel is clicked
     if [ -z "${SELECTION}" ] ; then
          DBUG "I: Cancel Selected. Bye!"
          exit 0
     fi

     # Show What is selected     
     DBUG "I: ${SELECTION} Selected!"

     if   [ "${SELECTION}" = "Open Exe..." ]; then
            source ${DATADIR}/winezgui-open-exe
            WineZGUI_Open_Exe

     elif [ "${SELECTION}" = "Launch..."  ]; then
            source ${DATADIR}/winezgui-launch
            WineZGUI_Launch
            
     elif [ "${SELECTION}" = "Prefixes..."  ]; then
            source ${DATADIR}/winezgui-prefixes
            WineZGUI_Prefixes
            
     elif [ "${SELECTION}" = "Backup..." ]; then
            source ${DATADIR}/winezgui-backup
            WineZGUI_Backup
            
     elif [ "${SELECTION}" = "Restore..." ]; then
            source ${DATADIR}/winezgui-restore
            WineZGUI_Restore
            
     elif [ "${SELECTION}" = "Configure..." ]; then
            source ${DATADIR}/winezgui-configure
            WineZGUI_Configure
            
     elif [ "${SELECTION}" = "Settings..."  ]; then
            source ${DATADIR}/winezgui-settings
            WineZGUI_Settings
            
     elif [ "${SELECTION}" = "More..."  ]; then
            source ${DATADIR}/winezgui-more
            WineZGUI_More
            
     elif [ "${SELECTION}" = "Delete..."  ]; then
            source ${DATADIR}/winezgui-delete-prefix
            WineZGUI_Delete_Prefix
            
     elif [ "${SELECTION}" = "Help..." ]; then
            source ${DATADIR}/winezgui-help
            WineZGUI_Help
            
     elif [ "${SELECTION}" = "About..." ]; then
            source ${DATADIR}/winezgui-about
            WineZGUI_About
            
     elif [ "${SELECTION}" = "Kill all..." ]; then
            source ${DATADIR}/winezgui-kill-all
            WineZGUI_Kill_All
            
     elif [ "${SELECTION}" = "Quit..." ]; then
            source ${DATADIR}/winezgui-quit
            WineZGUI_Quit
     fi
     
     # After All options 
     WineZGUI_Window
} # END of "Start WineZGUI window when no argument is supplied" section

#------------------------------- Startup -----------------------------#
# on launch, if no argument is provided
if [ $# -eq 0  ]; then
     DBUG "I: Startup: No arguments supplied..."
else

     DBUG "I: Startup: Checking ${EXE_FILE}"
     EXE_FILE="$(realpath -m "${1}")"
     EXE_NAME=$(basename "${EXE_FILE}")
     EXE_PATH=$(dirname  "${EXE_FILE}")
     EXE_NOSP=$(echo ${EXE_NAME}|tr " " "_");
     EXE_LESS=$(echo ${EXE_NOSP}|sed "s/\.[Ee][Xx][Ee]//" \
                                |sed "s/\.[Mm][Ss][Ii]//")
     EXE_EXT="${EXE_FILE##*.}"
     WINEPREFIX_SUBDIR="${PREFIXES_DIR}/${EXE_LESS}"

     # some games need to cd to the dir to work
     export base=$(basename "${1}")
     export dire=$(dirname  "${1}")

     # if arugment is not an exe file, then quit
     IS_EXE="$(echo ${EXE_EXT}|tr A-Z a-z)"

     # Check if the argument is exe or msi or wzt
     if [ "${IS_EXE}" != "exe" ] && [ "${IS_EXE}" != "msi" ] && \
        [ "${IS_EXE}" != "wzt" ] ; then

          echo "E: Startup: \"${EXE_NAME}\" is not an EXE file"
          Mesg "I: Startup: Please provide an exe, msi, or a wzt file..."
          DBUG "I: Startup: Exiting..."
          exit 1

     fi
fi

## On 1st launch create default wine prefix
### Create a default wine prefix directory ###
if ! [ -d "${WineZGUI_TEMPLATE}" ]; then
     DBUG "I: Startup: ${WineZGUI_TEMPLATE} does not exist, creating.."
     mkdir -p "${WineZGUI_TEMPLATE}"
fi

# ====================== Open EXE ================================= #
OPEN_EXE_FUNCTION(){
     if [ -f "${EXE_FILE}"  ] ; then

          if [ "${IS_EXE}" = "wzt" ]; then
               export WZT_FILE="${EXE_FILE}"
               DBUG "I: Startup: WineZGUI Backup file submitted"
               source ${DATADIR}/winezgui-backup-restore-function
               source ${DATADIR}/winezgui-restore-wzt
               RESTORE_WZT_FILE
               DBUG "I: Startup: Exiting main program after restoring backup"
               exit 0;
          fi
          DBUG "I: Open EXE: exe is ${EXE_FILE}"
          # Prompt to Launch exe with default or existing Prefix of that exe
          EXE_FILE=$(realpath -m "${EXE_FILE}")
          EXE_NAME=$(basename    "${EXE_FILE}")
          EXE_PATH=$(dirname     "${EXE_FILE}")
          EXE_NOSP=$(echo ${EXE_NAME} |tr " " "_");
          EXE_LESS=$(echo ${EXE_NOSP}|sed "s/\.[Ee][Xx][Ee]//" \
               |sed "s/\.[Mm][Ss][Ii]//")
          EXE_EXT="${EXE_FILE##*.}"
          WINEPREFIX_SUBDIR="${PREFIXES_DIR}/${EXE_LESS}"
          # If existing prefix exists for the exe
          SCRIPT_TO_RUN="${WINEZGUIDIR}/${EXE_LESS}/${EXE_LESS}.sh"
          DEBUG="y"
          DBUG "SCRIPT_TO_RUN $SCRIPT_TO_RUN"
          unset DEBUG
          if [ -f  "${SCRIPT_TO_RUN}" ] ; then
               DBUG "I:OE: Prefix found for ${EXE_NAME}! Launching..."
               
               "${SCRIPT_TO_RUN}" # Run the script file associated with the exe

               # If open exe closes/deleted/cancelled by user from winezgui,
               #  continue with winezgui, this is more of an expected behavior
               DBUG "I: Open EXE: Re-Launching Main function after ${EXE_LESS}.sh"
               WineZGUI_Window

          else
               DBUG "I: Open EXE: Creating Prefix for ${EXE_FILE}"
               ${DATADIR}/winezgui-create-prefix "${EXE_FILE}"
               # Launch after creating new prefix
               DBUG "I: Open EXE: Created Script:" \
                    "${WINEPREFIX_SUBDIR}/${EXE_LESS}.sh"
               DBUG "I: Open EXE: Created Script: Launching ${EXE_LESS}.sh"
               ${WINEPREFIX_SUBDIR}/"${EXE_LESS}.sh"

               # Exit after script file is created
               echo "WineZGUI !!!not!!! Exiting after launching ${EXE_LESS}.sh..."
               #exit 0
               WineZGUI_Window
          fi
     fi
}

# Initialize Wineprefix for use
INITIALIZE_WINEPREFIX "${WineZGUI_TEMPLATE}"

# Start WineZGUI when no argument is supplied
if [ $# -eq 0 ] ; then
     DBUG "I: Startup: Launching WineZGUI"
     WineZGUI_Window
fi
# Open exe function handles exe argument
OPEN_EXE_FUNCTION

