#!/usr/bin/env bash
# ============================================================================ #
# WineZGUI (winezgui) (C) GPL3 Mohammed Asif Ali Rizvan <fast.rizwaan@gmail.com>
# URL: https://github.com/fastrizwaan/WineZGUI
# winezgui main program to run or create a wine prefix for a selected exe
# ============================================================================ #
HEADER="$(basename ${0})"
echo "I: $(basename ${0}): Launched!"
export APPNAME=WineZGUI
export APPVERSION="git"
export APP_WITH_VER="${APPNAME}-${APPVERSION}"

# HANDLE CLI ARGUMENT
# Function Show help
ShowHelp ()
{
  DBUG "I: $(basename ${0}): Launched ${FUNCNAME[0]}"
  echo "WineZGUI - Wine GUI using Zenity "
  echo "Usage:"
  echo "$(basename "${0}") <argument>"
  echo ""
  echo "Argument:"
  echo "exe/msi file      Creates prefix for the given exe file, else launch"
  echo "wzt file          Restore a backed up prefix or bundle file (.wzt)"
  echo "Options:"
  echo "-v, --version     WinzeGUI version"
  echo "-h, --help        Shows this help!"
  echo ""
  echo "Examples:"
  echo "$(basename "${0}") setup.exe"
  echo "$(basename "${0}") putty_installer.msi"
  echo "$(basename "${0}") Notepadd.wzt"

}

# parse command line arguments
# HANDLE CLI ARGUMENT
for i in "$@"
do
case $i in
    -v|--version)
    echo "${APPVERSION}"
    exit
    ;;
    -h|--help)
    ShowHelp
    exit
    ;;
esac
done


# If prefix=nothing then install to /usr
if [ -z "${INSTALL_PREFIX}" ]; then
     INSTALL_PREFIX="/usr"
fi

# Flatpak Specific Commands and Variables
if [ "${FLATPAK}" = "true" ]; then
     echo setting prefix and paths for flatpak
     INSTALL_PREFIX="/app"
     TEMPDIR="\$(realpath -m \~/.var/app/${FLATPAK_NAME}/data/tmp)"
     WINEZGUIDIR="\$(realpath -m \~/.var/app/${FLATPAK_NAME}/data/winezgui)"
     INSTALL_TYPE=\"flatpak\"
fi

# set -x

# Only show debug message when DEBUG="Y" or DEBUG="anything"
# Use unset DEBUG will stop messages.
DBUG()
{
     if [ "${DEBUG}" = "Y" ] || [ ! -z "${DEBUG}" ]; then
          echo "${1}"
     fi
}

# Variables
# These values will be assigned by Setup using sed command
# Post install ${PREFIX}/bin/winezgui file will be different
export DATADIR=/usr/share/winezgui # /usr will be replaced by prefix
export INSTALL_TYPE="system"
export WINEZGUIDIR=$(realpath -m ~/.local/share/winezgui)

export FLATPAK_NAME="io.github.fastrizwaan.WineZGUI"
#/These values will be changed  by Setup using sed command

# We prefer arch to win64 as wine uses wow64
export SETTINGS_FILE="${WINEZGUIDIR}/Settings.yml"
export TEMPLATES_DIR="${WINEZGUIDIR}/Templates"
export PREFIXES_DIR="${WINEZGUIDIR}/Prefixes"

export UPDATE_ICON="gtk-update-icon-cache -f -t ~/.local/share/icons >/dev/null"
export UPDATE_DESKTOP_DATABASE="update-desktop-database"

export AUTHOR="Mohammed Asif Ali Rizvan"
export EMAIL="fast.rizwaan@gmail.com"
export COPYRIGHT="GNU General Public License (GPLv3)"
export WEBSITE="https://github.com/fastrizwaan/WineZGUI"
export PROCESSNAME="$0"
export WINEVER=$(wine --version|cut -f1 -d " ")
export WBOOT_CMD="$(which wineboot) -i"

# Check if writable
if [ ! -w "$(dirname ${WINEZGUIDIR})" ]; then
     echo "I: ${HEADER}: Cannot write to HOME directory. Bye!"
     exit 1
fi
# Create Main Directories
if [ ! -d "${WINEZGUIDIR}" ]; then
     mkdir -p "${WINEZGUIDIR}" &&   \
     echo "I: ${HEADER}: Created: ${WINEZGUIDIR}"
fi
if [ ! -d "${TEMPLATES_DIR}" ]; then
     mkdir -p "${TEMPLATES_DIR}" && \
     echo "I: ${HEADER}: Created: ${TEMPLATES_DIR}"
fi
if [ ! -d "${PREFIXES_DIR}" ]; then
     mkdir -p "${PREFIXES_DIR}"  && \
     echo "I: ${HEADER}: Created: ${PREFIXES_DIR}"
fi


#  -- Handle Wine Arch... -- #
# If Settings.yml exists and debug: is set to true
# If Settings.yml exists, get arch value from it: win32 or win64
if [ -f "${SETTINGS_FILE}" ]; then
     export WINEARCH=$(grep arch    ${SETTINGS_FILE}|cut -f2 -d ":")
     export TEMPLATE=$(grep template ${SETTINGS_FILE}|cut -f2 -d ":")
     export DEBUG=$(grep debug ${SETTINGS_FILE}|cut -f2 -d ":")
     export WINEZGUI_TEMPLATE="${TEMPLATES_DIR}/WineZGUI-${WINEARCH}"
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
fi

# If Settings.yml does not exists, add arch:win64 and template:WineZGUI-win64
if [ ! -f "${SETTINGS_FILE}" ] && [ -w ${WINEZGUIDIR} ]; then
     export WINEARCH="win64"
     export WINEZGUI_TEMPLATE="${TEMPLATES_DIR}/WineZGUI-${WINEARCH}"
     DBUG "I: Winearch not defined in ${SETTINGS_FILE}; setting arch to win64"
     DBUG "I: Prefix template not defined in ${SETTINGS_FILE}"
     DBUG "I: using ${WINEZGUI_TEMPLATE}"
     echo "arch:win64" >> "${SETTINGS_FILE}"
     echo "template:${WINEZGUI_TEMPLATE}" >> "${SETTINGS_FILE}"
     export TEMPLATE="${WINEZGUI_TEMPLATE}"
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
fi

# If Settings.yml exists and arch: value do not match win32 or win64; use win64
if [ "$WINEARCH" != "win32" ] && [ "$WINEARCH" != "win64" ]; then
     export WINEARCH="win64"
     echo "E: arch:wine32/wine64 not found in ${SETTINGS_FILE}; using win64"
     echo "arch:win64" >> "${SETTINGS_FILE}"
     export WINEZGUI_TEMPLATE="${TEMPLATES_DIR}/WineZGUI-${WINEARCH}"
fi

# -- HANDLE Templates -- #
# If Template Directory not found, set default to WineZGUI-win64 prefix template
if [ ! -d "${TEMPLATE}" ]; then
     sed "s|template:.*|template:${WINEZGUI_TEMPLATE}|g" -i "${SETTINGS_FILE}"
     export TEMPLATE="${WINEZGUI_TEMPLATE}"
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
fi

# Use current TEMPLATE as default $WINEPREFIX for WineZGUI
export DEFAULT="${TEMPLATE}"

# LD_LIBRARY_PATH
if [ -z "${LD_LIBRARY_PATH}" ]; then
     LD_LIBRARY_PATH+="/lib:/lib32:/lib64"
fi
LD_LIBRARY_PATH+="${LD_LIBRARY_PATH}:/app/lib:/app/lib32:/app/lib64:"
LD_LIBRARY_PATH+="/app/lib/i386-linux-gnu:/app/lib/wine:"
LD_LIBRARY_PATH+="/app/lib64/wine:"
LD_LIBRARY_PATH+="/usr/lib/x86_64-linux-gnu/wine:"
LD_LIBRARY_PATH+="/usr/lib/wine:"
LD_LIBRARY_PATH+="/usr/lib/wine/wine:"
LD_LIBRARY_PATH+="/usr/lib64/wine:"
LD_LIBRARY_PATH+="/usr/lib64/wine/wine:"
LD_LIBRARY_PATH+="/usr/lib/i386-linux-gnu/wine:"
LD_LIBRARY_PATH+="$(pwd)"
export LD_LIBRARY_PATH

export PATH=${PATH}:$(pwd)
export ARGV="$@"
export WINEPREFIX="${DEFAULT}"
export WINE_CMD="$(which wine)"
export WINETRICKS="$(which winetricks)"

export INFOFILE="${PREFIXDIR}/Info.yml"
export ABOUTFILE="${WINEZGUIDIR}/About.yml"

export APPLICATIONSDIR="$(realpath -m ~/.local/share/applications)"

# Where to install .desktop shortcuts?
# for system install (./setup -i) use ~/.local/share/applications/winezgui
if [ "${INSTALL_TYPE}" = "system" ]; then
     export DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui)"
else # for flatpak create subdirectory with flatpakname
     DESKTOPDIR="$(realpath -m ${APPLICATIONSDIR}/winezgui/${FLATPAK_NAME})"
     export DESKTOPDIR
fi

# winezgui backup file extension
export BKP_EXT="wzt"

# On launch check required runtime dependencies
if [ ! -f "${WINEZGUIDIR}/DepsCheckOK.txt" ]; then
     # Function to print if dependencies are installed.
     FOUND=()    # Array/list to hold all found commands
     NOTFOUND=() # Array/list to hold all not found commands

     RUNTIME="wine winetricks icotool exiftool zenity wget"
     for i in ${RUNTIME} ; do
          if [ $(which $i) ]; then
               FOUND+="$i"
               FOUND+=" "
          else
               NOTFOUND+="$i"
               NOTFOUND+=" "
          fi
     done

     # Show found and not found dependencies for WineZGUI
     if [ ! -z "${NOTFOUND}" ]; then
          echo "Dependencies..."
          echo "Found: ${FOUND}"
          echo "Not Found: ${NOTFOUND}"
          zenity --info --no-wrap --title="Missing Dependencies" \
               --text="Please install these in your system:\n${NOTFOUND}"
     else
          mkdir -p "${WINEZGUIDIR}"
          echo "Yes" > "${WINEZGUIDIR}/DepsCheckOK.txt"
     fi
fi


# Main WineZGUI application window function
WineZGUI_Window()
{
  HEADER="$(basename ${0})"
  SELECTION=$(zenity --list --hide-header                      \
                     --title "${APP_WITH_VER}"                 \
                     --width=360 --height=440                  \
                     --radiolist --column " "                  \
                     --column "Action"                         \
                         TRUE "Open Exe..."                    \
                            0 "Launch..."                      \
                            0 "Script..."                      \
                            0 "Backup..."                      \
                            0 "Restore..."                     \
                            0 "Delete..."                      \
                            0 "Template..."                    \
                            0 "Settings..."                    \
                            0 "Kill all..."                    \
                            0 "More..."                        \
                            0 "Help..."                        \
                            0 "About..."                       \
                            0 "Quit..."                        \
                       --text "<b>Wine GUI using Zenity...</b>")

  # Exit if Cancel is clicked
  if [ -z "${SELECTION}" ]; then
       DBUG "I: ${HEADER}: Cancel Selected. Bye!"
       exit 0
  fi

  # Show What is selected
  DBUG "I: ${HEADER}: ${SELECTION} Selected!"

  if   [ "${SELECTION}" = "Open Exe..." ]; then
         source ${DATADIR}/winezgui-open-exe
         WineZGUI_Open_Exe

  elif [ "${SELECTION}" = "Launch..."  ]; then
         source ${DATADIR}/winezgui-launch
         WineZGUI_Launch

  elif [ "${SELECTION}" = "Script..."  ]; then
         source ${DATADIR}/winezgui-script
         WineZGUI_Script

  elif [ "${SELECTION}" = "Backup..." ]; then
         source ${DATADIR}/winezgui-backup
         WineZGUI_Backup

  elif [ "${SELECTION}" = "Restore..." ]; then
         source ${DATADIR}/winezgui-restore
         WineZGUI_Restore

  elif [ "${SELECTION}" = "Template..." ]; then
         source ${DATADIR}/winezgui-template
         WineZGUI_Template

  elif [ "${SELECTION}" = "Settings..."  ]; then
         source ${DATADIR}/winezgui-settings
         WineZGUI_Settings

  elif [ "${SELECTION}" = "More..."  ]; then
         source ${DATADIR}/winezgui-more
         WineZGUI_More

  elif [ "${SELECTION}" = "Delete..."  ]; then
         source ${DATADIR}/winezgui-delete-prefix
         WineZGUI_Delete_Prefix

  elif [ "${SELECTION}" = "Help..." ]; then
         source ${DATADIR}/winezgui-help
         WineZGUI_Help

  elif [ "${SELECTION}" = "About..." ]; then
         source ${DATADIR}/winezgui-about
         WineZGUI_About

  elif [ "${SELECTION}" = "Kill all..." ]; then
         source ${DATADIR}/winezgui-kill-all
         WineZGUI_Kill_All

  elif [ "${SELECTION}" = "Quit..." ]; then
         source ${DATADIR}/winezgui-quit
         WineZGUI_Quit
  fi

  # Update template and arch from Settings.yml
  if [ -f "${SETTINGS_FILE}" ]; then
     export WINEARCH=$(grep arch    ${SETTINGS_FILE}|cut -f2 -d ":")
     export TEMPLATE=$(grep template ${SETTINGS_FILE}|cut -f2 -d ":")
     export DEBUG=$(grep debug ${SETTINGS_FILE}|cut -f2 -d ":")
     export WINEZGUI_TEMPLATE="${TEMPLATES_DIR}/WineZGUI-${WINEARCH}"
     export TEMPLATE_NAME=$(basename ${TEMPLATE})
  fi
  
  # After All options  
  WineZGUI_Window
} # END of "Start WineZGUI window when no argument is supplied" section

#------------------------------- Startup -----------------------------#
# If 1 arugment is given, i.e., >0 and <2 = 1
if [ $# -gt 0 ] && [ $# -lt 2 ]; then
     HEADER="$(basename ${0})"
     DBUG "I: ${HEADER}: Startup: Checking ${1}"
     EXE_FILE="$(realpath -m "${1}")"
     EXE_NAME=$(basename "${EXE_FILE}")
     EXE_PATH=$(dirname  "${EXE_FILE}")
     EXE_NOSP=$(echo ${EXE_NAME}|tr " " "_");
     EXE_LESS=$(echo ${EXE_NOSP}|sed "s/\.[Ee][Xx][Ee]//" \
                                |sed "s/\.[Mm][Ss][Ii]//")
     EXE_EXT="${EXE_FILE##*.}"
     WINEPREFIX_SUBDIR="${PREFIXES_DIR}/${EXE_LESS}"

     # some games need to cd to the dir to work
     export base=$(basename "${1}")
     export dire=$(dirname  "${1}")

     # if arugment is not an exe file, then quit
     IS_EXE="$(echo ${EXE_EXT}|tr A-Z a-z)"

     # Check if the argument is exe or msi or wzt
     if [ "${IS_EXE}" != "exe" ] && \
        [ "${IS_EXE}" != "msi" ] && \
        [ "${IS_EXE}" != "wzt" ]; then

          echo "E: ${HEADER}: Startup: \"${EXE_NAME}\" is not an EXE file"
          Mesg "I: ${HEADER}: Startup: Please give an exe, msi, or a wzt file."
          DBUG "I: ${HEADER}: Startup: Exiting..."
          exit 1

     fi
fi


# Create wine template and link it to defaults
# If Default (WINEZGUI_TEMPLATE) is not found initialize it

if [ ! -d "${WINEZGUI_TEMPLATE}" ]; then
     DBUG  "I: ${HEADER}: ${WINEZGUI_TEMPLATE} does not exist, creating..."
     mkdir -p "${WINEZGUI_TEMPLATE}"
     source ${DATADIR}/winezgui-initialize-wineprefix
     WineZGUI_Initialize_Wineprefix "${WINEZGUI_TEMPLATE}"
     source ${DATADIR}/winezgui-create-about-yml
     WineZGUI_Create_About_Yml   && DBUG "I: ${HEADER}: New: ${ABOUTFILE}"
fi


# Start WineZGUI when no argument is supplied
if   [ $# -eq 0 ]; then
       DBUG "I: ${HEADER}: Launching WineZGUI"
       WineZGUI_Window
elif [ $# -gt 1 ]; then
       echo "E: ${HEADER}: WineZGUI accepts only 1 argument. It can be an exe, wzt or msi file."
       echo "${0} --help"
       ShowHelp
       exit 1
fi

# Open exe function handles exe argument
source ${DATADIR}/winezgui-open-exe
WineZGUI_Open_Exe "${1}"

